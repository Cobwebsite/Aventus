// AventusSharp@Main:1.0.0
//#region js def //
declare global {
	declare namespace AventusSharp{
namespace WebSocket {
type WsEndPointType = (abstract new (...args: any[]) => WebSocket.EndPoint);
}

namespace WebSocket {
interface WsRouterOptions {
    url: string;
}
}

namespace RAM {
type RamWebSocketListenOnStart = {
    GetAll: boolean;
    GetById: boolean;
    Create: boolean;
    CreateMany: boolean;
    Update: boolean;
    UpdateMany: boolean;
    Delete: boolean;
    DeleteMany: boolean;
};
}

namespace Data {
abstract class Storable extends Aventus.Data implements Aventus.IData {
    id: number;
    createdDate: Date;
    updatedDate: Date;
}
}

namespace WebSocket {
enum WsErrorCode {
    UnknowError = 0,
    CantDefineAssembly = 1,
    ConfigError = 2,
    MultipleMainEndpoint = 3,
    CantGetValueFromBody = 4,
    NoConnection = 5
}
}

namespace WebSocket {
interface WsRouteSendOptions {
    uid?: string;
    timeout?: number;
}
}

namespace WebSocket {
type WsRouteType = abstract new (...args: any[]) => WebSocket.Route;
}

type ExtendWsRouteType<T, U extends string, V extends string | undefined> = T extends WebSocket.WsRouteType ? U extends "" ? {
    type: T;
    path: V;
} : V | undefined extends "" ? {
    type: T;
    path: "";
} : {
    type: T;
    path: Aventus.Join<[U, V], ".">;
} : never;

namespace WebSocket {
type ExtendWsRoutesType<T, U extends string> = T extends readonly ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType)[] ? T extends readonly [infer T extends ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType), ...infer R extends readonly ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType)[]] ? T extends WebSocket.WsRouteType ? [WebSocket.ExtendWsRouteType<T, U, ''>, ...WebSocket.ExtendWsRoutesType<R, U>] : T extends {
    type: WebSocket.WsRouteType;
    path?: string;
} ? [WebSocket.ExtendWsRouteType<T['type'], U, T['path']>, ...WebSocket.ExtendWsRoutesType<R, U>] : never : [] : never;
}

namespace WebSocket {
type MergeWsRoutesType<T> = T extends readonly ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType)[] ? T extends readonly [infer T extends ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType), ...infer R extends readonly ({
    type: WebSocket.WsRouteType;
    path?: string;
} | WebSocket.WsRouteType)[]] ? T extends WebSocket.WsRouteType ? Aventus.MixProto<WebSocket.MergeWsRoutesType<R>, T, ''> : T extends {
    type: WebSocket.WsRouteType;
    path?: string;
} ? T['path'] extends string ? Aventus.MixProto<WebSocket.MergeWsRoutesType<R>, T['type'], T['path']> : Aventus.MixProto<WebSocket.MergeWsRoutesType<R>, T['type'], ''> : never : {} : never;
}

namespace WebSocket {
enum SocketErrorCode {
    socketClosed = 0,
    timeout = 1,
    differentChannel = 2,
    unknow = 3
}
}

namespace WebSocket {
interface SocketMessage {
    channel: string;
    data?: any;
    uid?: string;
}
}

namespace WebSocket {
interface SocketSendMessageOptions {
    channel: string;
    body?: {
        [key: string | number]: any;
    };
    timeout?: number;
    uid?: string;
}
}

namespace WebSocket {
interface SocketRoute<T = any> {
    channel: string;
    callback: (data: T, params: Aventus.UriParamsValue, uid?: string) => void;
}
}

namespace WebSocket {
abstract class Event<T extends any = any> {
    protected endpoint: WebSocket.EndPoint;
    onTrigger: Aventus.Callback<(item: T, params: Aventus.UriParamsValue) => void>;
    protected routeInfo: WebSocket.SocketRoute<T>;
    protected _listening: boolean;
    get listening(): boolean;
    constructor(endpoint: WebSocket.EndPoint);
    /**
     * Define the websocket path
     */
    protected abstract path(): string;
    /**
     * Override this method to tell that the event must listen when created
     */
    protected listenOnBoot(): boolean;
    /**
     * Add the event to the endpoint. After that, the on trigger event can be triggered
     */
    listen(): void;
    /**
     * Remove the event from the endpoint. After that, the on trigger event won't be triggered
     */
    stop(): void;
    protected onEvent(data: T, params: Aventus.UriParamsValue): void;
}
}

namespace Routes {
abstract class StorableRoute<T extends Aventus.IData> extends Aventus.HttpRoute {
    GetAll(): unknown;
    Create(body: {
        item: T;
    } | FormData): unknown;
    CreateMany(body: {
        list: T[];
    } | FormData): unknown;
    GetById(id: number): unknown;
    Update(id: number, body: {
        item: T;
    } | FormData): unknown;
    UpdateMany(body: {
        list: T[];
    } | FormData): unknown;
    Delete(id: number): unknown;
    DeleteMany(body: {
        ids: number[];
    } | FormData): unknown;
    abstract StorableName(): string;
}
}

namespace Routes {
enum RouteErrorCode {
    UnknowError = 0,
    FormContentTypeUnknown = 1,
    CantGetValueFromBody = 2
}
}

namespace Tools {
interface IWithError {
}
}

namespace Tools {
interface IResultWithError extends Tools.IWithError {
}
}

namespace Data {
enum DataErrorCode {
    DefaultDMGenericType = 0,
    DMOnlyForceInherit = 1,
    TypeNotStorable = 2,
    TypeTooMuchStorable = 3,
    GenericNotAbstract = 4,
    ParentNotAbstract = 5,
    InfiniteLoop = 6,
    InterfaceNotUnique = 7,
    SelfReferecingDependance = 8,
    DMNotExist = 9,
    DMAlreadyExist = 10,
    MethodNotFound = 11,
    StorageDisconnected = 12,
    StorageNotFound = 13,
    NoConnectionInsideStorage = 14,
    TypeNotExistInsideStorage = 15,
    UnknowError = 16,
    NoItemProvided = 17,
    NoTransactionInProgress = 18,
    WrongType = 19,
    NoTypeIdentifierFoundInsideQuery = 20,
    ItemNoExistInsideStorage = 21,
    ItemAlreadyExist = 22,
    ValidationError = 23,
    GetAllNotAllowed = 24,
    GetByIdNotAllowed = 25,
    GetByIdsNotAllowed = 26,
    WhereNotAllowed = 27,
    CreateNotAllowed = 28,
    UpdateNotAllowed = 29,
    DeleteNotAllowed = 30,
    NumberOfItemsNotMatching = 31,
    FieldTypeNotFound = 32,
    MemberNotFound = 33,
    TooMuchMemberFound = 34,
    TypeNotFound = 35,
    ReverseLinkNotExist = 36,
    ErrorCreatingReverseQuery = 37
}
}

namespace Data {
@Convertible()
class DataError extends Aventus.GenericError<Data.DataErrorCode> {
    static get Fullname(): string;
}
}

namespace Tools {
@Convertible()
class VoidWithError<T extends Aventus.GenericError = Aventus.GenericError> extends Aventus.VoidWithError<T> implements Tools.IWithError {
    static get Fullname(): string;
}
}

namespace Data {
class VoidWithDataError extends Tools.VoidWithError<Data.DataError> {
    static get Fullname(): string;
}
}

namespace Tools {
@Convertible()
class ResultWithError<T, U extends Aventus.GenericError = Aventus.GenericError> extends Aventus.ResultWithError<T, U> implements Tools.IResultWithError {
    static get Fullname(): string;
}
}

namespace Data {
class ResultWithDataError<T> extends Tools.ResultWithError<T, Data.DataError> {
    static get Fullname(): string;
}
}

namespace Routes {
@Convertible()
class RouteError extends Aventus.GenericError<Routes.RouteErrorCode> {
    static get Fullname(): string;
}
}

namespace Routes {
class ResultWithRouteError<T> extends Tools.ResultWithError<T, Routes.RouteError> {
    static get Fullname(): string;
}
}

namespace Routes {
class VoidWithRouteError extends Tools.VoidWithError<Routes.RouteError> {
    static get Fullname(): string;
}
}

namespace WebSocket {
type InternalSocketRoute = WebSocket.SocketRoute & Aventus.PreparedUri;
}

namespace WebSocket {
interface ConnectionOptions {
    log?: boolean;
    host?: string;
    port?: number;
    useHttps?: boolean;
    routes?: {
        [key: string]: WebSocket.InternalSocketRoute[];
    };
    /**
     * Define the name for the websocket
     * It ll open the ws connection on /ws/${socketName}
     */
    socketName?: string;
    /**
     * Define if the message must be buffered before the socket open.
     * If true, when the socket is opened, all messages in buffered will be sent
     */
    allowSendBeforeOpen?: boolean;
}
}

namespace WebSocket {
class SocketError extends Aventus.GenericError<WebSocket.SocketErrorCode> {
}
}

namespace WebSocket {
abstract class Connection {
    private options;
    private waitingList;
    private timeoutError;
    private memoryBeforeOpen;
    private socket?;
    protected constructor();
    /**
     * Define the configuration for your websocket
     */
    protected abstract configure(options: WebSocket.ConnectionOptions): WebSocket.ConnectionOptions;
    /**
     * Configure a new Websocket
     */
    private _configure;
    /**
     * Add a new route to listen to the websocket
     */
    addRoute(newRoute: WebSocket.SocketRoute): void;
    /**
     * The route to remove
     * @param route - The route to remove
     */
    removeRoute(route: WebSocket.SocketRoute): void;
    private openCallback;
    /**
     * Try to open the websocket
     */
    open(): Promise<boolean>;
    private jsonReplacer;
    /**
     * Send a message though the websocket
     * @param channelName The channel on which the message is sent
     * @param data The data to send
     * @param options the options to add to the message (typically the uid)
     */
    sendMessage<T>(options: WebSocket.SocketSendMessageOptions): Aventus.VoidWithError;
    /**
     * Send a message though the websocket and wait one answer give in parameters callbacks
     * @param channelName The channel on which the message is sent
     * @param body The data to send
     * @param timeout The timeout before the request failed
     */
    sendMessageAndWait<T>(options: WebSocket.SocketSendMessageOptions): Promise<Aventus.ResultWithError<T>>;
    /**
     * Check if socket is ready
     */
    isReady(): boolean;
    /**
     * Callback when the websocket connection is open
     */
    protected onOpen(): void;
    private _onOpen;
    private errorOccur;
    /**
     * Callback called when the socket as an error
     */
    protected onError(event: Event): void;
    private _onError;
    /**
     * Callback called when the connection closed without calling the close function
     * By default the socket will try to reconnect each 5000ms
     */
    onClose(event: Event): void;
    private _onClose;
    /**
     * Close the current connection
     */
    close(): void;
    private onMessage;
    /**
     * Print a msg inside the console
     */
    protected log(message: {} | string): void;
}
}

namespace WebSocket {
type WsEventType = abstract new (...args: any[]) => WebSocket.Event;
}

type ExtendWsEventType<T, U extends string, V extends string | undefined> = T extends WebSocket.WsEventType ? U extends "" ? {
    type: T;
    path: V;
} : V | undefined extends "" ? {
    type: T;
    path: "";
} : {
    type: T;
    path: Aventus.Join<[U, V], ".">;
} : never;

namespace WebSocket {
type ExtendWsEventsType<T, U extends string> = T extends readonly ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType)[] ? T extends readonly [infer T extends ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType), ...infer R extends readonly ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType)[]] ? T extends WebSocket.WsEventType ? [WebSocket.ExtendWsEventType<T, U, ''>, ...WebSocket.ExtendWsEventsType<R, U>] : T extends {
    type: WebSocket.WsEventType;
    path?: string;
} ? [WebSocket.ExtendWsEventType<T['type'], U, T['path']>, ...WebSocket.ExtendWsEventsType<R, U>] : never : [] : never;
}

namespace WebSocket {
type MergeWsEventsType<T> = T extends readonly ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType)[] ? T extends readonly [infer T extends ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType), ...infer R extends readonly ({
    type: WebSocket.WsEventType;
    path?: string;
} | WebSocket.WsEventType)[]] ? T extends WebSocket.WsEventType ? Aventus.MixProto<WebSocket.MergeWsEventsType<R>, T, ''> : T extends {
    type: WebSocket.WsEventType;
    path?: string;
} ? T['path'] extends string ? Aventus.MixProto<WebSocket.MergeWsEventsType<R>, T['type'], T['path']> : Aventus.MixProto<WebSocket.MergeWsEventsType<R>, T['type'], ''> : never : {} : never;
}

namespace WebSocket {
abstract class EndPoint extends WebSocket.Connection {
    static With<const T extends {
        routes: readonly {
            type: WebSocket.WsRouteType;
            path: string;
        }[];
        events: readonly {
            type: WebSocket.WsEventType;
            path: string;
        }[];
    }>(options: T): Aventus.MixProto<Aventus.MixProto<typeof EndPoint, WebSocket.MergeWsRoutesType<T["routes"]>, "routes">, WebSocket.MergeWsEventsType<T["events"]>, "events">;
    private _routes;
    private _events;
    constructor();
    private createProxy;
    /**
     * @inheritdoc
     */
    protected configure(options: WebSocket.ConnectionOptions): WebSocket.ConnectionOptions;
    protected abstract get path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_DeleteMany<T> extends WebSocket.Event<T[]> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_Delete<T> extends WebSocket.Event<T> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_UpdateMany<T> extends WebSocket.Event<T[]> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_Update<T> extends WebSocket.Event<T> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_GetById<T> extends WebSocket.Event<T> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_CreateMany<T> extends WebSocket.Event<T[]> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_Create<T> extends WebSocket.Event<T> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class StorableWsRoute_GetAll<T> extends WebSocket.Event<T[]> {
    StorableName: () => string;
    constructor(endpoint: WebSocket.EndPoint, StorableName: () => string);
    /**
     * @inheritdoc
     */
    protected path(): string;
}
}

namespace WebSocket {
class Route {
    readonly endpoint: WebSocket.EndPoint;
    constructor(endpoint: WebSocket.EndPoint);
}
}

namespace WebSocket {
abstract class StorableWsRoute<T extends Aventus.IData> extends WebSocket.Route {
    events: {
        GetAll: WebSocket.StorableWsRoute_GetAll<T>;
        Create: WebSocket.StorableWsRoute_Create<T>;
        CreateMany: WebSocket.StorableWsRoute_CreateMany<T>;
        GetById: WebSocket.StorableWsRoute_GetById<T>;
        Update: WebSocket.StorableWsRoute_Update<T>;
        UpdateMany: WebSocket.StorableWsRoute_UpdateMany<T>;
        Delete: WebSocket.StorableWsRoute_Delete<T>;
        DeleteMany: WebSocket.StorableWsRoute_DeleteMany<T>;
    };
    constructor(endpoint: WebSocket.EndPoint);
    GetAll(options?: WebSocket.WsRouteSendOptions): unknown;
    Create(body: {
        item: T;
    } | FormData, options?: WebSocket.WsRouteSendOptions): unknown;
    CreateMany(body: {
        list: T[];
    } | FormData, options?: WebSocket.WsRouteSendOptions): unknown;
    GetById(id: number, options?: WebSocket.WsRouteSendOptions): unknown;
    Update(id: number, body: {
        item: T;
    } | FormData, options?: WebSocket.WsRouteSendOptions): unknown;
    UpdateMany(body: {
        list: T[];
    } | FormData, options?: WebSocket.WsRouteSendOptions): unknown;
    Delete(id: number, options?: WebSocket.WsRouteSendOptions): unknown;
    DeleteMany(body: {
        ids: number[];
    } | FormData, options?: WebSocket.WsRouteSendOptions): unknown;
    abstract StorableName(): string;
}
}

namespace WebSocket {
@Convertible()
class WsError extends Aventus.GenericError<WebSocket.WsErrorCode> {
    static get Fullname(): string;
}
}

namespace WebSocket {
class ResultWithWsError<T> extends Tools.ResultWithError<T, WebSocket.WsError> {
    static get Fullname(): string;
}
}

namespace WebSocket {
class VoidWithWsError extends Tools.VoidWithError<WebSocket.WsError> {
    static get Fullname(): string;
}
}

namespace RAM {
abstract class RamHttp<T extends Data.Storable> extends Aventus.Ram<T> {
    protected getAllDone: boolean;
    private routes;
    abstract defineRoutes(): Routes.StorableRoute<T>;
    protected constructor();
    protected beforeGetAll(result: Aventus.ResultRamWithError<Map<number, Aventus.RamItem<T>>>): Promise<void>;
    protected beforeGetById(id: number, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeGetByIds(ids: number[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected beforeCreateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeCreateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected beforeUpdateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeUpdateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected beforeDeleteItem(item: T, fromList: boolean, result: Aventus.VoidWithError): Promise<void>;
    protected beforeDeleteList(list: T[], result: Aventus.VoidWithError): Promise<void>;
}
}

namespace RAM {
abstract class RamWebSocket<T extends Data.Storable> extends Aventus.Ram<T> {
    protected getAllDone: boolean;
    private routes;
    protected otherGetAllLocked: {
        [uid: string]: true;
    };
    protected otherGetByIdLocked: {
        [uid: string]: true;
    };
    protected otherCreateItemLocked: {
        [uid: string]: true;
    };
    protected otherCreateListLocked: {
        [uid: string]: true;
    };
    protected otherUpdateItemLocked: {
        [uid: string]: true;
    };
    protected otherUpdateListLocked: {
        [uid: string]: true;
    };
    protected otherDeleteItemLocked: {
        [uid: string]: true;
    };
    protected otherDeleteListLocked: {
        [uid: string]: true;
    };
    abstract defineRoutes(): WebSocket.StorableWsRoute<T>;
    protected constructor();
    protected addEventsBindings(): void;
    protected listenOnStart(): RAM.RamWebSocketListenOnStart;
    protected otherGetAll(items: T[], params: Aventus.UriParams, uid?: string): void;
    protected beforeGetAll(result: Aventus.ResultRamWithError<Map<number, Aventus.RamItem<T>>>): Promise<void>;
    protected otherGetById(item: T, params: Aventus.UriParams, uid?: string): void;
    protected beforeGetById(id: number, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeGetByIds(ids: number[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected otherCreateItem(item: T, params: Aventus.UriParams, uid?: string): void;
    protected beforeCreateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected otherCreateList(items: T[], params: Aventus.UriParams, uid?: string): void;
    protected beforeCreateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected otherUpdateItem(item: T, params: Aventus.UriParams, uid?: string): void;
    protected beforeUpdateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected otherUpdateList(items: T[], params: Aventus.UriParams, uid?: string): void;
    protected beforeUpdateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected otherDeleteItem(item: T, params: Aventus.UriParams, uid?: string): void;
    protected beforeDeleteItem(item: T, fromList: boolean, result: Aventus.VoidWithError): Promise<void>;
    protected otherDeleteList(items: T[], params: Aventus.UriParams, uid?: string): void;
    protected beforeDeleteList(list: T[], result: Aventus.VoidWithError): Promise<void>;
    /**
    * Delete element inside Ram without firing delete event
    */
    protected deleteData(item: Aventus.KeysObject<T>, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): void;
}
}

	}
}
//#endregion js def //
//#region js src //
{"namespace":"AventusSharp","available":[{"code":"Data.Storable=class Storable extends Aventus.Data {\n    id = 0;\n    createdDate = new Date();\n    updatedDate = new Date();\n}\nData.Storable.$schema={\"id\":\"number\",\"createdDate\":\"Date\",\"updatedDate\":\"Date\"};Aventus.DataManager.register(Data.Storable.Fullname, Data.Storable);Data.Storable.Namespace=`${moduleName}.Data`;\r\n_.Data.Storable=Data.Storable;","dependances":[{"fullName":"Aventus.Data","isStrong":true},{"fullName":"Aventus.IData","isStrong":true},{"fullName":"Date","isStrong":false}],"fullName":"AventusSharp.Data.Storable","required":false,"type":2,"isExported":true,"convertibleName":""},{"code":"(function (WsErrorCode) {\n    WsErrorCode[WsErrorCode[\"UnknowError\"] = 0] = \"UnknowError\";\n    WsErrorCode[WsErrorCode[\"CantDefineAssembly\"] = 1] = \"CantDefineAssembly\";\n    WsErrorCode[WsErrorCode[\"ConfigError\"] = 2] = \"ConfigError\";\n    WsErrorCode[WsErrorCode[\"MultipleMainEndpoint\"] = 3] = \"MultipleMainEndpoint\";\n    WsErrorCode[WsErrorCode[\"CantGetValueFromBody\"] = 4] = \"CantGetValueFromBody\";\n    WsErrorCode[WsErrorCode[\"NoConnection\"] = 5] = \"NoConnection\";\n})(WebSocket.WsErrorCode || (WebSocket.WsErrorCode = {}));\n\r\n_.WebSocket.WsErrorCode=WebSocket.WsErrorCode;","dependances":[],"fullName":"AventusSharp.WebSocket.WsErrorCode","required":false,"type":6,"isExported":true,"convertibleName":""},{"code":"(function (SocketErrorCode) {\n    SocketErrorCode[SocketErrorCode[\"socketClosed\"] = 0] = \"socketClosed\";\n    SocketErrorCode[SocketErrorCode[\"timeout\"] = 1] = \"timeout\";\n    SocketErrorCode[SocketErrorCode[\"differentChannel\"] = 2] = \"differentChannel\";\n    SocketErrorCode[SocketErrorCode[\"unknow\"] = 3] = \"unknow\";\n})(WebSocket.SocketErrorCode || (WebSocket.SocketErrorCode = {}));\n\r\n_.WebSocket.SocketErrorCode=WebSocket.SocketErrorCode;","dependances":[],"fullName":"AventusSharp.WebSocket.SocketErrorCode","required":false,"type":6,"isExported":true,"convertibleName":""},{"code":"WebSocket.Event=class Event {\n    endpoint;\n    onTrigger = new Aventus.Callback();\n    routeInfo;\n    _listening = false;\n    get listening() {\n        return this._listening;\n    }\n    constructor(endpoint) {\n        this.endpoint = endpoint;\n        this.onEvent = this.onEvent.bind(this);\n        this.routeInfo = {\n            channel: this.path(),\n            callback: this.onEvent\n        };\n        if (this.listenOnBoot()) {\n            this.listen();\n        }\n    }\n    /**\n     * Override this method to tell that the event must listen when created\n     */\n    listenOnBoot() {\n        return false;\n    }\n    /**\n     * Add the event to the endpoint. After that, the on trigger event can be triggered\n     */\n    listen() {\n        if (!this._listening) {\n            this._listening = true;\n            this.endpoint.addRoute(this.routeInfo);\n        }\n    }\n    /**\n     * Remove the event from the endpoint. After that, the on trigger event won't be triggered\n     */\n    stop() {\n        if (this._listening) {\n            this._listening = false;\n            this.endpoint.removeRoute(this.routeInfo);\n        }\n    }\n    onEvent(data, params) {\n        this.onTrigger.trigger([data, params]);\n    }\n}\nWebSocket.Event.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.Event=WebSocket.Event;","dependances":[{"fullName":"Aventus.Callback","isStrong":false},{"fullName":"Aventus.UriParamsValue","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketRoute","isStrong":false}],"fullName":"AventusSharp.WebSocket.Event","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"Routes.StorableRoute=class StorableRoute extends Aventus.HttpRoute {\n    async GetAll() {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}`, Aventus.HttpMethod.GET);\n        return await request.queryJSON(this.router);\n    }\n    async Create(body) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}`, Aventus.HttpMethod.POST);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async CreateMany(body) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}s`, Aventus.HttpMethod.POST);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async GetById(id) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}/${id}`, Aventus.HttpMethod.GET);\n        return await request.queryJSON(this.router);\n    }\n    async Update(id, body) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}/${id}`, Aventus.HttpMethod.PUT);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async UpdateMany(body) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}s`, Aventus.HttpMethod.PUT);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async Delete(id) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}/${id}`, Aventus.HttpMethod.DELETE);\n        return await request.queryJSON(this.router);\n    }\n    async DeleteMany(body) {\n        const request = new Aventus.HttpRequest(`/${this.StorableName()}s`, Aventus.HttpMethod.DELETE);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n}\nRoutes.StorableRoute.Namespace=`${moduleName}.Routes`;\r\n_.Routes.StorableRoute=Routes.StorableRoute;","dependances":[{"fullName":"Aventus.HttpRoute","isStrong":true},{"fullName":"Aventus.IData","isStrong":false},{"fullName":"Aventus.HttpRequest","isStrong":false},{"fullName":"Aventus.HttpMethod","isStrong":false},{"fullName":"TypeResult","isStrong":false},{"fullName":"FormData","isStrong":false}],"fullName":"AventusSharp.Routes.StorableRoute","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"(function (RouteErrorCode) {\n    RouteErrorCode[RouteErrorCode[\"UnknowError\"] = 0] = \"UnknowError\";\n    RouteErrorCode[RouteErrorCode[\"FormContentTypeUnknown\"] = 1] = \"FormContentTypeUnknown\";\n    RouteErrorCode[RouteErrorCode[\"CantGetValueFromBody\"] = 2] = \"CantGetValueFromBody\";\n})(Routes.RouteErrorCode || (Routes.RouteErrorCode = {}));\n\r\n_.Routes.RouteErrorCode=Routes.RouteErrorCode;","dependances":[],"fullName":"AventusSharp.Routes.RouteErrorCode","required":false,"type":6,"isExported":true,"convertibleName":""},{"code":"(function (DataErrorCode) {\n    DataErrorCode[DataErrorCode[\"DefaultDMGenericType\"] = 0] = \"DefaultDMGenericType\";\n    DataErrorCode[DataErrorCode[\"DMOnlyForceInherit\"] = 1] = \"DMOnlyForceInherit\";\n    DataErrorCode[DataErrorCode[\"TypeNotStorable\"] = 2] = \"TypeNotStorable\";\n    DataErrorCode[DataErrorCode[\"TypeTooMuchStorable\"] = 3] = \"TypeTooMuchStorable\";\n    DataErrorCode[DataErrorCode[\"GenericNotAbstract\"] = 4] = \"GenericNotAbstract\";\n    DataErrorCode[DataErrorCode[\"ParentNotAbstract\"] = 5] = \"ParentNotAbstract\";\n    DataErrorCode[DataErrorCode[\"InfiniteLoop\"] = 6] = \"InfiniteLoop\";\n    DataErrorCode[DataErrorCode[\"InterfaceNotUnique\"] = 7] = \"InterfaceNotUnique\";\n    DataErrorCode[DataErrorCode[\"SelfReferecingDependance\"] = 8] = \"SelfReferecingDependance\";\n    DataErrorCode[DataErrorCode[\"DMNotExist\"] = 9] = \"DMNotExist\";\n    DataErrorCode[DataErrorCode[\"DMAlreadyExist\"] = 10] = \"DMAlreadyExist\";\n    DataErrorCode[DataErrorCode[\"MethodNotFound\"] = 11] = \"MethodNotFound\";\n    DataErrorCode[DataErrorCode[\"StorageDisconnected\"] = 12] = \"StorageDisconnected\";\n    DataErrorCode[DataErrorCode[\"StorageNotFound\"] = 13] = \"StorageNotFound\";\n    DataErrorCode[DataErrorCode[\"NoConnectionInsideStorage\"] = 14] = \"NoConnectionInsideStorage\";\n    DataErrorCode[DataErrorCode[\"TypeNotExistInsideStorage\"] = 15] = \"TypeNotExistInsideStorage\";\n    DataErrorCode[DataErrorCode[\"UnknowError\"] = 16] = \"UnknowError\";\n    DataErrorCode[DataErrorCode[\"NoItemProvided\"] = 17] = \"NoItemProvided\";\n    DataErrorCode[DataErrorCode[\"NoTransactionInProgress\"] = 18] = \"NoTransactionInProgress\";\n    DataErrorCode[DataErrorCode[\"WrongType\"] = 19] = \"WrongType\";\n    DataErrorCode[DataErrorCode[\"NoTypeIdentifierFoundInsideQuery\"] = 20] = \"NoTypeIdentifierFoundInsideQuery\";\n    DataErrorCode[DataErrorCode[\"ItemNoExistInsideStorage\"] = 21] = \"ItemNoExistInsideStorage\";\n    DataErrorCode[DataErrorCode[\"ItemAlreadyExist\"] = 22] = \"ItemAlreadyExist\";\n    DataErrorCode[DataErrorCode[\"ValidationError\"] = 23] = \"ValidationError\";\n    DataErrorCode[DataErrorCode[\"GetAllNotAllowed\"] = 24] = \"GetAllNotAllowed\";\n    DataErrorCode[DataErrorCode[\"GetByIdNotAllowed\"] = 25] = \"GetByIdNotAllowed\";\n    DataErrorCode[DataErrorCode[\"GetByIdsNotAllowed\"] = 26] = \"GetByIdsNotAllowed\";\n    DataErrorCode[DataErrorCode[\"WhereNotAllowed\"] = 27] = \"WhereNotAllowed\";\n    DataErrorCode[DataErrorCode[\"CreateNotAllowed\"] = 28] = \"CreateNotAllowed\";\n    DataErrorCode[DataErrorCode[\"UpdateNotAllowed\"] = 29] = \"UpdateNotAllowed\";\n    DataErrorCode[DataErrorCode[\"DeleteNotAllowed\"] = 30] = \"DeleteNotAllowed\";\n    DataErrorCode[DataErrorCode[\"NumberOfItemsNotMatching\"] = 31] = \"NumberOfItemsNotMatching\";\n    DataErrorCode[DataErrorCode[\"FieldTypeNotFound\"] = 32] = \"FieldTypeNotFound\";\n    DataErrorCode[DataErrorCode[\"MemberNotFound\"] = 33] = \"MemberNotFound\";\n    DataErrorCode[DataErrorCode[\"TooMuchMemberFound\"] = 34] = \"TooMuchMemberFound\";\n    DataErrorCode[DataErrorCode[\"TypeNotFound\"] = 35] = \"TypeNotFound\";\n    DataErrorCode[DataErrorCode[\"ReverseLinkNotExist\"] = 36] = \"ReverseLinkNotExist\";\n    DataErrorCode[DataErrorCode[\"ErrorCreatingReverseQuery\"] = 37] = \"ErrorCreatingReverseQuery\";\n})(Data.DataErrorCode || (Data.DataErrorCode = {}));\n\r\n_.Data.DataErrorCode=Data.DataErrorCode;","dependances":[],"fullName":"AventusSharp.Data.DataErrorCode","required":false,"type":6,"isExported":true,"convertibleName":""},{"code":"Data.DataError=class DataError extends Aventus.GenericError {\n    static get Fullname() { return \"AventusSharp.Data.DataError, AventusSharp\"; }\n}\nData.DataError.Namespace=`${moduleName}.Data`;Aventus.Converter.register(Data.DataError.Fullname, Data.DataError);\r\n_.Data.DataError=Data.DataError;","dependances":[{"fullName":"Aventus.GenericError","isStrong":true},{"fullName":"AventusSharp.Data.DataErrorCode","isStrong":true},{"fullName":"Convertible","isStrong":false}],"fullName":"AventusSharp.Data.DataError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Tools.VoidWithError=class VoidWithError extends Aventus.VoidWithError {\n    static get Fullname() { return \"AventusSharp.Tools.VoidWithError, AventusSharp\"; }\n}\nTools.VoidWithError.Namespace=`${moduleName}.Tools`;Aventus.Converter.register(Tools.VoidWithError.Fullname, Tools.VoidWithError);\r\n_.Tools.VoidWithError=Tools.VoidWithError;","dependances":[{"fullName":"Aventus.VoidWithError","isStrong":true},{"fullName":"AventusSharp.Tools.IWithError","isStrong":true},{"fullName":"Convertible","isStrong":false},{"fullName":"Aventus.GenericError","isStrong":false}],"fullName":"AventusSharp.Tools.VoidWithError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Data.VoidWithDataError=class VoidWithDataError extends Tools.VoidWithError {\n    static get Fullname() { return \"AventusSharp.Data.VoidWithDataError, AventusSharp\"; }\n}\nData.VoidWithDataError.Namespace=`${moduleName}.Data`;Aventus.Converter.register(Data.VoidWithDataError.Fullname, Data.VoidWithDataError);\r\n_.Data.VoidWithDataError=Data.VoidWithDataError;","dependances":[{"fullName":"AventusSharp.Tools.VoidWithError","isStrong":true},{"fullName":"AventusSharp.Data.DataError","isStrong":true}],"fullName":"AventusSharp.Data.VoidWithDataError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Tools.ResultWithError=class ResultWithError extends Aventus.ResultWithError {\n    static get Fullname() { return \"AventusSharp.Tools.ResultWithError, AventusSharp\"; }\n}\nTools.ResultWithError.Namespace=`${moduleName}.Tools`;Aventus.Converter.register(Tools.ResultWithError.Fullname, Tools.ResultWithError);\r\n_.Tools.ResultWithError=Tools.ResultWithError;","dependances":[{"fullName":"Aventus.ResultWithError","isStrong":true},{"fullName":"AventusSharp.Tools.IResultWithError","isStrong":true},{"fullName":"Convertible","isStrong":false},{"fullName":"Aventus.GenericError","isStrong":false}],"fullName":"AventusSharp.Tools.ResultWithError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Data.ResultWithDataError=class ResultWithDataError extends Tools.ResultWithError {\n    static get Fullname() { return \"AventusSharp.Data.ResultWithDataError, AventusSharp\"; }\n}\nData.ResultWithDataError.Namespace=`${moduleName}.Data`;Aventus.Converter.register(Data.ResultWithDataError.Fullname, Data.ResultWithDataError);\r\n_.Data.ResultWithDataError=Data.ResultWithDataError;","dependances":[{"fullName":"AventusSharp.Tools.ResultWithError","isStrong":true},{"fullName":"AventusSharp.Data.DataError","isStrong":true}],"fullName":"AventusSharp.Data.ResultWithDataError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Routes.RouteError=class RouteError extends Aventus.GenericError {\n    static get Fullname() { return \"AventusSharp.Routes.RouteError, AventusSharp\"; }\n}\nRoutes.RouteError.Namespace=`${moduleName}.Routes`;Aventus.Converter.register(Routes.RouteError.Fullname, Routes.RouteError);\r\n_.Routes.RouteError=Routes.RouteError;","dependances":[{"fullName":"Aventus.GenericError","isStrong":true},{"fullName":"AventusSharp.Routes.RouteErrorCode","isStrong":true},{"fullName":"Convertible","isStrong":false}],"fullName":"AventusSharp.Routes.RouteError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Routes.ResultWithRouteError=class ResultWithRouteError extends Tools.ResultWithError {\n    static get Fullname() { return \"AventusSharp.Routes.ResultWithRouteError, AventusSharp\"; }\n}\nRoutes.ResultWithRouteError.Namespace=`${moduleName}.Routes`;Aventus.Converter.register(Routes.ResultWithRouteError.Fullname, Routes.ResultWithRouteError);\r\n_.Routes.ResultWithRouteError=Routes.ResultWithRouteError;","dependances":[{"fullName":"AventusSharp.Tools.ResultWithError","isStrong":true},{"fullName":"AventusSharp.Routes.RouteError","isStrong":true}],"fullName":"AventusSharp.Routes.ResultWithRouteError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"Routes.VoidWithRouteError=class VoidWithRouteError extends Tools.VoidWithError {\n    static get Fullname() { return \"AventusSharp.Routes.VoidWithRouteError, AventusSharp\"; }\n}\nRoutes.VoidWithRouteError.Namespace=`${moduleName}.Routes`;Aventus.Converter.register(Routes.VoidWithRouteError.Fullname, Routes.VoidWithRouteError);\r\n_.Routes.VoidWithRouteError=Routes.VoidWithRouteError;","dependances":[{"fullName":"AventusSharp.Tools.VoidWithError","isStrong":true},{"fullName":"AventusSharp.Routes.RouteError","isStrong":true}],"fullName":"AventusSharp.Routes.VoidWithRouteError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"WebSocket.SocketError=class SocketError extends Aventus.GenericError {\n}\nWebSocket.SocketError.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.SocketError=WebSocket.SocketError;","dependances":[{"fullName":"Aventus.GenericError","isStrong":true},{"fullName":"AventusSharp.WebSocket.SocketErrorCode","isStrong":true}],"fullName":"AventusSharp.WebSocket.SocketError","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.Connection=class Connection {\n    options;\n    waitingList = {};\n    timeoutError = 0;\n    memoryBeforeOpen = [];\n    socket;\n    constructor() {\n        this.options = this._configure(this.configure({}));\n    }\n    /**\n     * Configure a new Websocket\n     */\n    _configure(options = {}) {\n        if (!options.host) {\n            options.host = window.location.hostname;\n        }\n        if (!options.hasOwnProperty('useHttps')) {\n            options.useHttps = window.location.protocol == \"https:\";\n        }\n        if (!options.port) {\n            if (window.location.port) {\n                options.port = parseInt(window.location.port);\n            }\n            else {\n                options.port = options.useHttps ? 443 : 80;\n            }\n        }\n        if (!options.routes) {\n            options.routes = {};\n        }\n        if (!options.socketName) {\n            options.socketName = \"\";\n        }\n        if (options.log === undefined) {\n            options.log = false;\n        }\n        return options;\n    }\n    /**\n     * Add a new route to listen to the websocket\n     */\n    addRoute(newRoute) {\n        if (!this.options.routes.hasOwnProperty(newRoute.channel)) {\n            this.options.routes[newRoute.channel] = [];\n        }\n        for (let info of this.options.routes[newRoute.channel]) {\n            if (info.callback == newRoute.callback) {\n                return;\n            }\n        }\n        const { params, regex } = Aventus.Uri.prepare(newRoute.channel);\n        let prepared = {\n            callback: newRoute.callback,\n            channel: newRoute.channel,\n            regex,\n            params\n        };\n        this.options.routes[newRoute.channel].push(prepared);\n    }\n    /**\n     * The route to remove\n     * @param route - The route to remove\n     */\n    removeRoute(route) {\n        for (let i = 0; i < this.options.routes[route.channel].length; i++) {\n            let info = this.options.routes[route.channel][i];\n            if (info.callback == route.callback) {\n                this.options.routes[route.channel].splice(i, 1);\n                i--;\n            }\n        }\n    }\n    openCallback;\n    /**\n     * Try to open the websocket\n     */\n    open() {\n        return new Promise((resolve) => {\n            try {\n                if (this.socket) {\n                    this.socket.close();\n                }\n                let protocol = \"ws\";\n                if (this.options.useHttps) {\n                    protocol = \"wss\";\n                }\n                let url = protocol + \"://\" + this.options.host + \":\" + this.options.port + this.options.socketName;\n                this.log(url);\n                this.openCallback = (isOpen) => {\n                    resolve(isOpen);\n                };\n                this.socket = new window.WebSocket(url);\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onmessage = this.onMessage.bind(this);\n            }\n            catch (e) {\n                console.log(e);\n                resolve(false);\n            }\n        });\n    }\n    jsonReplacer(key, value) {\n        if (this[key] instanceof Date && this[key].getFullYear() < 100) {\n            return \"0001-01-01T00:00:00\";\n        }\n        return value;\n    }\n    /**\n     * Send a message though the websocket\n     * @param channelName The channel on which the message is sent\n     * @param data The data to send\n     * @param options the options to add to the message (typically the uid)\n     */\n    sendMessage(options) {\n        let result = new Tools.VoidWithError();\n        if (this.socket && this.socket.readyState == 1) {\n            try {\n                let message = {\n                    channel: options.channel,\n                };\n                if (options.uid) {\n                    message.uid = options.uid;\n                }\n                if (options.body) {\n                    message.data = options.body;\n                    this.log(message);\n                    if (typeof options.body != 'string') {\n                        message.data = JSON.stringify(options.body, this.jsonReplacer);\n                    }\n                }\n                else {\n                    this.log(message);\n                }\n                this.socket.send(JSON.stringify(message));\n            }\n            catch (e) {\n                result.errors.push(new WebSocket.SocketError(WebSocket.SocketErrorCode.unknow, e));\n            }\n        }\n        else {\n            result.errors.push(new WebSocket.SocketError(WebSocket.SocketErrorCode.socketClosed, \"Socket not ready ! Please ensure that it is open and ready to send message\"));\n            this.log('Socket not ready ! Please ensure that it is open and ready to send message');\n            if (this.options.allowSendBeforeOpen) {\n                this.memoryBeforeOpen.push(options);\n            }\n        }\n        return result;\n    }\n    /**\n     * Send a message though the websocket and wait one answer give in parameters callbacks\n     * @param channelName The channel on which the message is sent\n     * @param body The data to send\n     * @param timeout The timeout before the request failed\n     */\n    sendMessageAndWait(options) {\n        return new Promise((resolve) => {\n            let result = new Aventus.ResultWithError();\n            try {\n                let _uid = options.uid ? options.uid : Aventus.uuidv4();\n                options.uid = _uid;\n                let timeoutInfo;\n                this.waitingList[_uid] = (channel, data) => {\n                    clearTimeout(timeoutInfo);\n                    if (channel != options.channel) {\n                        result.errors.push(new WebSocket.SocketError(WebSocket.SocketErrorCode.differentChannel, `We sent a message on ${options.channel} but we receive on ${channel}`));\n                        resolve(result);\n                    }\n                    else {\n                        if (data instanceof Aventus.VoidWithError) {\n                            for (let error of data.errors) {\n                                result.errors.push(error);\n                            }\n                            if (data instanceof Aventus.ResultWithError) {\n                                result.result = data.result;\n                            }\n                        }\n                        else {\n                            result.result = data;\n                        }\n                        resolve(result);\n                    }\n                };\n                if (options.timeout !== undefined) {\n                    timeoutInfo = setTimeout(() => {\n                        delete this.waitingList[_uid];\n                        result.errors.push(new WebSocket.SocketError(WebSocket.SocketErrorCode.timeout, \"No message received after \" + options.timeout + \"ms\"));\n                        resolve(result);\n                    }, options.timeout);\n                }\n                let sendMessageResult = this.sendMessage(options);\n                if (!sendMessageResult.success) {\n                    for (let error of sendMessageResult.errors) {\n                        result.errors.push(error);\n                    }\n                    resolve(result);\n                }\n            }\n            catch (e) {\n                result.errors.push(new WebSocket.SocketError(WebSocket.SocketErrorCode.unknow, e));\n                resolve(result);\n            }\n        });\n    }\n    ;\n    /**\n     * Check if socket is ready\n     */\n    isReady() {\n        if (this.socket && this.socket.readyState == 1) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Callback when the websocket connection is open\n     */\n    onOpen() {\n    }\n    _onOpen() {\n        if (this.socket && this.socket.readyState == 1) {\n            if (this.openCallback) {\n                this.openCallback(true);\n                this.openCallback = undefined;\n            }\n            this.log('Connection successfully established !' + this.options.host + \":\" + this.options.port);\n            window.clearTimeout(this.timeoutError);\n            this.onOpen();\n            for (let i = 0; i < this.memoryBeforeOpen.length; i++) {\n                this.sendMessage(this.memoryBeforeOpen[i]);\n            }\n            this.memoryBeforeOpen = [];\n        }\n        else {\n            if (this.openCallback) {\n                this.openCallback(false);\n                this.openCallback = undefined;\n            }\n        }\n    }\n    errorOccur = false;\n    /**\n     * Callback called when the socket as an error\n     */\n    onError(event) {\n    }\n    _onError(event) {\n        this.errorOccur = true;\n        if (this.openCallback) {\n            this.openCallback(false);\n            this.openCallback = undefined;\n            return;\n        }\n        this.log('An error has occured');\n        this.onError(event);\n    }\n    /**\n     * Callback called when the connection closed without calling the close function\n     * By default the socket will try to reconnect each 5000ms\n     */\n    onClose(event) {\n        let reopenInterval = setInterval(async () => {\n            console.warn(\"try reopen socket \");\n            if (await this.open()) {\n                clearInterval(reopenInterval);\n            }\n        }, 5000);\n    }\n    _onClose(event) {\n        if (this.errorOccur) {\n            this.errorOccur = false;\n            return;\n        }\n        this.log('Closing connection');\n        this.onClose(event);\n    }\n    /**\n     * Close the current connection\n     */\n    close() {\n        if (this.socket) {\n            this.socket.onclose = null;\n            this.socket.onerror = null;\n            this.socket.onmessage = null;\n            this.socket.onopen = null;\n            this.socket.close();\n            delete this.socket;\n        }\n    }\n    onMessage(event) {\n        let response = JSON.parse(event.data);\n        this.log(response);\n        let data = {};\n        try {\n            data = Aventus.Converter.transform(JSON.parse(response.data));\n        }\n        catch (e) {\n            console.error(e);\n        }\n        for (let channel in this.options.routes) {\n            let current = this.options.routes[channel];\n            for (let info of current) {\n                let params = Aventus.Uri.getParams(info, response.channel);\n                if (params) {\n                    info.callback(data, params, response.uid);\n                }\n            }\n        }\n        if (response.uid) {\n            if (this.waitingList.hasOwnProperty(response.uid)) {\n                this.waitingList[response.uid](response.channel, data);\n                delete this.waitingList[response.uid];\n            }\n        }\n    }\n    /**\n     * Print a msg inside the console\n     */\n    log(message) {\n        if (this.options.log) {\n            const now = new Date();\n            const hours = (now.getHours()).toLocaleString(undefined, { minimumIntegerDigits: 2 });\n            const minutes = (now.getMinutes()).toLocaleString(undefined, { minimumIntegerDigits: 2 });\n            const seconds = (now.getSeconds()).toLocaleString(undefined, { minimumIntegerDigits: 2 });\n            if (message instanceof Object) {\n                let cloneMessage = JSON.parse(JSON.stringify(message, this.jsonReplacer));\n                if (cloneMessage.data && typeof cloneMessage.data == 'string') {\n                    cloneMessage.data = JSON.parse(cloneMessage.data);\n                }\n                console.log(`[WEBSOCKET] [${hours}:${minutes}:${seconds}]: `, cloneMessage);\n            }\n            else {\n                console.log(`[WEBSOCKET] [${hours}:${minutes}:${seconds}]: `, message);\n            }\n        }\n    }\n}\nWebSocket.Connection.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.Connection=WebSocket.Connection;","dependances":[{"fullName":"Required","isStrong":false},{"fullName":"AventusSharp.WebSocket.ConnectionOptions","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketSendMessageOptions","isStrong":false},{"fullName":"WebSocket","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketRoute","isStrong":false},{"fullName":"Aventus.Uri","isStrong":false},{"fullName":"AventusSharp.WebSocket.InternalSocketRoute","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false},{"fullName":"AventusSharp.Tools.VoidWithError","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketMessage","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketError","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketErrorCode","isStrong":false},{"fullName":"Aventus.ResultWithError","isStrong":false},{"fullName":"T","isStrong":false},{"fullName":"Aventus.uuidv4","isStrong":false},{"fullName":"Event","isStrong":false},{"fullName":"MessageEvent","isStrong":false},{"fullName":"Aventus.Converter","isStrong":false}],"fullName":"AventusSharp.WebSocket.Connection","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.EndPoint=class EndPoint extends WebSocket.Connection {\n    static With(options) {\n        class EndPointWith extends WebSocket.EndPoint {\n            constructor() {\n                super();\n                for (let route of options.routes) {\n                    if (typeof route == \"function\") {\n                        this._routes.add(route);\n                    }\n                    else {\n                        this._routes.add(route.type, route.path);\n                    }\n                }\n                for (let _event of options.events) {\n                    if (typeof _event == \"function\") {\n                        this._events.add(_event);\n                    }\n                    else {\n                        this._events.add(_event.type, _event.path);\n                    }\n                }\n            }\n        }\n        return EndPointWith;\n    }\n    _routes;\n    _events;\n    constructor() {\n        super();\n        Object.defineProperty(this, \"routes\", {\n            get: () => { return this._routes; }\n        });\n        Object.defineProperty(this, \"events\", {\n            get: () => { return this._events; }\n        });\n        this.createProxy();\n    }\n    createProxy() {\n        if (!this._routes) {\n            this._routes = new Proxy({}, Aventus.createCommProxy(this));\n        }\n        if (!this._events) {\n            this._events = new Proxy({}, Aventus.createCommProxy(this));\n        }\n    }\n    /**\n     * @inheritdoc\n     */\n    configure(options) {\n        options.socketName = this.path;\n        return options;\n    }\n}\nWebSocket.EndPoint.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.EndPoint=WebSocket.EndPoint;","dependances":[{"fullName":"AventusSharp.WebSocket.Connection","isStrong":true},{"fullName":"AventusSharp.WebSocket.WsRouteType","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsEventType","isStrong":false},{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false},{"fullName":"Aventus.MixProto","isStrong":false},{"fullName":"AventusSharp.WebSocket.MergeWsRoutesType","isStrong":false},{"fullName":"AventusSharp.WebSocket.MergeWsEventsType","isStrong":false},{"fullName":"Aventus.createCommProxy","isStrong":false},{"fullName":"AventusSharp.WebSocket.Event","isStrong":false},{"fullName":"AventusSharp.WebSocket.ConnectionOptions","isStrong":false}],"fullName":"AventusSharp.WebSocket.EndPoint","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_DeleteMany=class StorableWsRoute_DeleteMany extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}s`;\n    }\n}\nWebSocket.StorableWsRoute_DeleteMany.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_DeleteMany=WebSocket.StorableWsRoute_DeleteMany;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_DeleteMany","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_Delete=class StorableWsRoute_Delete extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}/{id:number}`;\n    }\n}\nWebSocket.StorableWsRoute_Delete.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_Delete=WebSocket.StorableWsRoute_Delete;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_Delete","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_UpdateMany=class StorableWsRoute_UpdateMany extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}s`;\n    }\n}\nWebSocket.StorableWsRoute_UpdateMany.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_UpdateMany=WebSocket.StorableWsRoute_UpdateMany;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_UpdateMany","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_Update=class StorableWsRoute_Update extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}/{id:number}`;\n    }\n}\nWebSocket.StorableWsRoute_Update.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_Update=WebSocket.StorableWsRoute_Update;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_Update","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_GetById=class StorableWsRoute_GetById extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}/{id:number}`;\n    }\n}\nWebSocket.StorableWsRoute_GetById.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_GetById=WebSocket.StorableWsRoute_GetById;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_GetById","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_CreateMany=class StorableWsRoute_CreateMany extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}s`;\n    }\n}\nWebSocket.StorableWsRoute_CreateMany.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_CreateMany=WebSocket.StorableWsRoute_CreateMany;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_CreateMany","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_Create=class StorableWsRoute_Create extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}`;\n    }\n}\nWebSocket.StorableWsRoute_Create.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_Create=WebSocket.StorableWsRoute_Create;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_Create","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute_GetAll=class StorableWsRoute_GetAll extends WebSocket.Event {\n    StorableName;\n    constructor(endpoint, StorableName) {\n        super(endpoint);\n        this.StorableName = StorableName;\n    }\n    /**\n     * @inheritdoc\n     */\n    path() {\n        return `/${this.StorableName()}`;\n    }\n}\nWebSocket.StorableWsRoute_GetAll.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute_GetAll=WebSocket.StorableWsRoute_GetAll;","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":true},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute_GetAll","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.Route=class Route {\n    endpoint;\n    constructor(endpoint) {\n        this.endpoint = endpoint;\n    }\n}\nWebSocket.Route.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.Route=WebSocket.Route;","dependances":[{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false}],"fullName":"AventusSharp.WebSocket.Route","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.StorableWsRoute=class StorableWsRoute extends WebSocket.Route {\n    events;\n    constructor(endpoint) {\n        super(endpoint);\n        this.events = {\n            GetAll: new WebSocket.StorableWsRoute_GetAll(endpoint, this.StorableName),\n            Create: new WebSocket.StorableWsRoute_Create(endpoint, this.StorableName),\n            CreateMany: new WebSocket.StorableWsRoute_CreateMany(endpoint, this.StorableName),\n            GetById: new WebSocket.StorableWsRoute_GetById(endpoint, this.StorableName),\n            Update: new WebSocket.StorableWsRoute_Update(endpoint, this.StorableName),\n            UpdateMany: new WebSocket.StorableWsRoute_UpdateMany(endpoint, this.StorableName),\n            Delete: new WebSocket.StorableWsRoute_Delete(endpoint, this.StorableName),\n            DeleteMany: new WebSocket.StorableWsRoute_DeleteMany(endpoint, this.StorableName),\n        };\n    }\n    async GetAll(options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}`,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async Create(body, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}`,\n            body: body,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async CreateMany(body, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}s`,\n            body: body,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async GetById(id, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}/${id}`,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async Update(id, body, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}/${id}`,\n            body: body,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async UpdateMany(body, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}s`,\n            body: body,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async Delete(id, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}/${id}`,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n    async DeleteMany(body, options = {}) {\n        const info = {\n            channel: `/${this.StorableName()}s`,\n            body: body,\n            ...options,\n        };\n        return await this.endpoint.sendMessageAndWait(info);\n    }\n}\nWebSocket.StorableWsRoute.Namespace=`${moduleName}.WebSocket`;\r\n_.WebSocket.StorableWsRoute=WebSocket.StorableWsRoute;","dependances":[{"fullName":"AventusSharp.WebSocket.Route","isStrong":true},{"fullName":"Aventus.IData","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_GetAll","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_Create","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_CreateMany","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_GetById","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_Update","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_UpdateMany","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_Delete","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute_DeleteMany","isStrong":false},{"fullName":"AventusSharp.WebSocket.EndPoint","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsRouteSendOptions","isStrong":false},{"fullName":"AventusSharp.WebSocket.SocketSendMessageOptions","isStrong":false},{"fullName":"FormData","isStrong":false}],"fullName":"AventusSharp.WebSocket.StorableWsRoute","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"WebSocket.WsError=class WsError extends Aventus.GenericError {\n    static get Fullname() { return \"AventusSharp.WebSocket.WsError, AventusSharp\"; }\n}\nWebSocket.WsError.Namespace=`${moduleName}.WebSocket`;Aventus.Converter.register(WebSocket.WsError.Fullname, WebSocket.WsError);\r\n_.WebSocket.WsError=WebSocket.WsError;","dependances":[{"fullName":"Aventus.GenericError","isStrong":true},{"fullName":"AventusSharp.WebSocket.WsErrorCode","isStrong":true},{"fullName":"Convertible","isStrong":false}],"fullName":"AventusSharp.WebSocket.WsError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"WebSocket.ResultWithWsError=class ResultWithWsError extends Tools.ResultWithError {\n    static get Fullname() { return \"AventusSharp.WebSocket.ResultWithWsError, AventusSharp\"; }\n}\nWebSocket.ResultWithWsError.Namespace=`${moduleName}.WebSocket`;Aventus.Converter.register(WebSocket.ResultWithWsError.Fullname, WebSocket.ResultWithWsError);\r\n_.WebSocket.ResultWithWsError=WebSocket.ResultWithWsError;","dependances":[{"fullName":"AventusSharp.Tools.ResultWithError","isStrong":true},{"fullName":"AventusSharp.WebSocket.WsError","isStrong":true}],"fullName":"AventusSharp.WebSocket.ResultWithWsError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"WebSocket.VoidWithWsError=class VoidWithWsError extends Tools.VoidWithError {\n    static get Fullname() { return \"AventusSharp.WebSocket.VoidWithWsError, AventusSharp\"; }\n}\nWebSocket.VoidWithWsError.Namespace=`${moduleName}.WebSocket`;Aventus.Converter.register(WebSocket.VoidWithWsError.Fullname, WebSocket.VoidWithWsError);\r\n_.WebSocket.VoidWithWsError=WebSocket.VoidWithWsError;","dependances":[{"fullName":"AventusSharp.Tools.VoidWithError","isStrong":true},{"fullName":"AventusSharp.WebSocket.WsError","isStrong":true}],"fullName":"AventusSharp.WebSocket.VoidWithWsError","required":false,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"RAM.RamHttp=class RamHttp extends Aventus.Ram {\n    getAllDone = false;\n    routes;\n    constructor() {\n        super();\n        this.routes = this.defineRoutes();\n    }\n    async beforeGetAll(result) {\n        if (!this.getAllDone) {\n            let response = await this.routes.GetAll();\n            if (response.success && response.result) {\n                for (let item of response.result) {\n                    let resultTemp = new Aventus.ResultRamWithError();\n                    this.addOrUpdateData(item, resultTemp);\n                    if (!resultTemp.success) {\n                        result.errors = [...result.errors, ...resultTemp.errors];\n                    }\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    async beforeGetById(id, result) {\n        if (this.records.has(id)) {\n            return;\n        }\n        else {\n            let response = await this.routes.GetById(id);\n            if (response.success && response.result) {\n                let resultTemp = new Aventus.ResultRamWithError();\n                this.addOrUpdateData(response.result, resultTemp);\n                if (!resultTemp.success) {\n                    result.errors = [...result.errors, ...resultTemp.errors];\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    async beforeGetByIds(ids, result) {\n        let missingIds = [];\n        for (let id of ids) {\n            if (!this.records.has(id)) {\n                missingIds.push(id);\n            }\n        }\n        if (missingIds.length > 0) {\n            for (let id of missingIds) {\n                let resultTemp = new Aventus.ResultRamWithError();\n                await this.beforeGetById(id, resultTemp);\n                if (!resultTemp.success) {\n                    result.errors = [...result.errors, ...resultTemp.errors];\n                }\n            }\n        }\n    }\n    async beforeCreateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.Create({ item });\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeCreateList(list, result) {\n        let response = await this.routes.CreateMany({ list });\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeUpdateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.Update(item.id, { item });\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeUpdateList(list, result) {\n        let response = await this.routes.UpdateMany({ list });\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeDeleteItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.Delete(item.id);\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeDeleteList(list, result) {\n        let response = await this.routes.DeleteMany({ ids: list.map(t => t.id) });\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n}\nRAM.RamHttp.Namespace=`${moduleName}.RAM`;\r\n_.RAM.RamHttp=RAM.RamHttp;","dependances":[{"fullName":"Aventus.Ram","isStrong":true},{"fullName":"AventusSharp.Data.Storable","isStrong":false},{"fullName":"AventusSharp.Routes.StorableRoute","isStrong":false},{"fullName":"Aventus.ResultRamWithError","isStrong":false},{"fullName":"Map","isStrong":false},{"fullName":"Aventus.RamItem","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false}],"fullName":"AventusSharp.RAM.RamHttp","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"RAM.RamWebSocket=class RamWebSocket extends Aventus.Ram {\n    getAllDone = false;\n    routes;\n    otherGetAllLocked = {};\n    otherGetByIdLocked = {};\n    otherCreateItemLocked = {};\n    otherCreateListLocked = {};\n    otherUpdateItemLocked = {};\n    otherUpdateListLocked = {};\n    otherDeleteItemLocked = {};\n    otherDeleteListLocked = {};\n    constructor() {\n        super();\n        this.routes = this.defineRoutes();\n        this.addEventsBindings();\n        this.otherGetAll = this.otherGetAll.bind(this);\n        this.otherGetById = this.otherGetById.bind(this);\n        this.otherCreateItem = this.otherCreateItem.bind(this);\n        this.otherCreateList = this.otherCreateList.bind(this);\n        this.otherUpdateItem = this.otherUpdateItem.bind(this);\n        this.otherUpdateList = this.otherUpdateList.bind(this);\n        this.otherDeleteItem = this.otherDeleteItem.bind(this);\n        this.otherDeleteList = this.otherDeleteList.bind(this);\n    }\n    addEventsBindings() {\n        const autoListen = this.listenOnStart();\n        this.routes.events.GetAll.onTrigger.add(this.otherGetAll);\n        if (autoListen.GetAll) {\n            this.routes.events.GetAll.listen();\n        }\n        else {\n            this.routes.events.GetAll.stop();\n        }\n        this.routes.events.GetById.onTrigger.add(this.otherGetById);\n        if (autoListen.GetById) {\n            this.routes.events.GetById.listen();\n        }\n        else {\n            this.routes.events.GetById.stop();\n        }\n        this.routes.events.Create.onTrigger.add(this.otherCreateItem);\n        if (autoListen.Create) {\n            this.routes.events.Create.listen();\n        }\n        else {\n            this.routes.events.Create.stop();\n        }\n        this.routes.events.CreateMany.onTrigger.add(this.otherCreateList);\n        if (autoListen.CreateMany) {\n            this.routes.events.CreateMany.listen();\n        }\n        else {\n            this.routes.events.CreateMany.stop();\n        }\n        this.routes.events.Update.onTrigger.add(this.otherCreateItem);\n        if (autoListen.Update) {\n            this.routes.events.Update.listen();\n        }\n        else {\n            this.routes.events.Update.stop();\n        }\n        this.routes.events.UpdateMany.onTrigger.add(this.otherCreateList);\n        if (autoListen.UpdateMany) {\n            this.routes.events.UpdateMany.listen();\n        }\n        else {\n            this.routes.events.UpdateMany.stop();\n        }\n        this.routes.events.Delete.onTrigger.add(this.otherCreateItem);\n        if (autoListen.Delete) {\n            this.routes.events.Delete.listen();\n        }\n        else {\n            this.routes.events.Delete.stop();\n        }\n        this.routes.events.DeleteMany.onTrigger.add(this.otherCreateList);\n        if (autoListen.DeleteMany) {\n            this.routes.events.DeleteMany.listen();\n        }\n        else {\n            this.routes.events.DeleteMany.stop();\n        }\n    }\n    listenOnStart() {\n        return {\n            GetAll: false,\n            GetById: false,\n            Create: true,\n            CreateMany: true,\n            Update: true,\n            UpdateMany: true,\n            Delete: true,\n            DeleteMany: true,\n        };\n    }\n    otherGetAll(items, params, uid) {\n        if (uid && this.otherGetAllLocked[uid])\n            return;\n        for (let item of items) {\n            let resultTemp = new Aventus.ResultRamWithError();\n            this.addOrUpdateData(item, resultTemp);\n        }\n    }\n    async beforeGetAll(result) {\n        if (!this.getAllDone) {\n            let uid = Aventus.uuidv4();\n            this.otherGetAllLocked[uid] = true;\n            let response = await this.routes.GetAll({ uid });\n            delete this.otherGetAllLocked[uid];\n            if (!response)\n                return;\n            if (response.success && response.result) {\n                for (let item of response.result) {\n                    let resultTemp = new Aventus.ResultRamWithError();\n                    this.addOrUpdateData(item, resultTemp);\n                    if (!resultTemp.success) {\n                        result.errors = [...result.errors, ...resultTemp.errors];\n                    }\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    otherGetById(item, params, uid) {\n        if (uid && this.otherGetByIdLocked[uid])\n            return;\n        let resultTemp = new Aventus.ResultRamWithError();\n        this.addOrUpdateData(item, resultTemp);\n    }\n    async beforeGetById(id, result) {\n        if (this.records.has(id)) {\n            return;\n        }\n        else {\n            let uid = Aventus.uuidv4();\n            this.otherGetByIdLocked[uid] = true;\n            let response = await this.routes.GetById(id, { uid });\n            delete this.otherGetByIdLocked[uid];\n            if (!response)\n                return;\n            if (response.success && response.result) {\n                let resultTemp = new Aventus.ResultRamWithError();\n                this.addOrUpdateData(response.result, resultTemp);\n                if (!resultTemp.success) {\n                    result.errors = [...result.errors, ...resultTemp.errors];\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    async beforeGetByIds(ids, result) {\n        let missingIds = [];\n        for (let id of ids) {\n            if (!this.records.has(id)) {\n                missingIds.push(id);\n            }\n        }\n        if (missingIds.length > 0) {\n            for (let id of missingIds) {\n                let resultTemp = new Aventus.ResultRamWithError();\n                await this.beforeGetById(id, resultTemp);\n                if (!resultTemp.success) {\n                    result.errors = [...result.errors, ...resultTemp.errors];\n                }\n            }\n        }\n    }\n    otherCreateItem(item, params, uid) {\n        if (uid && this.otherCreateItemLocked[uid])\n            return;\n        let resultTemp = new Aventus.ResultRamWithError();\n        this.addOrUpdateData(item, resultTemp);\n        if (resultTemp.success && resultTemp.result) {\n            this.publish('created', resultTemp.result);\n        }\n    }\n    async beforeCreateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let uid = Aventus.uuidv4();\n        this.otherCreateItemLocked[uid] = true;\n        let response = await this.routes.Create({ item }, { uid });\n        delete this.otherCreateItemLocked[uid];\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    otherCreateList(items, params, uid) {\n        if (uid && this.otherCreateListLocked[uid])\n            return;\n        for (let item of items) {\n            let resultTemp = new Aventus.ResultRamWithError();\n            this.addOrUpdateData(item, resultTemp);\n            if (resultTemp.success && resultTemp.result) {\n                this.publish('created', resultTemp.result);\n            }\n        }\n    }\n    async beforeCreateList(list, result) {\n        let uid = Aventus.uuidv4();\n        this.otherCreateListLocked[uid] = true;\n        let response = await this.routes.CreateMany({ list }, { uid });\n        delete this.otherCreateListLocked[uid];\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    otherUpdateItem(item, params, uid) {\n        if (uid && this.otherUpdateItemLocked[uid])\n            return;\n        let resultTemp = new Aventus.ResultRamWithError();\n        this.addOrUpdateData(item, resultTemp);\n        if (resultTemp.success && resultTemp.result) {\n            this.publish('updated', resultTemp.result);\n        }\n    }\n    async beforeUpdateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let uid = Aventus.uuidv4();\n        this.otherUpdateItemLocked[uid] = true;\n        let response = await this.routes.Update(item.id, { item }, { uid });\n        delete this.otherUpdateItemLocked[uid];\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    otherUpdateList(items, params, uid) {\n        if (uid && this.otherUpdateListLocked[uid])\n            return;\n        for (let item of items) {\n            let resultTemp = new Aventus.ResultRamWithError();\n            this.addOrUpdateData(item, resultTemp);\n            if (resultTemp.success && resultTemp.result) {\n                this.publish('updated', resultTemp.result);\n            }\n        }\n    }\n    async beforeUpdateList(list, result) {\n        let uid = Aventus.uuidv4();\n        this.otherUpdateListLocked[uid] = true;\n        let response = await this.routes.UpdateMany({ list }, { uid });\n        delete this.otherUpdateListLocked[uid];\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    otherDeleteItem(item, params, uid) {\n        if (uid && this.otherDeleteItemLocked[uid])\n            return;\n        let resultTemp = new Aventus.ResultRamWithError();\n        this.deleteData(item, resultTemp);\n        if (resultTemp.success && resultTemp.result) {\n            this.publish('deleted', resultTemp.result);\n            this.recordsSubscribers.delete(resultTemp.result.id);\n        }\n    }\n    async beforeDeleteItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let uid = Aventus.uuidv4();\n        this.otherDeleteItemLocked[uid] = true;\n        let response = await this.routes.Delete(item.id, { uid });\n        delete this.otherDeleteItemLocked[uid];\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    otherDeleteList(items, params, uid) {\n        if (uid && this.otherDeleteListLocked[uid])\n            return;\n        for (let item of items) {\n            let resultTemp = new Aventus.ResultRamWithError();\n            this.deleteData(item, resultTemp);\n            if (resultTemp.success && resultTemp.result) {\n                this.publish('deleted', resultTemp.result);\n                this.recordsSubscribers.delete(resultTemp.result.id);\n            }\n        }\n    }\n    async beforeDeleteList(list, result) {\n        let uid = Aventus.uuidv4();\n        this.otherDeleteListLocked[uid] = true;\n        let response = await this.routes.DeleteMany({ ids: list.map(t => t.id) }, { uid });\n        delete this.otherDeleteListLocked[uid];\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    /**\n    * Delete element inside Ram without firing delete event\n    */\n    deleteData(item, result) {\n        try {\n            let idWithError = this.getIdWithError(item);\n            if (idWithError.success && idWithError.result !== undefined) {\n                let id = idWithError.result;\n                if (this.records.has(id)) {\n                    result.result = this.records.get(id);\n                    this.records.delete(id);\n                }\n                else {\n                    result.errors.push(new Aventus.RamError(Aventus.RamErrorCode.noItemInsideRam, \"can't delete the item \" + id + \" because it wasn't found inside ram\"));\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...idWithError.errors];\n            }\n        }\n        catch (e) {\n            result.errors.push(new Aventus.RamError(Aventus.RamErrorCode.unknow, e));\n        }\n    }\n}\nRAM.RamWebSocket.Namespace=`${moduleName}.RAM`;\r\n_.RAM.RamWebSocket=RAM.RamWebSocket;","dependances":[{"fullName":"Aventus.Ram","isStrong":true},{"fullName":"AventusSharp.Data.Storable","isStrong":false},{"fullName":"AventusSharp.WebSocket.StorableWsRoute","isStrong":false},{"fullName":"AventusSharp.RAM.RamWebSocketListenOnStart","isStrong":false},{"fullName":"BindThis","isStrong":false},{"fullName":"Aventus.UriParams","isStrong":false},{"fullName":"Aventus.ResultRamWithError","isStrong":false},{"fullName":"Aventus.RamItem","isStrong":false},{"fullName":"Map","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.uuidv4","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false},{"fullName":"Aventus.KeysObject","isStrong":false},{"fullName":"Aventus.RamError","isStrong":false},{"fullName":"Aventus.RamErrorCode","isStrong":false}],"fullName":"AventusSharp.RAM.RamWebSocket","required":false,"type":1,"isExported":true,"convertibleName":""}],"existing":[{"fullName":"AventusSharp.WebSocket.WsEndPointType","dependances":[]},{"fullName":"AventusSharp.WebSocket.WsRouterOptions","dependances":[]},{"fullName":"AventusSharp.RAM.RamWebSocketListenOnStart","dependances":[]},{"fullName":"AventusSharp.WebSocket.WsRouteSendOptions","dependances":[]},{"fullName":"AventusSharp.WebSocket.WsRouteType","dependances":[]},{"fullName":"AventusSharp.WebSocket.ExtendWsRouteType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsRouteType","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"V","isStrong":false},{"fullName":"Aventus.Join","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.ExtendWsRoutesType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsRouteType","isStrong":false},{"fullName":"AventusSharp.WebSocket.ExtendWsRouteType","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"AventusSharp.WebSocket.ExtendWsRoutesType","isStrong":false},{"fullName":"R","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.MergeWsRoutesType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsRouteType","isStrong":false},{"fullName":"Aventus.MixProto","isStrong":false},{"fullName":"AventusSharp.WebSocket.MergeWsRoutesType","isStrong":false},{"fullName":"R","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.SocketMessage","dependances":[]},{"fullName":"AventusSharp.WebSocket.SocketSendMessageOptions","dependances":[]},{"fullName":"AventusSharp.WebSocket.SocketRoute","dependances":[{"fullName":"Aventus.UriParamsValue","isStrong":false}]},{"fullName":"AventusSharp.Tools.IWithError","dependances":[]},{"fullName":"AventusSharp.Tools.IResultWithError","dependances":[{"fullName":"AventusSharp.Tools.IWithError","isStrong":true}]},{"fullName":"AventusSharp.WebSocket.InternalSocketRoute","dependances":[{"fullName":"AventusSharp.WebSocket.SocketRoute","isStrong":false},{"fullName":"Aventus.PreparedUri","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.ConnectionOptions","dependances":[{"fullName":"AventusSharp.WebSocket.InternalSocketRoute","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.WsEventType","dependances":[{"fullName":"AventusSharp.WebSocket.Event","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.ExtendWsEventType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsEventType","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"V","isStrong":false},{"fullName":"Aventus.Join","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.ExtendWsEventsType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsEventType","isStrong":false},{"fullName":"AventusSharp.WebSocket.ExtendWsEventType","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"AventusSharp.WebSocket.ExtendWsEventsType","isStrong":false},{"fullName":"R","isStrong":false}]},{"fullName":"AventusSharp.WebSocket.MergeWsEventsType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"AventusSharp.WebSocket.WsEventType","isStrong":false},{"fullName":"Aventus.MixProto","isStrong":false},{"fullName":"AventusSharp.WebSocket.MergeWsEventsType","isStrong":false},{"fullName":"R","isStrong":false}]}]}
//#endregion js src //
//#region css def //
{}
//#endregion css def //
//#region css //
{}
//#endregion css //
//#region html //
{}
//#endregion html //
//#region dependances //
[]
//#endregion dependances //
