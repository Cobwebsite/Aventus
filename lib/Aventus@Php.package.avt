// AventusPhp@Main:1.0.0
//#region js def //
declare global {

namespace AventusPhp{
@Required()
@Convertible()
class LaravelResult<T> extends Aventus.ResultWithError<T> {
    static get Fullname(): string;
}

namespace Aventus.Laraventus.Exceptions {
enum LaraventusErrorEnum {
    AuthenticationError = 401,
    ValidationError = 422,
    UnknowError = 500
}
}

namespace Aventus.Laraventus.Requests {
class IdsManyRequest {
    ids: any[];
}
}

namespace Aventus.Laraventus.Requests {
class ItemsManyRequest<T> {
    items: T[];
}
}

abstract class AventusFile<T = any> {
    static get Fullname(): string;
    uri: string;
    upload?: File;
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    get $type(): string;
    /**
     * @inerhit
     */
    toJSON(): any;
}

abstract class AventusImage<T = any> extends AventusFile<T> {
    static get Fullname(): string;
}

@Required()
@Convertible()
class AventusError<T extends (number | Aventus.Enum) = any> extends Aventus.GenericError<T> {
    static get Fullname(): string;
}

abstract class ModelController<T extends Aventus.IData, U extends {
    [key: string | number]: any;
} | FormData = any, R = any> extends Aventus.HttpRoute {

    abstract getUri(): string;
    @BindThis()
	index(): Promise<Aventus.ResultWithError<R[]>>;
    @BindThis()
	store(body: U): Promise<Aventus.ResultWithError<R>>;
    @BindThis()
	storeMany(body: U[]): Promise<Aventus.ResultWithError<R[]>>;
    @BindThis()
	show(id: string | number): Promise<Aventus.ResultWithError<R>>;
    @BindThis()
	showMany(ids: (string | number)[]): Promise<Aventus.ResultWithError<R[]>>;
    @BindThis()
	update(id: string | number, body: U): Promise<Aventus.ResultWithError<R>>;
    @BindThis()
	updateMany(body: U[]): Promise<Aventus.ResultWithError<R[]>>;
    @BindThis()
	destroy(id: string | number): Promise<Aventus.ResultWithError<boolean>>;
    @BindThis()
	destroyMany(ids: (string | number)[]): Promise<Aventus.ResultWithError<boolean>>;
}

type RamQuery<T> = ModelController<any, any, T>;

class RamCompletor<T extends Aventus.IRamData> {
    protected objects: T[];
    protected fields: ___AventusPhp.ItemField<T, any>[];
    protected error?: Aventus.VoidWithError;
    constructor(objects?: T | T[], error?: Aventus.VoidWithError);
    add<U extends Aventus.IData>(field: ___AventusPhp.ItemField<T, U>): RamCompletor<T>;
    run(): Promise<Aventus.VoidWithError>;
}

abstract class RamHttp<T extends {
    id: string | number;
}> extends Aventus.Ram<T> {
    protected getAllDone: boolean;
    protected routes: RamQuery<T>;
    abstract defineRoutes(): RamQuery<T>;
    protected constructor();
    protected beforeGetAll(result: Aventus.ResultRamWithError<Map<number, Aventus.RamItem<T>>>): Promise<void>;
    protected beforeGetById(id: number, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeGetByIds(ids: number[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    complete(objects?: T | T[], error?: Aventus.VoidWithError): RamCompletor<T>;
    protected beforeCreateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeCreateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected beforeUpdateItem(item: T, fromList: boolean, result: Aventus.ResultRamWithError<Aventus.RamItem<T>>): Promise<void>;
    protected beforeUpdateList(list: T[], result: Aventus.ResultRamWithError<Aventus.RamItem<T>[]>): Promise<void>;
    protected beforeDeleteItem(item: T, fromList: boolean, result: Aventus.VoidWithError): Promise<void>;
    protected beforeDeleteList(list: T[], result: Aventus.VoidWithError): Promise<void>;
}

	}
}
declare module ___AventusPhp {
type KeysOfType<T, U> = {
    [K in keyof T]: NonNullable<T[K]> extends U ? K : never;
}[keyof T];

type NumberKeys<T> = {
    [K in keyof T]: T[K] extends number ? K : never;
}[keyof T];

type ItemField<T extends Aventus.IRamData, U extends Aventus.IRamData> = {
    id: NumberKeys<T>;
    obj: KeysOfType<T, U>;
    ram: typeof Aventus.Ram<U>;
};
}//#endregion js def //
//#region js src //
{"namespace":"AventusPhp","available":[{"code":"let LaravelResult=class LaravelResult extends Aventus.ResultWithError {\n    static get Fullname() { return \"Aventus.Laraventus.Helpers.LaravelResult\"; }\n}\nLaravelResult.Namespace=`AventusPhp`;\r\nLaravelResult.$schema={...(Aventus.ResultWithError?.$schema ?? {}), };\r\nAventus.Converter.register(LaravelResult.Fullname, LaravelResult);\r\n__as1(_, 'LaravelResult', LaravelResult);\r\n","dependances":[{"fullName":"Aventus.ResultWithError","isStrong":true},{"fullName":"Convertible","isStrong":false},{"fullName":"Required","isStrong":false}],"fullName":"AventusPhp.LaravelResult","required":true,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"(function (LaraventusErrorEnum) {\n    LaraventusErrorEnum[LaraventusErrorEnum[\"AuthenticationError\"] = 401] = \"AuthenticationError\";\n    LaraventusErrorEnum[LaraventusErrorEnum[\"ValidationError\"] = 422] = \"ValidationError\";\n    LaraventusErrorEnum[LaraventusErrorEnum[\"UnknowError\"] = 500] = \"UnknowError\";\n})(Aventus.Laraventus.Exceptions.LaraventusErrorEnum || (Aventus.Laraventus.Exceptions.LaraventusErrorEnum = {}));\n__as1(_.Aventus.Laraventus.Exceptions, 'LaraventusErrorEnum', Aventus.Laraventus.Exceptions.LaraventusErrorEnum);\r\n","dependances":[],"fullName":"AventusPhp.Aventus.Laraventus.Exceptions.LaraventusErrorEnum","required":false,"type":6,"isExported":true,"convertibleName":""},{"code":"Aventus.Laraventus.Requests.IdsManyRequest=class IdsManyRequest {\n    ids = [];\n}\nAventus.Laraventus.Requests.IdsManyRequest.Namespace=`AventusPhp.Aventus.Laraventus.Requests`;\r\n__as1(_.Aventus.Laraventus.Requests, 'IdsManyRequest', Aventus.Laraventus.Requests.IdsManyRequest);\r\n","dependances":[],"fullName":"AventusPhp.Aventus.Laraventus.Requests.IdsManyRequest","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"Aventus.Laraventus.Requests.ItemsManyRequest=class ItemsManyRequest {\n    items;\n}\nAventus.Laraventus.Requests.ItemsManyRequest.Namespace=`AventusPhp.Aventus.Laraventus.Requests`;\r\n__as1(_.Aventus.Laraventus.Requests, 'ItemsManyRequest', Aventus.Laraventus.Requests.ItemsManyRequest);\r\n","dependances":[],"fullName":"AventusPhp.Aventus.Laraventus.Requests.ItemsManyRequest","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"let AventusFile=class AventusFile {\n    static get Fullname() { return \"Aventus.Laraventus.Models.AventusFile\"; }\n    uri;\n    upload;\n    /**\n     * Get the unique type for the data. Define it as the namespace + class name\n     */\n    get $type() {\n        return this.constructor['Fullname'];\n    }\n    /**\n     * @inerhit\n     */\n    toJSON() {\n        let toAvoid = ['className', 'namespace'];\n        return Aventus.Json.classToJson(this, {\n            isValidKey: (key) => !toAvoid.includes(key),\n            beforeEnd: (result) => {\n                let resultTemp = {};\n                if (result.$type) {\n                    resultTemp.$type = result.$type;\n                    for (let key in result) {\n                        if (key != '$type') {\n                            resultTemp[key] = result[key];\n                        }\n                    }\n                    return resultTemp;\n                }\n                return result;\n            }\n        });\n    }\n}\nAventusFile.Namespace=`AventusPhp`;\r\n__as1(_, 'AventusFile', AventusFile);\r\n","dependances":[{"fullName":"File","isStrong":false},{"fullName":"Aventus.Json","isStrong":false}],"fullName":"AventusPhp.AventusFile","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"let AventusImage=class AventusImage extends AventusFile {\n    static get Fullname() { return \"Aventus.Laraventus.Models.AventusImage\"; }\n}\nAventusImage.Namespace=`AventusPhp`;\r\n__as1(_, 'AventusImage', AventusImage);\r\n","dependances":[{"fullName":"AventusPhp.AventusFile","isStrong":true}],"fullName":"AventusPhp.AventusImage","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"let AventusError=class AventusError extends Aventus.GenericError {\n    static get Fullname() { return \"Aventus.Laraventus.Helpers.AventusError\"; }\n}\nAventusError.Namespace=`AventusPhp`;\r\nAventusError.$schema={...(Aventus.GenericError?.$schema ?? {}), };\r\nAventus.Converter.register(AventusError.Fullname, AventusError);\r\n__as1(_, 'AventusError', AventusError);\r\n","dependances":[{"fullName":"Aventus.GenericError","isStrong":true},{"fullName":"Convertible","isStrong":false},{"fullName":"Required","isStrong":false},{"fullName":"Aventus.Enum","isStrong":false}],"fullName":"AventusPhp.AventusError","required":true,"type":1,"isExported":true,"convertibleName":"Fullname"},{"code":"let ModelController=class ModelController extends Aventus.HttpRoute {\n    constructor(router) {\n        super(router);\n        this.index = this.index.bind(this);\n        this.store = this.store.bind(this);\n        this.storeMany = this.storeMany.bind(this);\n        this.show = this.show.bind(this);\n        this.showMany = this.showMany.bind(this);\n        this.update = this.update.bind(this);\n        this.updateMany = this.updateMany.bind(this);\n        this.destroy = this.destroy.bind(this);\n        this.destroyMany = this.destroyMany.bind(this);\n    }\n    async index() {\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}`, Aventus.HttpMethod.GET);\n        return await request.queryJSON(this.router);\n    }\n    async store(body) {\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}`, Aventus.HttpMethod.POST);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async storeMany(body) {\n        const requestBody = new Aventus.Laraventus.Requests.ItemsManyRequest();\n        requestBody.items = body;\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/many`, Aventus.HttpMethod.POST);\n        request.setBody(requestBody);\n        return await request.queryJSON(this.router);\n    }\n    async show(id) {\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/${id}`, Aventus.HttpMethod.GET);\n        return await request.queryJSON(this.router);\n    }\n    async showMany(ids) {\n        const requestBody = new Aventus.Laraventus.Requests.IdsManyRequest();\n        requestBody.ids = ids;\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/show_many`, Aventus.HttpMethod.POST);\n        return await request.queryJSON(this.router);\n    }\n    async update(id, body) {\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/${id}`, Aventus.HttpMethod.PUT);\n        request.setBody(body);\n        return await request.queryJSON(this.router);\n    }\n    async updateMany(body) {\n        const requestBody = new Aventus.Laraventus.Requests.ItemsManyRequest();\n        requestBody.items = body;\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/many`, Aventus.HttpMethod.PUT);\n        request.setBody(requestBody);\n        return await request.queryJSON(this.router);\n    }\n    async destroy(id) {\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/${id}`, Aventus.HttpMethod.DELETE);\n        return await request.queryJSON(this.router);\n    }\n    async destroyMany(ids) {\n        const requestBody = new Aventus.Laraventus.Requests.IdsManyRequest();\n        requestBody.ids = ids;\n        const request = new Aventus.HttpRequest(`${this.getPrefix()}/${this.getUri()}/many`, Aventus.HttpMethod.DELETE);\n        request.setBody(requestBody);\n        return await request.queryJSON(this.router);\n    }\n}\nModelController.Namespace=`AventusPhp`;\r\n__as1(_, 'ModelController', ModelController);\r\n","dependances":[{"fullName":"Aventus.HttpRoute","isStrong":true},{"fullName":"Aventus.IData","isStrong":false},{"fullName":"FormData","isStrong":false},{"fullName":"BindThis","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.ResultWithError","isStrong":false},{"fullName":"Aventus.HttpRequest","isStrong":false},{"fullName":"Aventus.HttpMethod","isStrong":false},{"fullName":"AventusPhp.Aventus.Laraventus.Requests.ItemsManyRequest","isStrong":false},{"fullName":"AventusPhp.Aventus.Laraventus.Requests.IdsManyRequest","isStrong":false}],"fullName":"AventusPhp.ModelController","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"let RamCompletor=class RamCompletor {\n    objects = [];\n    fields = [];\n    error;\n    constructor(objects, error) {\n        if (!objects) {\n            objects = [];\n        }\n        else if (!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        this.objects = objects;\n        this.error = error;\n    }\n    add(field) {\n        this.fields.push(field);\n        return this;\n    }\n    async run() {\n        const objects = this.objects;\n        const fields = this.fields;\n        const result = new Aventus.VoidWithError();\n        if (objects.length == 0)\n            return result;\n        const listIds = {};\n        const mapRecords = {};\n        for (let field of fields) {\n            let objKey = field.obj;\n            let idKey = field.id;\n            listIds[objKey] = [];\n            mapRecords[objKey] = {};\n            for (let value of objects) {\n                if (value[idKey]) {\n                    const listId = listIds[objKey];\n                    const mapRecord = mapRecords[objKey];\n                    if (value[objKey])\n                        continue;\n                    if (!listId.includes(value[idKey]))\n                        listId.push(value[idKey]);\n                    if (!mapRecord[value[idKey]]) {\n                        mapRecord[value[idKey]] = [];\n                    }\n                    mapRecord[value[idKey]].push(value);\n                }\n            }\n        }\n        for (let field of fields) {\n            let objKey = field.obj;\n            if (!listIds[objKey] || !mapRecords[objKey])\n                continue;\n            const listId = listIds[objKey];\n            const mapRecord = mapRecords[objKey];\n            if (listId.length > 0) {\n                const ram = Aventus.Instance.get(field.ram);\n                const query = await ram.getByIdsWithError(listId);\n                if (query.success && query.result) {\n                    for (let item of query.result) {\n                        if (mapRecord[item.Id]) {\n                            for (let record of mapRecord[item.Id]) {\n                                record[objKey] = item;\n                            }\n                        }\n                    }\n                }\n                else {\n                    result.errors = [...result.errors, ...query.errors];\n                    if (this.error) {\n                        this.error.errors = [...this.error.errors, ...query.errors];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nRamCompletor.Namespace=`AventusPhp`;\r\n__as1(_, 'RamCompletor', RamCompletor);\r\n","dependances":[{"fullName":"Aventus.IRamData","isStrong":false},{"fullName":"AventusPhp.ItemField","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false},{"fullName":"Aventus.IData","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false},{"fullName":"Aventus.Instance","isStrong":false}],"fullName":"AventusPhp.RamCompletor","required":false,"type":1,"isExported":true,"convertibleName":""},{"code":"let RamHttp=class RamHttp extends Aventus.Ram {\n    getAllDone = false;\n    routes;\n    constructor() {\n        super();\n        this.routes = this.defineRoutes();\n    }\n    async beforeGetAll(result) {\n        if (!this.getAllDone) {\n            let response = await this.routes.index();\n            if (response.success && response.result) {\n                for (let item of response.result) {\n                    let resultTemp = new Aventus.ResultRamWithError();\n                    await this.addOrUpdateData(item, resultTemp);\n                    if (!resultTemp.success) {\n                        result.errors = [...result.errors, ...resultTemp.errors];\n                    }\n                }\n                this.getAllDone = true;\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    async beforeGetById(id, result) {\n        if (this.records.has(id)) {\n            return;\n        }\n        else {\n            let response = await this.routes.show(id);\n            if (response.success && response.result) {\n                let resultTemp = new Aventus.ResultRamWithError();\n                await this.addOrUpdateData(response.result, resultTemp);\n                if (!resultTemp.success) {\n                    result.errors = [...result.errors, ...resultTemp.errors];\n                }\n                else {\n                    result.result = resultTemp.result;\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    async beforeGetByIds(ids, result) {\n        let missingIds = [];\n        for (let id of ids) {\n            if (!this.records.has(id)) {\n                missingIds.push(id);\n            }\n        }\n        if (missingIds.length > 0) {\n            result.result = [];\n            let response = await this.routes.showMany(missingIds);\n            if (response.success && response.result) {\n                for (let item of response.result) {\n                    let resultTemp = new Aventus.ResultRamWithError();\n                    await this.addOrUpdateData(item, resultTemp);\n                    if (!resultTemp.success || !resultTemp.result) {\n                        result.errors = [...result.errors, ...resultTemp.errors];\n                    }\n                    else if (!result.result.includes(resultTemp.result)) {\n                        result.result.push(resultTemp.result);\n                    }\n                }\n            }\n            else {\n                result.errors = [...result.errors, ...response.errors];\n            }\n        }\n    }\n    complete(objects, error) {\n        return new RamCompletor(objects, error);\n    }\n    async beforeCreateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.store(item);\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeCreateList(list, result) {\n        let response = await this.routes.storeMany(list);\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeUpdateItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.update(item.id, item);\n        if (response.success && response.result) {\n            result.result = this.getObjectForRam(response.result);\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeUpdateList(list, result) {\n        let response = await this.routes.updateMany(list);\n        if (response.success && response.result) {\n            result.result = [];\n            for (let element of response.result) {\n                result.result.push(this.getObjectForRam(element));\n            }\n        }\n        else {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeDeleteItem(item, fromList, result) {\n        if (fromList) {\n            return;\n        }\n        let response = await this.routes.destroy(item.id);\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n    async beforeDeleteList(list, result) {\n        let response = await this.routes.destroyMany(list.map(t => t.id));\n        if (!response.success) {\n            result.errors = [...result.errors, ...response.errors];\n        }\n    }\n}\nRamHttp.Namespace=`AventusPhp`;\r\n__as1(_, 'RamHttp', RamHttp);\r\n","dependances":[{"fullName":"Aventus.Ram","isStrong":true},{"fullName":"AventusPhp.RamQuery","isStrong":false},{"fullName":"Aventus.ResultRamWithError","isStrong":false},{"fullName":"Map","isStrong":false},{"fullName":"Aventus.RamItem","isStrong":false},{"fullName":"Promise","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false},{"fullName":"AventusPhp.RamCompletor","isStrong":false},{"fullName":"Aventus.VoidWithError","isStrong":false}],"fullName":"AventusPhp.RamHttp","required":false,"type":1,"isExported":true,"convertibleName":""}],"existing":[{"fullName":"AventusPhp.KeysOfType","dependances":[{"fullName":"T","isStrong":false},{"fullName":"NonNullable","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"K","isStrong":false}]},{"fullName":"AventusPhp.NumberKeys","dependances":[{"fullName":"T","isStrong":false},{"fullName":"K","isStrong":false}]},{"fullName":"AventusPhp.RamQuery","dependances":[{"fullName":"AventusPhp.ModelController","isStrong":false},{"fullName":"T","isStrong":false}]},{"fullName":"AventusPhp.ItemField","dependances":[{"fullName":"Aventus.IRamData","isStrong":false},{"fullName":"AventusPhp.NumberKeys","isStrong":false},{"fullName":"T","isStrong":false},{"fullName":"AventusPhp.KeysOfType","isStrong":false},{"fullName":"U","isStrong":false},{"fullName":"Ram","isStrong":false}]}]}
//#endregion js src //
//#region css def //
{}
//#endregion css def //
//#region css //
{}
//#endregion css //
//#region html //
{}
//#endregion html //
//#region dependances //
{}
//#endregion dependances //
