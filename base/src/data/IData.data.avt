import { Json } from "../tools/Json.lib.avt";
import { DataManager } from "./DataManager.lib.avt";

export interface IData {
    /**
     * Get the unique type for the data. Define it as the fullnamespace + class name
     */
    get $type(): string;
    /**
     * Clone the object
     */
    clone(): this;
}

@Dependances([{
    type: DataManager,
    strong: true
}])
export abstract class Data implements IData {
    /**
     * The schema for the class
     */
    public static get $schema(): { [prop: string]: string; } { return {}; }
    /**
     * The current namespace
     */
    public static readonly Namespace: string = "";
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    public static get Fullname(): string { return this.Namespace + "." + this.name; }

    /**
     * The current namespace
     */
    public get namespace(): string {
        return this.constructor['Namespace'];
    }
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    public get $type(): string {
        return this.constructor['Fullname'];
    }
    /**
     * Get the name of the class
     */
    public get className(): string {
        return this.constructor.name;
    }

    /**
     * Get a JSON for the current object
     */
    public toJSON() {
        let toAvoid: string[] = ['className', 'namespace'];
        return Json.classToJson(this, {
            isValidKey: (key) => !toAvoid.includes(key)
        });
    }

    public clone(): this {
        return DataManager.clone(this);
    }
}
