import { Converter } from "../tools/Converter.lib.avt";
import { Json } from "../tools/Json.lib.avt";

/**
 * Interface representing data with methods to get its unique type and to clone itself.
 */
@Storybook({
    prefix: "Data"
})
export interface IData {
    /**
     * Get the unique type for the data. Define it as the fullnamespace + class name
     */
    get $type(): string;
    /**
     * Clone the object
     */
    clone(): this;
}

/**
 * Abstract class implementing IData with additional properties and methods for namespace and JSON handling.
 */
@Storybook({
    prefix: "Data"
})
// @Dependances([{ type: Aventus.Converter, strong: true }, { type: Converter, strong: true }])
export abstract class Data implements IData {
    private static converter: Converter = new Converter();
    /**
     * The schema for the class
     */
    public static readonly $schema: { [prop: string]: string; };
    /**
     * The current namespace
     */
    public static readonly Namespace: string = "";
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    public static get Fullname(): string { return this.Namespace + "." + this.name; }

    /**
     * The current namespace
     */
    public get namespace(): string {
        return this.constructor['Namespace'];
    }
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    public get $type(): string {
        return this.constructor['Fullname'];
    }
    /**
     * Get the name of the class
     */
    public get className(): string {
        return this.constructor.name;
    }

    /**
     * Get a JSON for the current object
     */
    public toJSON(): { [key: string | number]: any; } {
        let toAvoid: string[] = ['className', 'namespace'];
        return Json.classToJson(this, {
            isValidKey: (key) => !toAvoid.includes(key)
        });
    }

    /**
     * Clone the object by transforming a parsed JSON string back into the original type
     */
    public clone(): this {
        return Converter.transform<this>(JSON.parse(JSON.stringify(this)));
    }
}