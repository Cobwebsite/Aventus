export class CallbackGroup<U extends (...args: any) => void> {
    private callbacks: { [group: string]: Map<U, any>; } = {};
    /**
     * Clear all callbacks
     */
    public clearAll() {
        this.callbacks = {};
    }
    /**
     * Clear all callbacks for a specific group
     */
    public clear(group: string | number) {
        delete this.callbacks[group];
    }
    /**
     * Add a callback for a group
     */
    public add(group: string | number, cb: U, scope: any = null): void {
        if(!this.callbacks[group]) {
            this.callbacks[group] = new Map();
        }
        if(!this.callbacks[group].has(cb)) {
            this.callbacks[group].set(cb, scope);
        }
    }
    /**
     * Remove a callback for a group
     */
    public remove(group: string | number, cb: U): void {
        if(this.callbacks[group]) {
            this.callbacks[group].delete(cb);
        }
    }
    /**
     * Trigger all callbacks inside a group
     */
    public trigger(group: string | number, args: Parameters<U>): void {
        if(this.callbacks[group]) {
            let cbs = [...this.callbacks[group]];
            for(let [cb, scope] of cbs) {
                cb.apply(scope, args);
            }
        }
    }
}

export class Callback<U extends (...args: any) => T, T = void> {
    private callbacks: Map<U, any> = new Map();
    /**
     * Clear all callbacks
     */
    public clear() {
        this.callbacks.clear();
    }
    /**
     * Add a callback
     */
    public add(cb: U, scope: any = null): void {
        if(!this.callbacks.has(cb)) {
            this.callbacks.set(cb, scope);
        }
    }
    /**
     * Remove a callback
     */
    public remove(cb: U): void {
        this.callbacks.delete(cb);
    }
    /**
     * Trigger all callbacks
     */
    public trigger(args: Parameters<U>): T[] {
        let result: T[] = [];
        let cbs = [...this.callbacks];
        for(let [cb, scope] of cbs) {
            result.push(cb.apply(scope, args));
        }
        return result;
    }
}

