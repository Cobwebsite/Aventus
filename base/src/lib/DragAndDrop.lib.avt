import { PressManager } from "./PressManager.lib.avt";

export interface DragAndDropOptions {
    /** If set to false, the element won't move */
    applyDrag?: boolean;
    /** Element to drag and drog */
    element: HTMLElement;
    /** Element that trigger the drag action; default is element */
    elementTrigger?: HTMLElement;
    /** Set the default offset for the drag trigger; default is DragAndDrop.defaultOffsetDrag */
    offsetDrag?: number;
    /** Options to create a shadow element */
    shadow?: {
        /** If set to true, the drag and drop will create a shadow element while dragging and removing it on drop. It will not move the original element anymore */
        enable: boolean,
        /** The container where the shadow element will be added, default is body */
        container?: HTMLElement;
        /** Remove shadow from tree */
        removeOnStop?: boolean,
        /** Add custom transformation for the shadow element */
        transform?: (el: HTMLElement) => void;
    };
    /** If set to false, the element will be considered as in the target if it touches it */
    strict?: boolean;
    /** The targets for the drop action */
    targets?: HTMLElement[];
    /** Use percent instead of pixel */
    usePercent?: boolean;

    /** Determine if drag is active or not */
    isDragEnable?: () => boolean;
    /** Get current zoom */
    getZoom?: () => number;
    /** Get offset X in px related to element.offsetTarget */
    getOffsetX?: () => number;
    /** Get offset Y in px related to element.offsetTarget */
    getOffsetY?: () => number;
    /** Trigger on pointer down*/
    onPointerDown?: (e: PointerEvent) => void;
    /** Trigger on pointer up*/
    onPointerUp?: (e: PointerEvent) => void;
    /** Trigger on drag start*/
    onStart?: (e: PointerEvent) => void;
    /** Trigger on moving  */
    onMove?: (e: PointerEvent, position: Coordinate) => void;
    /** Trigger after stop moving */
    onStop?: (e: PointerEvent) => void;
    /** Trigger after drop if at least one target found; Element is the shadow or the target*/
    onDrop?: (element: HTMLElement, targets: HTMLElement[]) => void;
}

interface Coordinate {
    x: number;
    y: number;
}

export class DragAndDrop {
    /**
     * Default offset before drag element
     */
    public static defaultOffsetDrag: number = 20;
    private pressManager: PressManager;
    private options: {
        applyDrag: boolean,
        element: HTMLElement,
        elementTrigger: HTMLElement,
        offsetDrag: number,
        shadow: {
            enable: boolean,
            container: HTMLElement,
            removeOnStop: boolean,
            transform: (el: HTMLElement) => void;
        },
        strict: boolean,
        targets: HTMLElement[],
        usePercent: boolean,

        isDragEnable: () => boolean;
        getZoom: () => number;
        getOffsetX: () => number;
        getOffsetY: () => number;
        onPointerDown: (e: PointerEvent) => void;
        onPointerUp: (e: PointerEvent) => void;
        onStart: (e: PointerEvent) => void;
        onMove: (e: PointerEvent, position: Coordinate) => void;
        onStop: (e: PointerEvent) => void;
        onDrop: (element: HTMLElement, targets: HTMLElement[]) => void;
    };
    private startCursorPosition: Coordinate;
    private startElementPosition: Coordinate;
    private isEnable: boolean = true;
    constructor(options: DragAndDropOptions) {
        this.options = this.getDefaultOptions();
        this.mergeProperties(options);
        this.mergeFunctions(options);
        this.init();
    }
    // #region merge params
    private getDefaultOptions() {
        return {
            applyDrag: true,
            element: null,
            elementTrigger: null,
            offsetDrag: DragAndDrop.defaultOffsetDrag,
            shadow: {
                enable: false,
                container: document.body,
                removeOnStop: true,
                transform: () => { }
            },
            strict: false,
            targets: [],
            usePercent: false,

            isDragEnable: () => true,
            getZoom: () => 1,
            getOffsetX: () => 0,
            getOffsetY: () => 0,
            onPointerDown: (e: PointerEvent) => { },
            onPointerUp: (e: PointerEvent) => { },
            onStart: (e: PointerEvent) => { },
            onMove: (e: PointerEvent) => { },
            onStop: (e: PointerEvent) => { },
            onDrop: (element: HTMLElement, targets: HTMLElement[]) => { }
        };
    }
    private mergeProperties(options: DragAndDropOptions) {
        if(options.element === void 0) {
            throw "You must define the element for the drag&drop";
        }
        this.options.element = options.element;
        if(options.elementTrigger === void 0) {
            this.options.elementTrigger = this.options.element;
        }
        else {
            this.options.elementTrigger = options.elementTrigger;
        }
        this.defaultMerge(options, "applyDrag");
        this.defaultMerge(options, "offsetDrag");
        this.defaultMerge(options, "strict");
        this.defaultMerge(options, "targets");
        this.defaultMerge(options, "usePercent");
        if(options.shadow !== void 0) {
            this.options.shadow.enable = options.shadow.enable;
            if(options.shadow.container !== void 0) {
                this.options.shadow.container = options.shadow.container;
            }
            else {
                this.options.shadow.container = document.body;
            }
            if(options.shadow.removeOnStop !== void 0) {
                this.options.shadow.removeOnStop = options.shadow.removeOnStop;
            }
            if(options.shadow.transform !== void 0) {
                this.options.shadow.transform = options.shadow.transform;
            }

        }
    }
    private mergeFunctions(options: DragAndDropOptions) {
        this.defaultMerge(options, "isDragEnable");
        this.defaultMerge(options, "getZoom");
        this.defaultMerge(options, "getOffsetX");
        this.defaultMerge(options, "getOffsetY");
        this.defaultMerge(options, "onPointerDown");
        this.defaultMerge(options, "onPointerUp");
        this.defaultMerge(options, "onStart");
        this.defaultMerge(options, "onMove");
        this.defaultMerge(options, "onStop");
        this.defaultMerge(options, "onDrop");
    }
    private defaultMerge(options: DragAndDropOptions, name: string) {
        if(options[name] !== void 0) {
            this.options[name] = options[name];
        }
    }
    // #endregion

    private init() {
        this.pressManager = new PressManager({
            element: this.options.elementTrigger,
            onPressStart: this.onPressStart.bind(this),
            onPressEnd:this.onPressEnd.bind(this),
            onDragStart: this.onDragStart.bind(this),
            onDrag: this.onDrag.bind(this),
            onDragEnd: this.onDragEnd.bind(this),
            offsetDrag: this.options.offsetDrag
        });
    }
    private draggableElement: HTMLElement;
    private positionShadowRelativeToElement: Coordinate;
    private onPressStart(e: PointerEvent) {
        this.options.onPointerDown(e);
    }
    private onPressEnd(e: PointerEvent) {
        this.options.onPointerUp(e);
    }
    private onDragStart(e: PointerEvent) {
        this.isEnable = this.options.isDragEnable();
        if(!this.isEnable) {
            return;
        }
        this.draggableElement = this.options.element as HTMLElement;
        this.startCursorPosition = {
            x: e.pageX,
            y: e.pageY
        };
        this.startElementPosition = {
            x: this.draggableElement.offsetLeft,
            y: this.draggableElement.offsetTop
        };
        if(this.options.shadow.enable) {
            this.draggableElement = this.options.element.cloneNode(true) as HTMLElement;
            let elBox = this.options.element.getBoundingClientRect();
            let containerBox = this.options.shadow.container.getBoundingClientRect();
            this.positionShadowRelativeToElement = {
                x: elBox.x - containerBox.x,
                y: elBox.y - containerBox.y
            };
            if(this.options.applyDrag) {
                this.draggableElement.style.position = "absolute";
                this.draggableElement.style.top = this.positionShadowRelativeToElement.y + this.options.getOffsetY() + 'px';
                this.draggableElement.style.left =  this.positionShadowRelativeToElement.x + this.options.getOffsetX() + 'px';
            }
            this.options.shadow.transform(this.draggableElement);
            this.options.shadow.container.appendChild(this.draggableElement);
        }
        this.options.onStart(e);
    }
    private onDrag(e: PointerEvent) {
        if(!this.isEnable) {
            return;
        }
        let zoom = this.options.getZoom();
        let diff: Coordinate = {
            x: 0,
            y: 0
        };
        if(this.options.shadow.enable) {
            diff = {
                x: (e.pageX - this.startCursorPosition.x) + this.positionShadowRelativeToElement.x + this.options.getOffsetX(),
                y:  (e.pageY - this.startCursorPosition.y) + this.positionShadowRelativeToElement.y + this.options.getOffsetY(),
            };
        }
        else {
            diff = {
                x: (e.pageX - this.startCursorPosition.x) / zoom + this.startElementPosition.x + this.options.getOffsetX(),
                y: (e.pageY - this.startCursorPosition.y) / zoom + this.startElementPosition.y + this.options.getOffsetY()
            };
        }
        let newPos = this.setPosition(diff);
        this.options.onMove(e, newPos);
    }
    private onDragEnd(e: PointerEvent) {
        if(!this.isEnable) {
            return;
        }
        let targets = this.getMatchingTargets();
        if(this.options.shadow.enable && this.options.shadow.removeOnStop) {
            this.draggableElement.parentNode?.removeChild(this.draggableElement);
        }
        if(targets.length > 0) {
            this.options.onDrop(this.draggableElement, targets);
        }

        this.options.onStop(e);
    }
    private setPosition(position: Coordinate): Coordinate {
        if(this.options.usePercent) {
            let elementParent = this.draggableElement.offsetParent as HTMLElement;
            const percentLeft = (position.x / elementParent.offsetWidth) * 100;
            const percentTop = (position.y / elementParent.offsetHeight) * 100;
            if(this.options.applyDrag) {
                this.draggableElement.style.left = percentLeft + '%';
                this.draggableElement.style.top = percentTop + '%';
            }
            return {
                x: percentLeft,
                y: percentTop
            };
        }
        else {
            if(this.options.applyDrag) {
                this.draggableElement.style.left = position.x + 'px';
                this.draggableElement.style.top = position.y + 'px';
            }
        }
        return position;
    }
    /**
     * Get targets within the current element position is matching
     */
    public getMatchingTargets(): HTMLElement[] {
        let matchingTargets: HTMLElement[] = [];
        for(let target of this.options.targets) {
            const elementCoordinates = this.draggableElement.getBoundingClientRect();
            const targetCoordinates = target.getBoundingClientRect();
            let offsetX = this.options.getOffsetX();
            let offsetY = this.options.getOffsetY();
            let zoom = this.options.getZoom();
            targetCoordinates.x += offsetX;
            targetCoordinates.y += offsetY;
            targetCoordinates.width *= zoom;
            targetCoordinates.height *= zoom;
            if(this.options.strict) {
                if(
                    (elementCoordinates.x >= targetCoordinates.x && elementCoordinates.x + elementCoordinates.width <= targetCoordinates.x + targetCoordinates.width) &&
                    (elementCoordinates.y >= targetCoordinates.y && elementCoordinates.y + elementCoordinates.height <= targetCoordinates.y + targetCoordinates.height)
                ) {
                    matchingTargets.push(target);
                }
            } else {
                let elementLeft = elementCoordinates.x;
                let elementRight = elementCoordinates.x + elementCoordinates.width;
                let elementTop = elementCoordinates.y;
                let elementBottom = elementCoordinates.y + elementCoordinates.height;
                let targetLeft = targetCoordinates.x;
                let targetRight = targetCoordinates.x + targetCoordinates.width;
                let targetTop = targetCoordinates.y;
                let targetBottom = targetCoordinates.y + targetCoordinates.height;
                if(
                    !(elementRight < targetLeft ||
                        elementLeft > targetRight ||
                        elementBottom < targetTop ||
                        elementTop > targetBottom)
                ) {
                    matchingTargets.push(target);
                }
            }
        }
        return matchingTargets;
    }

    /**
     * Get element currently dragging
     */
    public getElementDrag(): HTMLElement {
        return this.draggableElement;
    }
    /**
     * Set targets where to drop
     */
    public setTargets(targets: HTMLElement[]) {
        this.options.targets = targets;
    }
    /**
     * Destroy the current drag&drop instance
     */
    public destroy() {
        this.pressManager.destroy();
    }
}