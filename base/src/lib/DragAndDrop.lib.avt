import { NormalizedEvent, PressManager } from "./PressManager.lib.avt";
@Storybook({
    prefix: "Lib/DragAndDrop"
})
export interface DragAndDropOptionsShadow {
    /** If set to true, the drag and drop will create a shadow element while dragging and removing it on drop. It will not move the original element anymore */
    enable: boolean,
    /** The container where the shadow element will be added, default is body */
    container?: ContainerElement;
    /** Remove shadow from tree */
    removeOnStop?: boolean,

    /** Add custom transformation for the shadow element */
    transform?: (el: DragElement) => void;
    /** Trigger to destroy the clone element, If you set the paramater you must remove the element from DOM yourself */
    delete?: (el: DragElement) => void;
}
export const DragElementXYType = [SVGGElement, SVGRectElement, SVGEllipseElement, SVGTextElement] as const;
export const DragElementLeftTopType = [HTMLElement, SVGSVGElement] as const;

export type DragElement = DragElementXY | DragElementLeftTop;
export type DragElementXY = InstanceType<typeof DragElementXYType[number]>;
export type DragElementLeftTop = InstanceType<typeof DragElementLeftTopType[number]>;

@Storybook({
    prefix: "Lib/DragAndDrop"
})
export interface DragAndDropOptions {
    /** If set to false, the element won't move */
    applyDrag?: boolean;
    /** Element to drag and drog */
    element: DragElement;
    /** Element that trigger the drag action; default is element */
    elementTrigger?: HTMLElement | SVGElement;
    /** Set the default offset for the drag trigger; default is DragAndDrop.defaultOffsetDrag */
    offsetDrag?: number;
    /** Options to create a shadow element */
    shadow?: DragAndDropOptionsShadow;
    /** If set to false, the element will be considered as in the target if it touches it */
    strict?: boolean;
    /** The targets for the drop action */
    targets?: TargetableElement[] | (() => TargetableElement[]);
    /** Use percent instead of pixel */
    usePercent?: boolean;
    /** Stop Propagation */
    stopPropagation?: boolean | (() => boolean);

    /** If set to true, the drag and drop will use the mouse position to calculate drop targets */
    useMouseFinalPosition?: boolean;

    /** Determine if should use x,y coordinates or transform="translate(x,y)" */
    useTransform?: boolean;

    positionRelative?: boolean;


    /** Determine if drag is active or not */
    isDragEnable?: () => boolean;
    /** Get current zoom */
    getZoom?: () => number;
    /** Get offset X in px related to element.offsetTarget */
    getOffsetX?: () => number;
    /** Get offset Y in px related to element.offsetTarget */
    getOffsetY?: () => number;
    /** Trigger on pointer down*/
    onPointerDown?: (e: NormalizedEvent) => void;
    /** Trigger on pointer up*/
    onPointerUp?: (e: NormalizedEvent) => void;
    /** Trigger on drag start*/
    onStart?: (e: NormalizedEvent) => void | boolean;
    /** Trigger on moving  */
    onMove?: (e: NormalizedEvent, position: Coordinate) => void;
    /** Trigger after stop moving */
    onStop?: (e: NormalizedEvent) => void;
    /** Trigger after drop if at least one target found; Element is the shadow or the target*/
    onDrop?: (element: DragElement, targets: TargetableElement[]) => void;
    /** correct the position if you need */
    correctPosition?: (position: Coordinate) => Coordinate;
}
@Storybook({
    prefix: "Lib/DragAndDrop"
})
    type DragAndDropOptionsInternal = Required<DragAndDropOptions> & { shadow: Required<DragAndDropOptionsShadow>; };

@Storybook({
    prefix: "Lib/DragAndDrop"
})
interface Coordinate {
    x: number;
    y: number;
}

type TargetableElement = HTMLElement | SVGElement;
type ContainerElement = HTMLElement | SVGSVGElement;

@Storybook({
    prefix: "Lib/DragAndDrop"
})
export class DragAndDrop {
    /**
     * Default offset before drag element
     */
    public static defaultOffsetDrag: number = 20;
    private pressManager: PressManager;
    private options: DragAndDropOptionsInternal;
    private startCursorPosition: Coordinate = { x: 0, y: 0 };
    private startElementPosition: Coordinate = { x: 0, y: 0 };
    private isEnable: boolean = true;
    private draggableElement!: DragElement;


    constructor(options: DragAndDropOptions) {
        this.options = this.getDefaultOptions(options.element);
        this.mergeProperties(options);
        this.mergeFunctions(options);
        this.options.elementTrigger.style.touchAction = 'none';
        this.pressManager = new PressManager({
            element: this.options.elementTrigger,
            onPressStart: this.onPressStart.bind(this),
            onPressEnd: this.onPressEnd.bind(this),
            onDragStart: this.onDragStart.bind(this),
            onDrag: this.onDrag.bind(this),
            onDragEnd: this.onDragEnd.bind(this),
            offsetDrag: this.options.offsetDrag,
            stopPropagation: this.options.stopPropagation
        });
    }
    // #region merge params
    private getDefaultOptions(element: DragElement): DragAndDropOptionsInternal {
        return {
            applyDrag: true,
            element: element,
            elementTrigger: element,
            offsetDrag: DragAndDrop.defaultOffsetDrag,
            shadow: {
                enable: false,
                container: document.body,
                removeOnStop: true,
                transform: () => { },
                delete: (el) => {
                    el.remove();
                }
            },
            strict: false,
            targets: [],
            usePercent: false,
            stopPropagation: true,
            useMouseFinalPosition: false,
            useTransform: false,
            positionRelative: false,

            isDragEnable: () => true,
            getZoom: () => 1,
            getOffsetX: () => 0,
            getOffsetY: () => 0,
            onPointerDown: (e: NormalizedEvent) => { },
            onPointerUp: (e: NormalizedEvent) => { },
            onStart: (e: NormalizedEvent) => { },
            onMove: (e: NormalizedEvent) => { },
            onStop: (e: NormalizedEvent) => { },
            onDrop: (element: DragElement, targets: TargetableElement[]) => { },
            correctPosition: (position: Coordinate) => position
        };
    }
    private mergeProperties(options: DragAndDropOptions) {
        if(options.element === void 0) {
            throw "You must define the element for the drag&drop";
        }
        this.options.element = options.element;
        if(options.elementTrigger === void 0) {
            this.options.elementTrigger = this.options.element;
        }
        else {
            this.options.elementTrigger = options.elementTrigger;
        }
        this.defaultMerge(options, "applyDrag");
        this.defaultMerge(options, "offsetDrag");
        this.defaultMerge(options, "strict");
        this.defaultMerge(options, "targets");
        this.defaultMerge(options, "usePercent");
        this.defaultMerge(options, "stopPropagation");
        this.defaultMerge(options, "useMouseFinalPosition");
        this.defaultMerge(options, "useTransform");
        this.defaultMerge(options, "positionRelative");
        if(options.shadow !== void 0) {
            this.options.shadow.enable = options.shadow.enable;
            if(options.shadow.container !== void 0) {
                this.options.shadow.container = options.shadow.container;
            }
            else {
                this.options.shadow.container = document.body;
            }
            if(options.shadow.removeOnStop !== void 0) {
                this.options.shadow.removeOnStop = options.shadow.removeOnStop;
            }
            if(options.shadow.transform !== void 0) {
                this.options.shadow.transform = options.shadow.transform;
            }
            if(options.shadow.delete !== void 0) {
                this.options.shadow.delete = options.shadow.delete;
            }
        }
    }
    private mergeFunctions(options: DragAndDropOptions) {
        this.defaultMerge(options, "isDragEnable");
        this.defaultMerge(options, "getZoom");
        this.defaultMerge(options, "getOffsetX");
        this.defaultMerge(options, "getOffsetY");
        this.defaultMerge(options, "onPointerDown");
        this.defaultMerge(options, "onPointerUp");
        this.defaultMerge(options, "onStart");
        this.defaultMerge(options, "onMove");
        this.defaultMerge(options, "onStop");
        this.defaultMerge(options, "onDrop");
        this.defaultMerge(options, "correctPosition");
    }
    private defaultMerge(options: DragAndDropOptions, name: string) {
        if(options[name] !== void 0) {
            this.options[name] = options[name];
        }
    }
    // #endregion

    private positionShadowRelativeToElement: Coordinate = { x: 0, y: 0 };
    private onPressStart(e: NormalizedEvent) {
        this.options.onPointerDown(e);
    }
    private onPressEnd(e: NormalizedEvent) {
        this.options.onPointerUp(e);
    }
    private onDragStart(e: NormalizedEvent): void | boolean {
        this.isEnable = this.options.isDragEnable();
        if(!this.isEnable) {
            return false;
        }
        let draggableElement = this.options.element;
        this.startCursorPosition = {
            x: e.pageX,
            y: e.pageY
        };
        if(this.isLeftTopElement(draggableElement)) {
            this.startElementPosition = {
                //using getBoundingClientRect because offsetLeft and offsetTop are not working with SVGElements
                x: draggableElement.getBoundingClientRect().left,
                y: draggableElement.getBoundingClientRect().top
            };

        }
        else {
            this.startElementPosition = this.getCoordinateFromTranslateAttribute(draggableElement);
        }

        if(this.options.shadow.enable) {
            draggableElement = this.options.element.cloneNode(true) as DragElement;
            let elBox = this.options.element.getBoundingClientRect();
            let containerBox = this.options.shadow.container.getBoundingClientRect();
            this.positionShadowRelativeToElement = {
                x: elBox.x - containerBox.x,
                y: elBox.y - containerBox.y
            };
            if(this.options.applyDrag) {
                draggableElement.style.position = "absolute";
                draggableElement.style.top = this.positionShadowRelativeToElement.y + this.options.getOffsetY() + 'px';
                draggableElement.style.left = this.positionShadowRelativeToElement.x + this.options.getOffsetX() + 'px';
                this.options.shadow.transform(draggableElement);
                this.options.shadow.container.appendChild(draggableElement);
            }

        }
        this.draggableElement = draggableElement;
        return this.options.onStart(e);
    }
    private onDrag(e: NormalizedEvent) {
        if(!this.isEnable) {
            return;
        }
        let zoom = this.options.getZoom();
        let diff: Coordinate = {
            x: 0,
            y: 0
        };
        if(this.options.shadow.enable) {
            diff = {
                x: (e.pageX - this.startCursorPosition.x) + this.positionShadowRelativeToElement.x + this.options.getOffsetX(),
                y: (e.pageY - this.startCursorPosition.y) + this.positionShadowRelativeToElement.y + this.options.getOffsetY(),
            };
        }
        else {
            diff = {
                x: (e.pageX - this.startCursorPosition.x) / zoom + this.startElementPosition.x + this.options.getOffsetX(),
                y: (e.pageY - this.startCursorPosition.y) / zoom + this.startElementPosition.y + this.options.getOffsetY()
            };
        }
        let newPos = this.setPosition(diff);
        this.options.onMove(e, newPos);
    }
    private onDragEnd(e: NormalizedEvent) {
        if(!this.isEnable) {
            return;
        }
        let targets = this.options.useMouseFinalPosition ? this.getMatchingTargetsWithMousePosition({
            x: e.clientX,
            y: e.clientY
        }) : this.getMatchingTargets();
        let draggableElement = this.draggableElement;
        if(this.options.shadow.enable && this.options.shadow.removeOnStop) {
            this.options.shadow.delete(draggableElement);
        }
        if(targets.length > 0) {
            this.options.onDrop(this.options.element, targets);
        }

        this.options.onStop(e);
    }
    private setPosition(position: Coordinate): Coordinate {
        let draggableElement = this.draggableElement;
        if(this.options.usePercent) {

            //TODO improve to add % with SVG
            if(draggableElement instanceof HTMLElement) {
                let elementParent = draggableElement.offsetParent as HTMLElement;
                let percentPosition = {
                    x: (position.x / elementParent.offsetWidth) * 100,
                    y: (position.y / elementParent.offsetHeight) * 100
                };
                percentPosition = this.options.correctPosition(percentPosition);
                if(this.options.applyDrag) {
                    draggableElement.style.left = percentPosition.x + '%';
                    draggableElement.style.top = percentPosition.y + '%';
                }
                return percentPosition;
            }
            else {
                console.error("usePercent is not supported for anything else than HTMLElement");
            }
        }
        else {
            position = this.options.correctPosition(position);
            if(this.options.applyDrag) {
                if(this.isLeftTopElement(draggableElement)) {
                    draggableElement.style.left = position.x + 'px';
                    draggableElement.style.top = position.y + 'px';
                }
                else {
                    if(this.options.useTransform) {
                        draggableElement.setAttribute("transform", `translate(${position.x},${position.y})`);
                    }
                    else {
                        draggableElement.style.left = position.x + 'px';
                        draggableElement.style.top = position.y + 'px';
                    }
                }
            }
        }
        return position;
    }

    private getTargets(): TargetableElement[] {
        if(typeof this.options.targets == "function") {
            return this.options.targets();
        }
        else {
            return this.options.targets;
        }
    }
    /**
     * Get targets within the current element position is matching
     */
    public getMatchingTargets(): TargetableElement[] {
        let draggableElement = this.draggableElement;
        let matchingTargets: TargetableElement[] = [];
        let srcTargets: TargetableElement[] = this.getTargets();

        for(let target of srcTargets) {
            let elementCoordinates: DOMRect = this.getBoundingBox(draggableElement);
            let targetCoordinates: DOMRect = this.getBoundingBox(target);
            let offsetX = this.options.getOffsetX();
            let offsetY = this.options.getOffsetY();
            let zoom = this.options.getZoom();
            targetCoordinates.x += offsetX;
            targetCoordinates.y += offsetY;
            targetCoordinates.width *= zoom;
            targetCoordinates.height *= zoom;
            if(this.options.strict) {
                if(
                    (elementCoordinates.x >= targetCoordinates.x && elementCoordinates.x + elementCoordinates.width <= targetCoordinates.x + targetCoordinates.width) &&
                    (elementCoordinates.y >= targetCoordinates.y && elementCoordinates.y + elementCoordinates.height <= targetCoordinates.y + targetCoordinates.height)
                ) {
                    matchingTargets.push(target);
                }
            } else {
                let elementLeft = elementCoordinates.x;
                let elementRight = elementCoordinates.x + elementCoordinates.width;
                let elementTop = elementCoordinates.y;
                let elementBottom = elementCoordinates.y + elementCoordinates.height;
                let targetLeft = targetCoordinates.x;
                let targetRight = targetCoordinates.x + targetCoordinates.width;
                let targetTop = targetCoordinates.y;
                let targetBottom = targetCoordinates.y + targetCoordinates.height;
                if(
                    !(elementRight < targetLeft ||
                        elementLeft > targetRight ||
                        elementBottom < targetTop ||
                        elementTop > targetBottom)
                ) {
                    matchingTargets.push(target);
                }
            }
        }
        return matchingTargets;
    }

    public getMatchingTargetsWithMousePosition(mouse: Coordinate): TargetableElement[] {
        let matchingTargets: TargetableElement[] = [];
        if(this.options.shadow.enable == false || this.options.shadow.container == null) {
            console.warn("DragAndDrop : To use useMouseFinalPosition=true, you must enable shadow and set a container");
            return matchingTargets;
        }
        const container = this.options.shadow.container;

        //Correct the mouse position to be relative to the container
        let xCorrected = mouse.x - container.getBoundingClientRect().left;
        let yCorrected = mouse.y - container.getBoundingClientRect().top;


        for(let target of this.getTargets()) {
            if(this.isLeftTopElement(target)) {
                if(this.matchPosition(target, { x: mouse.x, y: mouse.y })) {
                    matchingTargets.push(target);
                }

            } else {
                if(this.matchPosition(target, { x: xCorrected, y: yCorrected })) {
                    matchingTargets.push(target);
                }
            }

        }
        return matchingTargets;
    }

    private matchPosition(element: TargetableElement, point: Coordinate): boolean {
        let elementCoordinates: DOMRect = this.getBoundingBox(element);
        if(
            point.x >= elementCoordinates.x &&
            point.x <= elementCoordinates.x + elementCoordinates.width &&
            point.y >= elementCoordinates.y &&
            point.y <= elementCoordinates.y + elementCoordinates.height
        ) {
            return true;
        }

        return false;
    }

    /**
     * Get element currently dragging
     */
    public getElementDrag(): DragElement {
        return this.options.element;
    }
    /**
     * Set targets where to drop
     */
    public setTargets(targets: TargetableElement[]) {
        this.options.targets = targets;
    }
    /**
     * Set targets where to drop
     */
    public setTargetsFct(targets: () => TargetableElement[]) {
        this.options.targets = targets;
    }
    /**
     * Destroy the current drag&drop instance
     */
    public destroy() {
        this.pressManager.destroy();
    }

    private isLeftTopElement(element: any): element is DragElementLeftTop {
        for(let Type of DragElementLeftTopType) {
            if(element instanceof Type) {
                return true;
            }
        }
        return false;
    }


    private isXYElement(element: any): element is DragElementXY {
        for(let Type of DragElementXYType) {
            if(element instanceof Type) {
                return true;
            }
        }
        return false;
    }

    private getCoordinateFromTranslateAttribute(element: DragElementXY): Coordinate {

        const transform = element.getAttribute("transform");
        const tvalue = transform?.match(/translate\(([^,]+),([^,]+)\)/);
        const x = tvalue ? parseFloat(tvalue[1]) : 0;
        const y = tvalue ? parseFloat(tvalue[2]) : 0;
        return {
            x: x,
            y: y
        };
    }

    private XYElementToBoundingBox(element: DragElementXY): DOMRect {
        let coordinates: Coordinate;
        if(this.options.useTransform) {
            coordinates = this.getCoordinateFromTranslateAttribute(element);
        } else {
            coordinates = {
                x: parseFloat(element.getAttribute("x") as string),
                y: parseFloat(element.getAttribute("y") as string)
            };
            if(this.options.positionRelative) {
                const parent = element.parentElement;
                //In the case of x,y coordinates, the only time we need to check the parent is when it's a SVG element inside of an svg group
                if(parent instanceof SVGGElement) {
                    const parentCoordinates: Coordinate = this.getCoordinateFromTranslateAttribute(parent);
                    coordinates = {
                        x: coordinates.x + parentCoordinates.x,
                        y: coordinates.y + parentCoordinates.y
                    };

                }
            }
        }
        const width = parseFloat(element.getAttribute("width") as string);
        const height = parseFloat(element.getAttribute("height") as string);
        return {
            x: coordinates.x,
            y: coordinates.y,
            width: width,
            height: height,
            bottom: coordinates.y + height,
            right: coordinates.x + width,
            top: coordinates.y,
            left: coordinates.x,
            toJSON(): string {
                return JSON.stringify(this);
            }
        };
    }

    private getBoundingBox(element: HTMLElement | SVGElement): DOMRect {
        if(this.isLeftTopElement(element)) {
            return element.getBoundingClientRect();
        }
        else if(this.isXYElement(element)) {
            return this.XYElementToBoundingBox(element);
        }
        else {
            console.error("Element type not supported");
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
                bottom: 0,
                right: 0,
                top: 0,
                left: 0,
                toJSON(): string {
                    return JSON.stringify(this);
                }
            };
        }
    }

}