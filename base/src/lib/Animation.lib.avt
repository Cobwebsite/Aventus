@Storybook({
    prefix: "Lib/Animation"
})
export type AnimationOptions = Partial<AnimationOptionsInternal>;

@Storybook({
    prefix: "Lib/Animation"
})
interface AnimationOptionsInternal {
    animate: Function,
    stopped: Function,
    fps: number;
}

@Storybook({
    prefix: "Lib/Animation"
})
export class Animation {
    /**
     * Default FPS for all Animation if not set inside options
     */
    public static FPS_DEFAULT: number = 60;

    private options: AnimationOptionsInternal;
    private nextFrame: number = 0;
    private fpsInterval: number;
    private continueAnimation: boolean = false;
    private frame_id: number = 0;

    constructor(options: AnimationOptions) {
        if(!options.animate) {
            options.animate = () => { };
        }
        if(!options.stopped) {
            options.stopped = () => { };
        }
        if(!options.fps) {
            options.fps = Animation.FPS_DEFAULT;
        }
        this.options = options as AnimationOptionsInternal;
        this.fpsInterval = 1000 / options.fps;
    }

    private animate(): void {
        let now = window.performance.now();
        let elapsed = now - this.nextFrame;
        if(elapsed <= this.fpsInterval) {
            this.frame_id = requestAnimationFrame(() => this.animate());
            return;
        }
        this.nextFrame = now - (elapsed % this.fpsInterval);

        setTimeout(() => {
            this.options.animate();
        }, 0);
        if(this.continueAnimation) {
            this.frame_id = requestAnimationFrame(() => this.animate());
        }
        else {
            this.options.stopped();
        }
    }
    /**
     * Start the of animation
     */
    public start(): void {
        if(this.continueAnimation == false) {
            this.continueAnimation = true;
            this.nextFrame = window.performance.now();
            this.animate();
        }
    }

    /**
     * Stop the animation
     */
    public stop(): void {
        this.continueAnimation = false;
    }

    /**
     * Stop the animation
     */
    public immediateStop(): void {
        cancelAnimationFrame(this.frame_id);
        this.continueAnimation = false;
        this.options.stopped();
    }

    /**
     * Get the FPS
     */
    public getFPS(): number {
        return this.options.fps;
    }

    /**
     * Set the FPS
     */
    public setFPS(fps: number): void {
        this.options.fps = fps;
        this.fpsInterval = 1000 / this.options.fps;
    }

    /**
     * Get the animation status (true if animation is running)
     */
    public isStarted(): boolean {
        return this.continueAnimation;
    }
}