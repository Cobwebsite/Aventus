
@Storybook({
    prefix: "Lib/PressManager"
})
export interface Pointer {
    id: number;
    constructor(nativePointer: Touch | PointerEvent);
}

@Storybook({
    prefix: "Lib/PressManager"
})
export interface InternalCustomFunction {
    src?: PressManager,
    onDrag?: (e: NormalizedEvent, self: PressManager) => void,
    onDragEnd?: (e: NormalizedEvent, self: PressManager) => void,
    offsetDrag?: number;
}

@Storybook({
    prefix: "Lib/PressManager"
})
export interface InternalPointerEvent extends Event {
    detail: {
        state: PressManagerState,
        customFcts: InternalCustomFunction,
        realEvent: NormalizedEvent;
    };
}
/**
 * Options for configuring the PressManager.
 */
@Storybook({
    prefix: "Lib/PressManager"
})
export interface PressManagerOptions {
    /**
     * The element to be managed by PressManager.
     */
    element: Element,
    /**
     * Callback function triggered on a press event.
     * @param e - The NormalizedEvent associated with the press.
     * @param self - The instance of PressManager.
     */
    onPress?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * Callback function triggered when a press starts.
     * @param e - The NormalizedEvent associated with the press start.
     * @param self - The instance of PressManager.
     */
    onPressStart?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * Callback function triggered when a press ends.
     * @param e - The NormalizedEvent associated with the press end.
     * @param self - The instance of PressManager.
     */
    onPressEnd?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * Callback function triggered on a long press.
     * @param e - The NormalizedEvent associated with the long press.
     * @param self - The instance of PressManager.
     */
    onLongPress?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * Callback function triggered on a double press.
     * @param e - The NormalizedEvent associated with the double press.
     * @param self - The instance of PressManager.
     */
    onDblPress?: (e: NormalizedEvent, self: PressManager) => void,
    /**
    * Callback function triggered on a drag event.
    * @param e - The NormalizedEvent associated with the drag.
    * @param self - The instance of PressManager.
    */
    onDrag?: (e: NormalizedEvent, self: PressManager) => void,
    /**
    * Callback function triggered when a drag starts.
    * @param e - The NormalizedEvent associated with the drag start.
    * @param self - The instance of PressManager.
    */
    onDragStart?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * Callback function triggered when a drag ends.
     * @param e - The NormalizedEvent associated with the drag end.
     * @param self - The instance of PressManager.
     */
    onDragEnd?: (e: NormalizedEvent, self: PressManager) => void,
    /**
     * The minimum distance in pixels required to trigger a drag event.
     */
    offsetDrag?: number,
    /**
     * The delay in milliseconds to detect a double press.
     */
    delayDblPress?: number;
    /**
     * The delay in milliseconds to detect a long press.
     */
    delayLongPress?: number;
    /** Force double press to be triggered (callback or dispatch to parent) */
    forceDblPress?: boolean;
    /**
     * Determines whether to stop the propagation of the event.
     * It can be a boolean or a function that returns a boolean.
     */
    stopPropagation?: boolean | (() => boolean);
    /**
     * Specifies which mouse buttons are allowed to trigger the events.
     * An array of button numbers.
     */
    buttonAllowed?: number[];
    /**
     * Callback function triggered on any event.
     * @param e - The NormalizedEvent associated with the event.
     */
    onEvent?: (e: NormalizedEvent) => void;
}
@Storybook({
    prefix: "Lib/PressManager"
})
export interface PressManagerState {
    oneActionTriggered: boolean,
    moving?: PressManager;
}
@Storybook({
    prefix: "Lib/PressManager"
})
export class PressManager {
    private static globalConfig: Partial<PressManagerOptions> = {
        delayDblPress: 250,
        delayLongPress: 700,
        offsetDrag: 20
    };
    public static setGlobalConfig(options: Partial<PressManagerOptions>) {
        this.globalConfig = options;
    }
    public static create(options: PressManagerOptions & { element: Element; }): PressManager;
    public static create(options: PressManagerOptions & { element: Element[]; }): PressManager[];
    public static create(options: PressManagerOptions & { element: Element | Element[]; }) {
        if(Array.isArray(options.element)) {
            let result: PressManager[] = [];
            for(let el of options.element) {
                let cloneOpt = { ...options };
                cloneOpt.element = el;
                result.push(new PressManager(cloneOpt));
            }
            return result;
        }
        else {
            return new PressManager(options);
        }
    }

    protected options: PressManagerOptions;
    protected element: Element;

    protected delayDblPress: number = PressManager.globalConfig.delayDblPress ?? 150;
    protected delayLongPress: number = PressManager.globalConfig.delayLongPress ?? 700;
    protected nbPress: number = 0;
    protected offsetDrag: number = PressManager.globalConfig.offsetDrag ?? 20;

    protected state: PressManagerState = {
        oneActionTriggered: false,
        moving: undefined,
    };
    protected startPosition: { x: number, y: number; } = { x: 0, y: 0 };
    protected customFcts: InternalCustomFunction = {};

    protected timeoutDblPress: number = 0;
    protected timeoutLongPress: number = 0;
    protected downEventSaved?: NormalizedEvent;
    protected useDblPress: boolean = false;
    protected stopPropagation: () => boolean = () => true;
    protected isEventDownProcessed: boolean = false;
    protected isEventUpProcessed: boolean = false;

    protected functionsBinded: {
        downAction: (e: PointerEvent) => void,
        upAction: (e: PointerEvent) => void,
        moveAction: (e: PointerEvent) => void,
        childPressStart: (e: InternalPointerEvent) => void,
        childPressEnd: (e: InternalPointerEvent) => void,
        childPressMove: (e: InternalPointerEvent) => void,
    } = {
            downAction: (e: PointerEvent) => { },
            upAction: (e: PointerEvent) => { },
            moveAction: (e: PointerEvent) => { },
            childPressStart: (e: InternalPointerEvent) => { },
            childPressEnd: (e: InternalPointerEvent) => { },
            childPressMove: (e: InternalPointerEvent) => { }
        };
    /**
     * @param {*} options - The options
     * @param {HTMLElement | HTMLElement[]} options.element - The element to manage
     */
    constructor(options: PressManagerOptions) {
        if(options.element === void 0) {
            throw 'You must provide an element';
        }
        this.element = options.element;
        this.checkDragConstraint(options);
        this.assignValueOption(options);
        this.options = options;
        this.init();
    }

    /**
     * Get the current element focused by the PressManager
     */
    public getElement(): Element {
        return this.element;
    }

    protected checkDragConstraint(options: PressManagerOptions) {
        if(options.onDrag !== void 0) {
            if(options.onDragStart === void 0) {
                options.onDragStart = (e) => { };
            }
            if(options.onDragEnd === void 0) {
                options.onDragEnd = (e) => { };
            }
        }
        if(options.onDragStart !== void 0) {
            if(options.onDrag === void 0) {
                options.onDrag = (e) => { };
            }
            if(options.onDragEnd === void 0) {
                options.onDragEnd = (e) => { };
            }
        }
        if(options.onDragEnd !== void 0) {
            if(options.onDragStart === void 0) {
                options.onDragStart = (e) => { };
            }
            if(options.onDrag === void 0) {
                options.onDrag = (e) => { };
            }
        }
    }
    protected assignValueOption(options: PressManagerOptions) {
        if(PressManager.globalConfig.delayDblPress !== undefined) {
            this.delayDblPress = PressManager.globalConfig.delayDblPress;
        }
        if(options.delayDblPress !== undefined) {
            this.delayDblPress = options.delayDblPress;
        }
        if(PressManager.globalConfig.delayLongPress !== undefined) {
            this.delayLongPress = PressManager.globalConfig.delayLongPress;
        }
        if(options.delayLongPress !== undefined) {
            this.delayLongPress = options.delayLongPress;
        }
        if(PressManager.globalConfig.offsetDrag !== undefined) {
            this.offsetDrag = PressManager.globalConfig.offsetDrag;
        }
        if(options.offsetDrag !== undefined) {
            this.offsetDrag = options.offsetDrag;
        }

        if(options.onDblPress !== undefined) {
            this.useDblPress = true;
        }
        if(PressManager.globalConfig.forceDblPress !== undefined) {
            this.useDblPress = PressManager.globalConfig.forceDblPress;
        }
        if(options.forceDblPress !== undefined) {
            this.useDblPress = options.forceDblPress;
        }
        if(typeof PressManager.globalConfig.stopPropagation == 'function') {
            this.stopPropagation = PressManager.globalConfig.stopPropagation;
        }
        else if(options.stopPropagation === false) {
            this.stopPropagation = () => false;
        }
        if(typeof options.stopPropagation == 'function') {
            this.stopPropagation = options.stopPropagation;
        }
        else if(options.stopPropagation === false) {
            this.stopPropagation = () => false;
        }
        if(!options.buttonAllowed) options.buttonAllowed = PressManager.globalConfig.buttonAllowed;
        if(!options.buttonAllowed) options.buttonAllowed = [0];

        if(!options.onEvent) options.onEvent = PressManager.globalConfig.onEvent;
    }
    protected bindAllFunction() {
        this.functionsBinded.downAction = this.downAction.bind(this);
        this.functionsBinded.moveAction = this.moveAction.bind(this);
        this.functionsBinded.upAction = this.upAction.bind(this);
        this.functionsBinded.childPressStart = this.childPressStart.bind(this);
        this.functionsBinded.childPressEnd = this.childPressEnd.bind(this);
        this.functionsBinded.childPressMove = this.childPressMove.bind(this);
    }
    protected preventTouch() {
        const onTouch = (ev: TouchEvent) => {
            ev.preventDefault();
        };
        this.element.addEventListener('touchstart', onTouch, { passive: false });
        this.element.addEventListener('touchmove', onTouch, { passive: false });
        this.element.addEventListener('touchend', onTouch, { passive: false });
    }
    protected init() {
        this.bindAllFunction();
        this.element.addEventListener("pointerdown", this.functionsBinded.downAction);
        this.element.addEventListener("touchstart", this.functionsBinded.downAction);
        this.element.addEventListener("trigger_pointer_pressstart", this.functionsBinded.childPressStart);
        this.element.addEventListener("trigger_pointer_pressend", this.functionsBinded.childPressEnd);
        this.element.addEventListener("trigger_pointer_pressmove", this.functionsBinded.childPressMove);
    }

    // #region current Event
    protected genericDownAction(state: PressManagerState, e: NormalizedEvent) {
        this.downEventSaved = e;
        if(this.options.onLongPress) {
            this.timeoutLongPress = setTimeout(() => {
                if(!state.oneActionTriggered) {
                    if(this.options.onLongPress) {
                        state.oneActionTriggered = true;
                        this.options.onLongPress(e, this);
                    }
                }

            }, this.delayLongPress);
        }
    }
    protected downAction(ev: PointerEvent | TouchEvent) {
        if(this.isEventDownProcessed) {
            if(this.stopPropagation()) {
                ev.stopImmediatePropagation();
            }
            return;
        }
        this.isEventDownProcessed = true;
        this.isEventUpProcessed = false;
        const e = new NormalizedEvent(ev);
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        // TODO edit this to implement the full logic to avoid cancelling parent
        if(e.button != undefined && !this.options.buttonAllowed?.includes(e.button)) {
            this.isEventUpProcessed = true;
            this.isEventDownProcessed = false;
            return;
        }

        if(this.stopPropagation()) {
            e.stopImmediatePropagation();
        }
        this.customFcts = {};
        if(this.nbPress == 0) {
            this.state.oneActionTriggered = false;
            clearTimeout(this.timeoutDblPress);
        }
        this.startPosition = { x: e.pageX, y: e.pageY };

        document.addEventListener("pointerup", this.functionsBinded.upAction);
        document.addEventListener("pointercancel", this.functionsBinded.upAction);
        document.addEventListener("touchend", this.functionsBinded.upAction);
        document.addEventListener("touchcancel", this.functionsBinded.upAction);
        document.addEventListener("pointermove", this.functionsBinded.moveAction);

        this.genericDownAction(this.state, e);

        if(this.options.onPressStart) {
            this.options.onPressStart(e, this);
            // this.emitTriggerFunctionParent("pressstart", e);
        }
        // else {
        this.emitTriggerFunction("pressstart", e);
        // }
    }

    protected genericUpAction(state: PressManagerState, e: NormalizedEvent) {
        clearTimeout(this.timeoutLongPress);

        if(state.moving == this) {
            state.moving = undefined;
            if(this.options.onDragEnd) {
                this.options.onDragEnd(e, this);
            }
            else if(this.customFcts.src && this.customFcts.onDragEnd) {
                this.customFcts.onDragEnd(e, this.customFcts.src);
            }
        }
        else {
            if(this.useDblPress) {
                this.nbPress++;
                if(this.nbPress == 2) {
                    if(!state.oneActionTriggered) {
                        state.oneActionTriggered = true;
                        this.nbPress = 0;
                        if(this.options.onDblPress) {
                            this.options.onDblPress(e, this);
                        }
                    }
                }
                else if(this.nbPress == 1) {
                    this.timeoutDblPress = setTimeout(() => {
                        this.nbPress = 0;
                        if(!state.oneActionTriggered) {
                            if(this.options.onPress) {
                                state.oneActionTriggered = true;
                                this.options.onPress(e, this);
                            }
                        }
                    }, this.delayDblPress);
                }
            }
            else {
                if(!state.oneActionTriggered) {
                    if(this.options.onPress) {
                        state.oneActionTriggered = true;
                        this.options.onPress(e, this);
                    }
                }
            }
        }
    }
    protected upAction(ev: PointerEvent | TouchEvent) {
        if(this.isEventUpProcessed) {
            if(this.stopPropagation()) {
                ev.stopImmediatePropagation();
            }
            return;
        }
        const e = new NormalizedEvent(ev);
        this.isEventUpProcessed = true;
        this.isEventDownProcessed = false;
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        if(this.stopPropagation()) {
            e.stopImmediatePropagation();
        }
        document.removeEventListener("pointerup", this.functionsBinded.upAction);
        document.removeEventListener("pointercancel", this.functionsBinded.upAction);
        document.removeEventListener("touchend", this.functionsBinded.upAction);
        document.removeEventListener("touchcancel", this.functionsBinded.upAction);
        document.removeEventListener("pointermove", this.functionsBinded.moveAction);

        this.genericUpAction(this.state, e);

        if(this.options.onPressEnd) {
            this.options.onPressEnd(e, this);
            // this.emitTriggerFunctionParent("pressend", e);
        }
        // else {
        this.emitTriggerFunction("pressend", e);
        // }
    }
    protected genericMoveAction(state: PressManagerState, e: NormalizedEvent) {
        if(!state.moving && !state.oneActionTriggered) {
            let xDist = e.pageX - this.startPosition.x;
            let yDist = e.pageY - this.startPosition.y;
            let distance = Math.sqrt(xDist * xDist + yDist * yDist);
            if(distance > this.offsetDrag && this.downEventSaved) {
                state.oneActionTriggered = true;
                if(this.options.onDragStart) {
                    state.moving = this;
                    this.options.onDragStart(this.downEventSaved, this);
                }
            }
        }
        else if(state.moving == this) {
            if(this.options.onDrag) {
                this.options.onDrag(e, this);
            }
            else if(this.customFcts.src && this.customFcts.onDrag) {
                this.customFcts.onDrag(e, this.customFcts.src);
            }
        }
    }
    protected moveAction(ev: PointerEvent) {
        const e = new NormalizedEvent(ev);
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        if(this.stopPropagation()) {
            e.stopImmediatePropagation();
        }
        this.genericMoveAction(this.state, e);

        // if(this.options.onDrag) {
        //     this.emitTriggerFunctionParent("pressmove", e);
        // }
        // else {
        this.emitTriggerFunction("pressmove", e);
        // }
    }

    // #endregion

    // #region custom Event
    protected childPressStart(e: InternalPointerEvent) {
        if(this.lastEmitEvent == e) return;

        this.genericDownAction(e.detail.state, e.detail.realEvent);
        if(this.options.onPressStart) {
            this.options.onPressStart(e.detail.realEvent, this);
        }

    }
    protected childPressEnd(e: InternalPointerEvent) {
        if(this.lastEmitEvent == e) return;

        this.genericUpAction(e.detail.state, e.detail.realEvent);
        if(this.options.onPressEnd) {
            this.options.onPressEnd(e.detail.realEvent, this);
        }
    }
    protected childPressMove(e: InternalPointerEvent) {
        if(this.lastEmitEvent == e) return;

        this.genericMoveAction(e.detail.state, e.detail.realEvent);
    }

    // #endregion

    protected lastEmitEvent?: InternalPointerEvent;
    protected emitTriggerFunction(action: string, e: NormalizedEvent, el?: Element | null) {
        let ev = new CustomEvent("trigger_pointer_" + action, {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
                state: this.state,
                customFcts: this.customFcts,
                realEvent: e
            }
        }) as InternalPointerEvent;
        this.lastEmitEvent = ev;
        if(!el) {
            el = this.element;
        }
        el.dispatchEvent(ev);
    }
    /**
     * Destroy the Press instance byremoving all events
     */
    public destroy() {
        if(this.element) {
            this.element.removeEventListener("pointerdown", this.functionsBinded.downAction);
            this.element.removeEventListener("trigger_pointer_pressstart", this.functionsBinded.childPressStart);
            this.element.removeEventListener("trigger_pointer_pressend", this.functionsBinded.childPressEnd);
            this.element.removeEventListener("trigger_pointer_pressmove", this.functionsBinded.childPressMove);
            document.removeEventListener("pointerup", this.functionsBinded.upAction);
            document.removeEventListener("pointercancel", this.functionsBinded.upAction);
            document.removeEventListener("pointermove", this.functionsBinded.moveAction);
        }
    }
}

export class NormalizedEvent {
    private _event: PointerEvent | TouchEvent;

    public get event(): PointerEvent | TouchEvent {
        return this._event;
    }

    constructor(event: PointerEvent | TouchEvent) {
        this._event = event;
    }

    // Méthode pour récupérer une propriété de l'événement
    public getProp<T>(prop: keyof PointerEvent | keyof TouchEvent): T | undefined {
        if(prop in this.event) {
            return (this.event as any)[prop];
        }
        return undefined;
    }

    public stopImmediatePropagation() {
        this.event.stopImmediatePropagation();
    }

    // Accéder aux propriétés partagées entre PointerEvent et TouchEvent
    public get clientX(): number {
        if('clientX' in this.event) {
            return (this.event as PointerEvent).clientX;
        } else if('touches' in this.event && (this.event as TouchEvent).touches.length > 0) {
            return (this.event as TouchEvent).touches[0].clientX;
        }
        return 0;
    }

    public get clientY(): number {
        if('clientY' in this.event) {
            return (this.event as PointerEvent).clientY;
        } else if('touches' in this.event && (this.event as TouchEvent).touches.length > 0) {
            return (this.event as TouchEvent).touches[0].clientY;
        }
        return 0;
    }

    public get pageX(): number {
        if('pageX' in this.event) {
            return (this.event as PointerEvent).pageX;
        } else if('touches' in this.event && (this.event as TouchEvent).touches.length > 0) {
            return (this.event as TouchEvent).touches[0].pageX;
        }
        return 0;
    }

    public get pageY(): number {
        if('pageY' in this.event) {
            return (this.event as PointerEvent).pageY;
        } else if('touches' in this.event && (this.event as TouchEvent).touches.length > 0) {
            return (this.event as TouchEvent).touches[0].pageY;
        }
        return 0;
    }

    public get type(): string {
        return this.event.type;
    }

    public get target(): EventTarget | null {
        return this.event.target;
    }

    public get timeStamp(): number {
        return this.event.timeStamp;
    }

    public get pointerType(): string | undefined {
        return this.getProp("pointerType");
    }

    public get button(): number | undefined {
        return this.getProp("button");
    }
}