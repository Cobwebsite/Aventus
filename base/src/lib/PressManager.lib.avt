
export interface Pointer {
    id: number;
    constructor(nativePointer: Touch | PointerEvent);
}

export interface InternalCustomFunction {
    src?: PressManager,
    onDrag?: (e: PointerEvent, self: PressManager) => void,
    onDragEnd?: (e: PointerEvent, self: PressManager) => void,
    offsetDrag?: number;
}
export interface InternalPointerEvent extends Event {
    detail: {
        state: PressManagerState,
        customFcts: InternalCustomFunction,
        realEvent: PointerEvent;
    };
}
export interface PressManagerOptions {
    element: Element,
    onPress?: (e: PointerEvent, self: PressManager) => void,
    onPressStart?: (e: PointerEvent, self: PressManager) => void,
    onPressEnd?: (e: PointerEvent, self: PressManager) => void,
    onLongPress?: (e: PointerEvent, self: PressManager) => void,
    onDblPress?: (e: PointerEvent, self: PressManager) => void,
    onDrag?: (e: PointerEvent, self: PressManager) => void,
    onDragStart?: (e: PointerEvent, self: PressManager) => void,
    onDragEnd?: (e: PointerEvent, self: PressManager) => void,
    offsetDrag?: number,
    delayDblPress?: number;
    delayLongPress?: number;
    /** Force double press to be triggered (callback or dispatch to parent) */
    forceDblPress?: boolean;
    stopPropagation?: boolean | (() => boolean);
    buttonAllowed?: number[];
    onEvent?: (e: PointerEvent) => void;
}
export interface PressManagerState {
    oneActionTriggered: boolean,
    isMoving: boolean;
}
export class PressManager {
    private static globalConfig: Partial<PressManagerOptions> = {
        delayDblPress: 150,
        delayLongPress: 700,
        offsetDrag: 20
    };
    public static setGlobalConfig(options: Partial<PressManagerOptions>) {
        this.globalConfig = options;
    }
    public static create(options: PressManagerOptions & { element: Element; }): PressManager;
    public static create(options: PressManagerOptions & { element: Element[]; }): PressManager[];
    public static create(options: PressManagerOptions & { element: Element | Element[]; }) {
        if(Array.isArray(options.element)) {
            let result: PressManager[] = [];
            for(let el of options.element) {
                let cloneOpt = { ...options };
                cloneOpt.element = el;
                result.push(new PressManager(cloneOpt));
            }
            return result;
        }
        else {
            return new PressManager(options);
        }
    }

    protected options: PressManagerOptions;
    protected element: Element;

    protected delayDblPress: number = PressManager.globalConfig.delayDblPress ?? 150;
    protected delayLongPress: number = PressManager.globalConfig.delayLongPress ?? 700;
    protected nbPress: number = 0;
    protected offsetDrag: number = PressManager.globalConfig.offsetDrag ?? 20;

    protected state: PressManagerState = {
        oneActionTriggered: false,
        isMoving: false,
    };
    protected startPosition: { x: number, y: number; } = { x: 0, y: 0 };
    protected customFcts: InternalCustomFunction = {};

    protected timeoutDblPress: number = 0;
    protected timeoutLongPress: number = 0;
    protected downEventSaved?: PointerEvent;
    protected actionsName: { press: "press", longPress: "longPress", dblPress: "dblPress", drag: "drag"; } = {
        press: "press",
        longPress: "longPress",
        dblPress: "dblPress",
        drag: "drag"
    };
    protected useDblPress: boolean = false;
    protected stopPropagation: () => boolean = () => true;

    protected functionsBinded: {
        downAction: (e: PointerEvent) => void,
        upAction: (e: PointerEvent) => void,
        moveAction: (e: PointerEvent) => void,
        childPressStart: (e: InternalPointerEvent) => void,
        childPressEnd: (e: InternalPointerEvent) => void,
        childPress: (e: InternalPointerEvent) => void,
        childDblPress: (e: InternalPointerEvent) => void,
        childLongPress: (e: InternalPointerEvent) => void,
        childDragStart: (e: InternalPointerEvent) => void,
    } = {
            downAction: (e: PointerEvent) => { },
            upAction: (e: PointerEvent) => { },
            moveAction: (e: PointerEvent) => { },
            childPressStart: (e: InternalPointerEvent) => { },
            childPressEnd: (e: InternalPointerEvent) => { },
            childPress: (e: InternalPointerEvent) => { },
            childDblPress: (e: InternalPointerEvent) => { },
            childLongPress: (e: InternalPointerEvent) => { },
            childDragStart: (e: InternalPointerEvent) => { },
        };
    /**
     * @param {*} options - The options
     * @param {HTMLElement | HTMLElement[]} options.element - The element to manage
     */
    constructor(options: PressManagerOptions) {
        if(options.element === void 0) {
            throw 'You must provide an element';
        }
        this.element = options.element;
        this.checkDragConstraint(options);
        this.assignValueOption(options);
        this.options = options;
        this.init();
    }

    /**
     * Get the current element focused by the PressManager
     */
    public getElement(): Element {
        return this.element;
    }

    protected checkDragConstraint(options: PressManagerOptions) {
        if(options.onDrag !== void 0) {
            if(options.onDragStart === void 0) {
                options.onDragStart = (e) => { };
            }
            if(options.onDragEnd === void 0) {
                options.onDragEnd = (e) => { };
            }
        }
        if(options.onDragStart !== void 0) {
            if(options.onDrag === void 0) {
                options.onDrag = (e) => { };
            }
            if(options.onDragEnd === void 0) {
                options.onDragEnd = (e) => { };
            }
        }
        if(options.onDragEnd !== void 0) {
            if(options.onDragStart === void 0) {
                options.onDragStart = (e) => { };
            }
            if(options.onDrag === void 0) {
                options.onDrag = (e) => { };
            }
        }
    }
    protected assignValueOption(options: PressManagerOptions) {
        if(PressManager.globalConfig.delayDblPress !== undefined) {
            this.delayDblPress = PressManager.globalConfig.delayDblPress;
        }
        if(options.delayDblPress !== undefined) {
            this.delayDblPress = options.delayDblPress;
        }
        if(PressManager.globalConfig.delayLongPress !== undefined) {
            this.delayLongPress = PressManager.globalConfig.delayLongPress;
        }
        if(options.delayLongPress !== undefined) {
            this.delayLongPress = options.delayLongPress;
        }
        if(PressManager.globalConfig.offsetDrag !== undefined) {
            this.offsetDrag = PressManager.globalConfig.offsetDrag;
        }
        if(options.offsetDrag !== undefined) {
            this.offsetDrag = options.offsetDrag;
        }

        if(options.onDblPress !== undefined) {
            this.useDblPress = true;
        }
        if(PressManager.globalConfig.forceDblPress !== undefined) {
            this.useDblPress = PressManager.globalConfig.forceDblPress;
        }
        if(options.forceDblPress !== undefined) {
            this.useDblPress = options.forceDblPress;
        }
        if(typeof PressManager.globalConfig.stopPropagation == 'function') {
            this.stopPropagation = PressManager.globalConfig.stopPropagation;
        }
        else if(options.stopPropagation === false) {
            this.stopPropagation = () => false;
        }
        if(typeof options.stopPropagation == 'function') {
            this.stopPropagation = options.stopPropagation;
        }
        else if(options.stopPropagation === false) {
            this.stopPropagation = () => false;
        }
        if(!options.buttonAllowed) options.buttonAllowed = PressManager.globalConfig.buttonAllowed;
        if(!options.buttonAllowed) options.buttonAllowed = [0];

        if(!options.onEvent) options.onEvent = PressManager.globalConfig.onEvent;
    }
    protected bindAllFunction() {
        this.functionsBinded.downAction = this.downAction.bind(this);
        this.functionsBinded.moveAction = this.moveAction.bind(this);
        this.functionsBinded.upAction = this.upAction.bind(this);
        this.functionsBinded.childDblPress = this.childDblPress.bind(this);
        this.functionsBinded.childDragStart = this.childDragStart.bind(this);
        this.functionsBinded.childLongPress = this.childLongPress.bind(this);
        this.functionsBinded.childPress = this.childPress.bind(this);
        this.functionsBinded.childPressStart = this.childPressStart.bind(this);
        this.functionsBinded.childPressEnd = this.childPressEnd.bind(this);
    }
    protected init() {
        this.bindAllFunction();
        this.element.addEventListener("pointerdown", this.functionsBinded.downAction);
        this.element.addEventListener("trigger_pointer_press", this.functionsBinded.childPress);
        this.element.addEventListener("trigger_pointer_pressstart", this.functionsBinded.childPressStart);
        this.element.addEventListener("trigger_pointer_pressend", this.functionsBinded.childPressEnd);
        this.element.addEventListener("trigger_pointer_dblpress", this.functionsBinded.childDblPress);
        this.element.addEventListener("trigger_pointer_longpress", this.functionsBinded.childLongPress);
        this.element.addEventListener("trigger_pointer_dragstart", this.functionsBinded.childDragStart);
    }


    // #region current Event
    protected downAction(e: PointerEvent) {
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        // TODO edit this to implement the full logic to avoid cancelling parent
        if(!this.options.buttonAllowed?.includes(e.button)) {
            return;
        }
        this.downEventSaved = e;
        if(this.stopPropagation()) {
            e.stopImmediatePropagation();
        }
        this.customFcts = {};
        if(this.nbPress == 0) {
            this.state.oneActionTriggered = false;
            clearTimeout(this.timeoutDblPress);
        }
        this.startPosition = { x: e.pageX, y: e.pageY };
        document.addEventListener("pointerup", this.functionsBinded.upAction);
        document.addEventListener("pointercancel", this.functionsBinded.upAction);
        document.addEventListener("pointermove", this.functionsBinded.moveAction);

        this.timeoutLongPress = setTimeout(() => {
            if(!this.state.oneActionTriggered) {
                if(this.options.onLongPress) {
                    this.state.oneActionTriggered = true;
                    this.options.onLongPress(e, this);
                    this.triggerEventToParent(this.actionsName.longPress, e);
                }
                else {
                    this.emitTriggerFunction(this.actionsName.longPress, e);
                }
            }

        }, this.delayLongPress);
        if(this.options.onPressStart) {
            this.options.onPressStart(e, this);
            this.emitTriggerFunctionParent("pressstart", e);
        }
        else {
            this.emitTriggerFunction("pressstart", e);
        }
    }
    protected upAction(e: PointerEvent) {
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        if(this.stopPropagation()) {
            e.stopImmediatePropagation();
        }
        document.removeEventListener("pointerup", this.functionsBinded.upAction);
        document.removeEventListener("pointercancel", this.functionsBinded.upAction);
        document.removeEventListener("pointermove", this.functionsBinded.moveAction);

        clearTimeout(this.timeoutLongPress);

        if(this.state.isMoving) {
            this.state.isMoving = false;
            if(this.options.onDragEnd) {
                this.options.onDragEnd(e, this);
            }
            else if(this.customFcts.src && this.customFcts.onDragEnd) {
                this.customFcts.onDragEnd(e, this.customFcts.src);
            }
        }
        else {
            if(this.useDblPress) {
                this.nbPress++;
                if(this.nbPress == 2) {
                    if(!this.state.oneActionTriggered) {
                        this.state.oneActionTriggered = true;
                        this.nbPress = 0;
                        if(this.options.onDblPress) {
                            this.options.onDblPress(e, this);
                            this.triggerEventToParent(this.actionsName.dblPress, e);
                        }
                        else {
                            this.emitTriggerFunction(this.actionsName.dblPress, e);
                        }
                    }
                }
                else if(this.nbPress == 1) {
                    this.timeoutDblPress = setTimeout(() => {
                        this.nbPress = 0;
                        if(!this.state.oneActionTriggered) {
                            if(this.options.onPress) {
                                this.state.oneActionTriggered = true;
                                this.options.onPress(e, this);
                                this.triggerEventToParent(this.actionsName.press, e);
                            }
                            else {
                                this.emitTriggerFunction(this.actionsName.press, e);
                            }
                        }
                    }, this.delayDblPress);
                }
            }
            else {
                if(!this.state.oneActionTriggered) {
                    if(this.options.onPress) {
                        this.state.oneActionTriggered = true;
                        this.options.onPress(e, this);
                        this.triggerEventToParent(this.actionsName.press, e);
                    }
                    else {
                        this.emitTriggerFunction("press", e);
                    }
                }
            }
        }

        if(this.options.onPressEnd) {
            this.options.onPressEnd(e, this);
            this.emitTriggerFunctionParent("pressend", e);
        }
        else {
            this.emitTriggerFunction("pressend", e);
        }
    }
    protected moveAction(e: PointerEvent) {
        if(this.options.onEvent) {
            this.options.onEvent(e);
        }
        if(!this.state.isMoving && !this.state.oneActionTriggered) {
            if(this.stopPropagation()) {
                e.stopImmediatePropagation();
            }
            let xDist = e.pageX - this.startPosition.x;
            let yDist = e.pageY - this.startPosition.y;
            let distance = Math.sqrt(xDist * xDist + yDist * yDist);
            if(distance > this.offsetDrag && this.downEventSaved) {
                this.state.oneActionTriggered = true;
                if(this.options.onDragStart) {
                    this.state.isMoving = true;
                    this.options.onDragStart(this.downEventSaved, this);
                    this.triggerEventToParent(this.actionsName.drag, e);
                }
                else {
                    this.emitTriggerFunction("dragstart", this.downEventSaved);
                }
            }
        }
        else if(this.state.isMoving) {
            if(this.options.onDrag) {
                this.options.onDrag(e, this);
            }
            else if(this.customFcts.src && this.customFcts.onDrag) {
                this.customFcts.onDrag(e, this.customFcts.src);
            }
        }
    }
    protected triggerEventToParent(eventName: string, pointerEvent: PointerEvent) {
        if(this.element.parentNode) {
            this.element.parentNode.dispatchEvent(new CustomEvent("pressaction_trigger", {
                bubbles: true,
                cancelable: false,
                composed: true,
                detail: {
                    target: this.element,
                    eventName: eventName,
                    realEvent: pointerEvent
                }
            }));
        }
    }
    // #endregion

    // #region custom Event
    protected childPressStart(e: InternalPointerEvent) {
        if(this.options.onPressStart) {
            this.options.onPressStart(e.detail.realEvent, this);
        }
    }
    protected childPressEnd(e: InternalPointerEvent) {
        if(this.options.onPressEnd) {
            this.options.onPressEnd(e.detail.realEvent, this);
        }
    }
    protected childPress(e: InternalPointerEvent) {
        if(this.options.onPress) {
            if(this.stopPropagation()) {
                e.stopImmediatePropagation();
            }
            e.detail.state.oneActionTriggered = true;
            this.options.onPress(e.detail.realEvent, this);
            this.triggerEventToParent(this.actionsName.press, e.detail.realEvent);
        }
    }
    protected childDblPress(e: InternalPointerEvent) {
        if(this.options.onDblPress) {
            if(this.stopPropagation()) {
                e.stopImmediatePropagation();
            }
            if(e.detail.state) {
                e.detail.state.oneActionTriggered = true;
            }
            this.options.onDblPress(e.detail.realEvent, this);
            this.triggerEventToParent(this.actionsName.dblPress, e.detail.realEvent);
        }
    }
    protected childLongPress(e: InternalPointerEvent) {
        if(this.options.onLongPress) {
            if(this.stopPropagation()) {
                e.stopImmediatePropagation();
            }
            e.detail.state.oneActionTriggered = true;
            this.options.onLongPress(e.detail.realEvent, this);
            this.triggerEventToParent(this.actionsName.longPress, e.detail.realEvent);
        }
    }
    protected childDragStart(e: InternalPointerEvent) {
        if(this.options.onDragStart) {
            if(this.stopPropagation()) {
                e.stopImmediatePropagation();
            }
            e.detail.state.isMoving = true;
            e.detail.customFcts.src = this;
            e.detail.customFcts.onDrag = this.options.onDrag;
            e.detail.customFcts.onDragEnd = this.options.onDragEnd;
            e.detail.customFcts.offsetDrag = this.options.offsetDrag;
            this.options.onDragStart(e.detail.realEvent, this);
            this.triggerEventToParent(this.actionsName.drag, e.detail.realEvent);
        }
    }
    // #endregion
    protected emitTriggerFunctionParent(action: string, e: PointerEvent) {
        let el = this.element.parentElement;
        if(el == null) {
            let parentNode = this.element.parentNode;
            if(parentNode instanceof ShadowRoot) {
                this.emitTriggerFunction(action, e, parentNode.host);
            }
        }
        else {
            this.emitTriggerFunction(action, e, el);
        }
    }
    protected emitTriggerFunction(action: string, e: PointerEvent, el?: Element | null) {
        let ev = new CustomEvent("trigger_pointer_" + action, {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
                state: this.state,
                customFcts: this.customFcts,
                realEvent: e
            }
        });
        if(!el) {
            el = this.element;
        }
        el.dispatchEvent(ev);
    }
    /**
     * Destroy the Press instance byremoving all events
     */
    public destroy() {
        if(this.element) {
            this.element.removeEventListener("pointerdown", this.functionsBinded.downAction);
            this.element.removeEventListener("trigger_pointer_press", this.functionsBinded.childPress);
            this.element.removeEventListener("trigger_pointer_pressstart", this.functionsBinded.childPressStart);
            this.element.removeEventListener("trigger_pointer_pressend", this.functionsBinded.childPressEnd);
            this.element.removeEventListener("trigger_pointer_dblpress", this.functionsBinded.childDblPress);
            this.element.removeEventListener("trigger_pointer_longpress", this.functionsBinded.childLongPress);
            this.element.removeEventListener("trigger_pointer_dragstart", this.functionsBinded.childDragStart);
            document.removeEventListener("pointerup", this.functionsBinded.upAction);
            document.removeEventListener("pointercancel", this.functionsBinded.upAction);
            document.removeEventListener("pointermove", this.functionsBinded.moveAction);
        }
    }
}