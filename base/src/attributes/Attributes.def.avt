declare global {
    type ConstructorConstraint<T> = Function & { prototype: T; };

    interface DebuggerConfig {
        /** Write the compiled file inside ./compiled.js */
        writeCompiled?: boolean,
        /** Write the view parsed */
        writeHTML?: boolean;
        /** Write the ts file for the component with template methods */
        writeComponentTs?: boolean;
        /** Enable history for watch property and add a function getWatchHistory on this component*/
        enableWatchHistory?: boolean,
    }

    interface OverrideViewConfig {
        /** if set the component ll do a query selector else the component is the one loaded on first render */
        removeViewVariables?: string[];
    }

    interface ViewElementConfig {
        /** if set the component ll do a query selector else the component is the one loaded on first render */
        useLive?: boolean;
    }

    interface DependanceConfig {
        /** The type to load */
        type: any,
        /** The type must be loaded before the current class */
        strong?: boolean;
    }

    /**
     * Add an attribute inside on your component
     */
    function Attribute();
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Property();
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Property<T>(onChange: (component: T) => void);
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Signal();
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Signal<T>(onChange: (component: T) => void);
    /**
     * Add a property inside a watcher to be notify of changing
     */
    function Watch();
    /**
     * Add a property inside a watcher to be notify of changing
     */
    function Watch<T>(onChange: (component: T, action: Aventus.WatchAction, path: string, value: any) => void);
    /**
     * Add a function inside a watcher to be notify of changing
     */
    function Effect(options?: { autoInit?: boolean; });
    /**
     * Signal that this variable is a link to your shadowroot
     */
    function ViewElement(config?: ViewElementConfig);
    /**
     * Add foreign key reference
     */
    function ForeignKey(ref: ConstructorConstraint<Aventus.IData>);
    /**
     * Define a public property that will be transformed to private once compiled
     */
    function Internal();
    /**
     * Define a public property that will be transformed to protected once compiled
     */
    function InternalProtected();

    function StateActive(stateName: string, manager: ConstructorConstraint<Aventus.StateManager> | Aventus.StateManager): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: Aventus.State, slugs: Aventus.StateSlug) => void)>) => void;
    function DefaultStateActive(manager: ConstructorConstraint<Aventus.StateManager> | Aventus.StateManager);
    function StateInactive(stateName: string, manager: ConstructorConstraint<Aventus.StateManager> | Aventus.StateManager): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: Aventus.State, nextState: Aventus.State, slugs: Aventus.StateSlug) => void)>) => void;
    function DefaultStateInactive(manager: ConstructorConstraint<Aventus.StateManager> | Aventus.StateManager);
    function StateChange(stateName: string, manager: ConstructorConstraint<Aventus.StateManager> | Aventus.StateManager): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: Aventus.State, nextState: Aventus.State, slugs: Aventus.StateSlug) => boolean | Promise<boolean>)>) => void;

    /**
     * Clear parent view and use your
     */
    function OverrideView(config?: OverrideViewConfig): (<T extends ConstructorConstraint<Aventus.WebComponent>> (ConstructorConstraint: T) => T);
    /**
     * use a custom TagName
     */
    function TagName(name: string): (<T extends ConstructorConstraint<Aventus.WebComponent>> (ConstructorConstraint: T) => T);
    /**
     * Force to be required inside export
     */
    function Required(): (ConstructorConstraint: Function) => void;
    /**
     * Add debbuger action function for your component
     */
    function Debugger(config: DebuggerConfig): (ConstructorConstraint: Function) => void;


    function Dependances(info: DependanceConfig[]): (ConstructorConstraint: Function) => void;

    /**
     * Register the element inside the Converter instance
     * Your object must have a static type named as the parameter
     */
    function Convertible(name: string = "Fullname"): (ConstructorConstraint: Function) => void;

    function BindThis(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;

    function NoCompile(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;

    interface StorybookConfig {
        /** Define if the element must be exported to storybook */
        export?: boolean,
        /** Define a prefix to group your stories */
        prefix?: string,
        /** If set to true, only meta will be generated. Usefull to create custom pages */
        onlyMeta?: boolean;
        /** Define the configruation for your slots */
        slots?: {
            /** Define the slot content base on the name */
            values?: {
                [name: string]: string;
            };
            /** Inject type */
            inject?: (new (...args: any[]) => Aventus.WebComponent)[];
        };
    }
    /**
     * Export a story for this component
     */
    function Storybook(info?: StorybookConfig);
}