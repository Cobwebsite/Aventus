import { Data } from "../data/IData.data.avt";
import { Json } from "./Json.lib.avt";

@Storybook({
    prefix: "Tools/Conveter"
})
type SchemaType = 'string' | 'number' | 'boolean' | 'date' | string;

@Storybook({
    prefix: "Tools/Conveter"
})
export type ClassCopyOptions = {
    isValidKey?: (key: string) => boolean;
    replaceKey?: (key: string) => string;
    transformValue?: (key: string, value: any) => any;
};
@Storybook({
    prefix: "Tools/Conveter"
})
export interface Schema {
    [key: string]: SchemaType;
}
@Storybook({
    prefix: "Tools/Conveter"
})
export interface IConverterTransform {
    transform<T = any>(data: any): T;
    copyValuesClass<T extends Object>(target: T, src: T, options?: ClassCopyOptions): void;
}
@Storybook({
    prefix: "Tools/Conveter"
})
export class ConverterTransform implements IConverterTransform {

    public transform<T = any>(data: any): T {
        return this.transformLoop(data);
    }

    protected createInstance(data): (Object & { fromJSON?: (data: any) => any; }) | undefined {
        if(data.$type) {
            let cst = Converter.info.get(data.$type);
            if(cst) {
                return new cst();
            }
        }
        return undefined;
    }

    protected beforeTransformObject(obj: Object) {

    }

    protected afterTransformObject(obj: Object) {

    }

    private transformLoop(data: any) {
        if(data === null) {
            return data;
        }
        if(Array.isArray(data)) {
            let result: any[] = [];
            for(let element of data) {
                result.push(this.transformLoop(element));
            }
            return result;
        }
        if(data instanceof Date) {
            return data;
        }

        if(typeof data === 'object' && !/^\s*class\s+/.test(data.toString())) {
            let objTemp = this.createInstance(data);
            if(objTemp) {
                let obj = objTemp;
                this.beforeTransformObject(obj);
                if(obj.fromJSON) {
                    obj = obj.fromJSON(data);
                }
                else {
                    obj = Json.classFromJson(obj, data, {
                        transformValue: (key, value) => {
                            if(obj[key] instanceof Date) {
                                return value ? new Date(value) : null;
                            }
                            else if(typeof value == 'string' && /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(\.(\d{3})Z)?$/.exec(value)) {
                                return value ? new Date(value) : null;
                            }
                            else if(obj[key] instanceof Map) {
                                let map = new Map();
                                for(const keyValue of value) {
                                    map.set(this.transformLoop(keyValue[0]), this.transformLoop(keyValue[1]));
                                }
                                return map;
                            }
                            else if(obj instanceof Data) {
                                let cst = obj.constructor as typeof Data;
                                
                                if(cst.$schema[key] == 'boolean') {
                                    return value ? true : false;
                                }
                                else if(cst.$schema[key] == 'number') {
                                    return isNaN(Number(value)) ? 0 : Number(value);
                                }
                                else if(cst.$schema[key] == 'number') {
                                    return isNaN(Number(value)) ? 0 : Number(value);
                                }
                                else if(cst.$schema[key] == 'Date') {
                                    return value ? new Date(value) : null;
                                }
                            }
                            return this.transformLoop(value);
                        }
                    });
                }
                this.afterTransformObject(obj);
                return obj;
            }

            let result = {};
            for(let key in data) {
                result[key] = this.transformLoop(data[key]);
            }
            return result;
        }
        
        if(typeof data == 'string' && /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})\.(\d{3})Z$/.exec(data)) {
            return new Date(data);
        }
        return data;
    }


    public copyValuesClass<T extends Object>(target: T, src: T, options?: ClassCopyOptions): void {
        const realOptions: Required<ClassCopyOptions> = {
            isValidKey: options?.isValidKey ?? (() => true),
            replaceKey: options?.replaceKey ?? ((key) => key),
            transformValue: options?.transformValue ?? ((key, value) => value),
        };

        this.__classCopyValues(target, src, realOptions);
    }

    private __classCopyValues<T extends Object>(target: T, src: T, options: Required<ClassCopyOptions>) {
        let props = Object.getOwnPropertyNames(target);
        for(let prop of props) {
            let propInfo = Object.getOwnPropertyDescriptor(target, prop);
            if(propInfo?.writable) {
                if(options.isValidKey(prop))
                    target[options.replaceKey(prop)] = options.transformValue(prop, src[prop]);
            }
        }
        // load custom getter / setter
        let cstTemp = target.constructor;
        while(cstTemp.prototype && cstTemp != Object.prototype) {
            props = Object.getOwnPropertyNames(cstTemp.prototype);
            for(let prop of props) {
                let propInfo = Object.getOwnPropertyDescriptor(cstTemp.prototype, prop);
                if(propInfo?.set && propInfo.get) {
                    if(options.isValidKey(prop))
                        target[options.replaceKey(prop)] = options.transformValue(prop, src[prop]);
                }
            }
            cstTemp = Object.getPrototypeOf(cstTemp);
        }
    }
}

/**
 * Utility class for data conversion and manipulation.
 */
@Storybook({
    prefix: "Tools/Conveter"
})
export class Converter {
    /**
    * Map storing information about registered types.
    */
    public static readonly info: Map<string, new () => any> = new Map();
    /**
    * Map storing schemas for registered types.
    */
    private static schema: Map<string, Schema> = new Map();
    /**
     * Internal converter instance.
     */
    private static __converter: IConverterTransform = new ConverterTransform();
    /**
     * Getter for the internal converter instance.
     */
    private static get converterTransform(): IConverterTransform {
        return this.__converter;
    }

    /**
    * Sets the converter instance.
    * @param converter The converter instance to set.
    */
    public static setConverter(converter: IConverterTransform) {
        this.__converter = converter;
    }

    /**
    * Registers a unique string type for any class.
    * @param $type The unique string type identifier.
    * @param cst The constructor function for the class.
    * @param schema Optional schema for the registered type.
    */
    public static register($type: string, cst: new () => any, schema?: Schema) {
        this.info.set($type, cst);
        if(schema) {
            this.schema.set($type, schema);
        }
    }

    /**
     * Transforms the provided data using the current converter instance.
     * @template T
     * @param {*} data The data to transform.
     * @param {IConverterTransform} [converter] Optional converter instance to use for transformation.
     * @returns {T} Returns the transformed data.
     */
    public static transform<T = any>(data: any, converter?: IConverterTransform): T {
        if(!converter) {
            converter = this.converterTransform;
        }
        return converter.transform(data);
    }


    /**
     * Copies values from one class instance to another using the current converter instance.
     * @template T
     * @param {T} to The destination class instance to copy values into.
     * @param {T} from The source class instance to copy values from.
     * @param {ClassCopyOptions} [options] Optional options for the copy operation.
     * @param {IConverterTransform} [converter] Optional converter instance to use for the copy operation.
     * @returns {T} Returns the destination class instance with copied values.
     */
    public static copyValuesClass<T extends Object>(to: T, from: T, options?: ClassCopyOptions, converter?: IConverterTransform) {
        if(!converter) {
            converter = this.converterTransform;
        }
        return converter.copyValuesClass(to, from, options);
    }
}


