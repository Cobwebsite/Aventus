import { Converter } from "./Converter.lib.avt";
import type { Enum, EnumValue } from "./Enum.lib.avt";

/**
 * Represents a generic error with a code, message, and optional details.
 * @template T - The type of the error code, which extends either number or Enum.
 */
@Storybook({
    prefix: "Error"
})
@Convertible()
// @Dependances([{ type: Aventus.Converter, strong: true }, { type: Converter, strong: true }])
export class GenericError<T extends (number | Enum) = any> {
    private static converter: Converter = new Converter();
    public static get Fullname(): string { return "Aventus.GenericError"; }
    /**
     * Code for the error
     */
    public code: EnumValue<T>;
    /**
     * Description of the error
     */
    public message: string;

    /**
     * Additional details related to the error.
     */
    public details: any[] | { [key: string]: any; } = [];

    /**
     * Creates a new instance of GenericError.
     * @param {EnumValue<T>} code - The error code.
     * @param {string} message - The error message.
     */
    public constructor(code: EnumValue<T>, message: string) {
        this.code = code;
        this.message = message + '';
    }
}

/**
 * Represents a result of an action that may contain errors.
 * @template T - The type of error, extending GenericError.
 */
@Storybook({
    prefix: "Error"
})
export class VoidWithError<T extends GenericError = GenericError> {

    /**
     * Determine if the action is a success
     */
    public get success(): boolean {
        return this.errors.length == 0;
    }
    /**
     * List of errors
     */
    public errors: T[] = [];

    /**
     * Converts the current instance to a VoidWithError object.
     * @returns {VoidWithError} A new instance of VoidWithError with the same error list.
     */
    public toGeneric(): VoidWithError {
        const result = new VoidWithError();
        result.errors = this.errors;
        return result;
    }

    /**
    * Checks if the error list contains a specific error code.
    * @template U - The type of error, extending GenericError.
    * @template T - The type of the error code, which extends either number or Enum.
    * @param {EnumValue<T>} code - The error code to check for.
    * @param {new (...args: any[]) => U} [type] - Optional constructor function of the error type.
    * @returns {boolean} True if the error list contains the specified error code, otherwise false.
    */
    public containsCode<U extends GenericError<any>, T extends (number | Enum)>(code: EnumValue<T>, type?: new (...args: any[]) => U): boolean {
        if(type) {
            for(let error of this.errors) {
                if(error instanceof type) {
                    if(error.code == code) {
                        return true;
                    }
                }
            }
        }
        else {
            for(let error of this.errors) {
                if(error.code == code) {
                    return true;
                }
            }
        }
        return false;
    }
}

/**
 * Represents a result of an action that may contain errors and includes a result value.
 * @template U The type of the result value.
 * @template T The type of error, extending GenericError.
 */
@Storybook({
    prefix: "Error"
})
export class ResultWithError<U, T extends GenericError = GenericError> extends VoidWithError<T> {

    /**
      * The result value of the action.
      * @type {U | undefined}
      */
    public result: U | undefined;

    /**
     * Converts the current instance to a ResultWithError object.
     * @returns {ResultWithError<U>} A new instance of ResultWithError with the same error list and result value.
     */
    public override toGeneric(): ResultWithError<U> {
        const result: ResultWithError<U> = new ResultWithError();
        result.errors = this.errors;
        result.result = this.result;
        return result;
    }
}

/**
 * Extracts the error or void type from a given result type.
 * If the provided type `T` is `ResultWithError`, it extracts the error type.
 * If `T` is `VoidWithError`, it returns `void`.
 * Otherwise, it returns `T`.
 * @template T The input type to extract the error or void from.
 * @template U The default type if `T` is not a `ResultWithError`.
 */
@Storybook({
    prefix: "Error"
})
export type ExtractFromError<T, U = any> = T extends ResultWithError<infer U, any> ? U : T extends VoidWithError ? void : T;