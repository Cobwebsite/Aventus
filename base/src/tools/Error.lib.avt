import type { Enum } from "./Enum.lib.avt";

export class GenericError<T extends (number | Enum) = number> {
    /**
     * Code for the error
     */
    public code: T;
    /**
     * Description of the error
     */
    public message: string;

    public details: any[] = [];

    public constructor(code: T, message: string) {
        this.code = code;
        this.message = message;
    }
}

export class VoidWithError<T extends GenericError = GenericError> {

    /**
     * Determine if the action is a success
     */
    public get success(): boolean {
        return this.errors.length == 0;
    }
    /**
     * List of errors
     */
    public errors: T[] = [];
}
export class ResultWithError<U, T extends GenericError = GenericError> extends VoidWithError<T> {

    /**
     * Result
     */
    public result: U | undefined;
}
