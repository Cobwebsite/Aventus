import { Watcher } from "../lib/Watcher.lib.avt";

/**
 * Compare two objects for equality, recursively checking nested arrays, objects, and dates.
 * @param {*} obj1 The first object to compare.
 * @param {*} obj2 The second object to compare.
 * @returns {boolean} Returns true if the objects are considered equal, otherwise returns false.
 */
@Storybook({
    prefix: "Tools"
})
export function compareObject(obj1, obj2): boolean {
    if(Array.isArray(obj1)) {
        // array
        if(!Array.isArray(obj2)) {
            return false;
        }
        obj2 = obj2.slice();
        if(obj1.length !== obj2.length) {
            return false;
        }
        for(let i = 0; i < obj1.length; i++) {
            let foundElement = false;
            for(let j = 0; j < obj2.length; j++) {
                if(compareObject(obj1[i], obj2[j])) {
                    obj2.splice(j, 1);
                    foundElement = true;
                    break;
                }
            }
            if(!foundElement) {
                // can't find entry in obj2
                return false;
            }
        }
        // all entries founded
        return true;
    } else if(typeof obj1 === 'object' && obj1 !== undefined && obj1 !== null) {
        // object
        if(typeof obj2 !== 'object' || obj2 === undefined || obj2 === null) {
            return false;
        }
        if(obj1 instanceof HTMLElement || obj2 instanceof HTMLElement) {
            return obj1 == obj2;
        }
        if(obj1 instanceof Date || obj2 instanceof Date) {
            return obj1.toString() === obj2.toString();
        }
        obj1 = Watcher.extract(obj1);
        obj2 = Watcher.extract(obj2);

        if(obj1 instanceof Map && obj2 instanceof Map) {
            if(obj1.size != obj2.size) {
                return false;
            }
            const keys = obj1.keys();
            for(let key in keys) {
                // obj2 has key ?
                if(!obj2.has(key)) {
                    return false;
                }
                // object values are equals
                if(!compareObject(obj1.get(key), obj2.get(key))) {
                    return false;
                }
            }
            return true;
        }
        else {
            // not same keys length
            if(Object.keys(obj1).length !== Object.keys(obj2).length) {
                return false;
            }
            for(let key in obj1) {
                // obj2 has key ?
                if(!(key in obj2)) {
                    return false;
                }
                // object values are equals
                if(!compareObject(obj1[key], obj2[key])) {
                    return false;
                }
            }
            return true;
        }
    } else {
        // string
        return obj1 === obj2;
    }
}

/**
 * Retrieves the value from an object based on the provided path.
 * @param {string} path The path to the desired value, using dot notation. For example, "a.b.c" for obj[a][b][c].
 * @param {*} obj The object from which to retrieve the value.
 * @returns {*} Returns the value at the specified path in the object. If the path is invalid or the value does not exist, returns undefined.
 */
@Storybook({
    prefix: "Tools"
})
export function getValueFromObject(path: string, obj: any) {
    // Convert bracket notation to dot notation
    path = path.replace(/\[(.*?)\]/g, '.$1');

    // If path is empty, return the entire object
    if(path == "") {
        return obj;
    }

    const val = (key) => {
        if(obj instanceof Map) {
            return obj.get(key);
        }
        return obj[key];
    };

    // Split the path into individual keys
    let splitted = path.split(".");

    // Traverse the object along the path
    for(let i = 0; i < splitted.length - 1; i++) {
        let split = splitted[i];
        let value = val(split);
        // If the current segment of the path does not exist in the object or is not an object, return undefined
        if(!value || typeof value !== 'object') {
            return undefined;
        }
        obj = value;
    }
    if(!obj || typeof obj !== 'object') {
        return undefined;
    }
    // Return the value at the last segment of the path
    return val(splitted[splitted.length - 1]);
}

/**
 * Sets the value in an object based on the provided path.
 * @param {string} path The path where the value should be set, using dot notation. For example, "a.b.c" for obj[a][b][c].
 * @param {*} obj The object in which to set the value.
 * @param {*} value The value to set.
 */
@Storybook({
    prefix: "Tools"
})
export function setValueToObject(path: string, obj: any, value: any) {
    // Convert bracket notation to dot notation
    path = path.replace(/\[(.*?)\]/g, '.$1');

    const val = (key) => {
        if(obj instanceof Map) {
            return obj.get(key);
        }
        return obj[key];
    };


    // Split the path into individual keys
    let splitted = path.split(".");

    // Traverse the object along the path, creating nested objects if necessary
    for(let i = 0; i < splitted.length - 1; i++) {
        let split = splitted[i];
        let value = val(split);
        if(!value) {
            obj[split] = {};
            value = obj[split];
        }
        obj = value;
    }

    // Set the value at the last segment of the path
    if(obj instanceof Map) {
        obj.set(splitted[splitted.length - 1], value);
    }
    else {
        obj[splitted[splitted.length - 1]] = value;
    }

}


@Storybook({
    prefix: "Tools"
})
export function isClass(v: any): boolean {
    return typeof v === 'function' && /^\s*class\s+/.test(v.toString());
}