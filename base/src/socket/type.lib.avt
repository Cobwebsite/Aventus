import { WsRoute } from "./WsRoute.lib.avt";
import { WsEndPoint } from "./WsEndPoint.lib.avt";
import { MixProto } from "../tools/MergePrototype.lib.avt";
import { WsEvent } from "./WsEvent.lib.avt";

export interface WsRouterOptions {
    url: string;
}

// export type WsRouteType = new (options: RouterOptions) => HttpRoute;
export type WsRouteType = abstract new (...args: any[]) => WsRoute;
export type WsEventType = abstract new (...args: any[]) => WsEvent;
export type WsEndPointType = (abstract new (...args: any[]) => WsEndPoint);


export type MergeWsRoutesType<T> = T extends readonly ({ type: WsRouteType, path?: string; } | WsRouteType)[] ?
    T extends readonly [infer T extends ({ type: WsRouteType, path?: string; } | WsRouteType), ...infer R extends readonly ({ type: WsRouteType, path?: string; } | WsRouteType)[]] ?
    T extends WsRouteType ? MixProto<MergeWsRoutesType<R>, T, ''> : T extends { type: WsRouteType, path?: string; } ? T['path'] extends string ? MixProto<MergeWsRoutesType<R>, T['type'], T['path']> : MixProto<MergeWsRoutesType<R>, T['type'], ''> : never : typeof WsRoute
    : never;

type ExtendWsRouteType<T, U extends string, V extends string | undefined> =
    T extends Aventus.WsRouteType ?
    U extends "" ? { type: T, path: V; } : V | undefined extends "" ? { type: T, path: ""; } : { type: T, path: Aventus.Join<[U, V], ".">; } :
    never;

export type ExtendWsRoutesType<T, U extends string> = T extends readonly ({ type: Aventus.WsRouteType, path?: string; } | Aventus.WsRouteType)[] ?
    T extends readonly [infer T extends ({ type: Aventus.WsRouteType, path?: string; } | Aventus.WsRouteType), ...infer R extends readonly ({ type: Aventus.WsRouteType, path?: string; } | Aventus.WsRouteType)[]] ?
    T extends Aventus.WsRouteType ? [ExtendWsRouteType<T, U, ''>, ...ExtendWsRoutesType<R, U>] : T extends { type: Aventus.WsRouteType, path?: string; } ? [ExtendWsRouteType<T['type'], U, T['path']>, ...ExtendWsRoutesType<R, U>] : never
    : []
    : never;


export type MergeWsEventsType<T> = T extends readonly ({ type: WsEventType, path?: string; } | WsEventType)[] ?
    T extends readonly [infer T extends ({ type: WsEventType, path?: string; } | WsEventType), ...infer R extends readonly ({ type: WsEventType, path?: string; } | WsEventType)[]] ?
    T extends WsEventType ? MixProto<MergeWsEventsType<R>, T, ''> : T extends { type: WsEventType, path?: string; } ? T['path'] extends string ? MixProto<MergeWsEventsType<R>, T['type'], T['path']> : MixProto<MergeWsEventsType<R>, T['type'], ''> : never : typeof WsEvent
    : never;

type ExtendWsEventType<T, U extends string, V extends string | undefined> =
    T extends Aventus.WsEventType ?
    U extends "" ? { type: T, path: V; } : V | undefined extends "" ? { type: T, path: ""; } : { type: T, path: Aventus.Join<[U, V], ".">; } :
    never;

export type ExtendWsEventsType<T, U extends string> = T extends readonly ({ type: Aventus.WsEventType, path?: string; } | Aventus.WsEventType)[] ?
    T extends readonly [infer T extends ({ type: Aventus.WsEventType, path?: string; } | Aventus.WsEventType), ...infer R extends readonly ({ type: Aventus.WsEventType, path?: string; } | Aventus.WsEventType)[]] ?
    T extends Aventus.WsEventType ? [ExtendWsEventType<T, U, ''>, ...ExtendWsEventsType<R, U>] : T extends { type: Aventus.WsEventType, path?: string; } ? [ExtendWsEventType<T['type'], U, T['path']>, ...ExtendWsEventsType<R, U>] : never
    : []
    : never;

