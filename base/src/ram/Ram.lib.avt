import { RamError, RamErrorCode, ResultRamWithError, VoidRamWithError } from "./Error.lib.avt";
import { type ResultWithError, VoidWithError } from "../tools/Error.lib.avt";
import { Json, type JsonFromOptions } from "../tools/Json.lib.avt";
import { ActionGuard } from "../tools/Mutex.lib.avt";

@Storybook({
    prefix: "Ram"
})
export interface IRamData { }
@Storybook({
    prefix: "Ram"
})
export interface IRam { }
@Storybook({
    prefix: "Ram"
})
export type KeysObject<T> = { [Key in keyof T]?: any; };
@Storybook({
    prefix: "Ram"
})
export interface IRamAction<T> {
    update(newData: KeysObject<T>): Promise<this | undefined>;
    updateWithError(newData: KeysObject<T>): Promise<ResultRamWithError<this>>;
    onUpdate(callback: (item: this) => void): void;
    offUpdate(callback: (item: this) => void): void;
    delete(): Promise<void>;
    deleteWithError(): Promise<VoidRamWithError>;
    onDelete(callback: (item: this) => void): void;
    offDelete(callback: (item: this) => void): void;
}
@Storybook({
    prefix: "Ram"
})
export type RamItem<T extends IRamData> = T & IRamAction<T>;
@Storybook({
    prefix: "Ram"
})
interface RamSubscribers<T> {
    created: ((item: T) => void)[];
    updated: ((item: T) => void)[];
    deleted: ((item: T) => void)[];
}
@Storybook({
    prefix: "Ram"
})
export abstract class GenericRam<Index, T extends IRamData, U extends T = T> implements IRam {
    /**
     * The current namespace
     */
    public static Namespace: string = "";
    // public static get Namespace(): string { return ""; }
    /**
     * Get the unique type for the data. Define it as the namespace + class name
     */
    public static get Fullname(): string { return this.Namespace + "." + this.name; }


    private subscribers: RamSubscribers<RamItem<U>> = {
        created: [],
        updated: [],
        deleted: [],
    };
    protected recordsSubscribers: Map<Index, RamSubscribers<RamItem<U>>> = new Map();
    /**
     * List of stored item by index key
     */
    protected records: Map<Index, RamItem<U>> = new Map();

    protected actionGuard: ActionGuard = new ActionGuard();

    protected constructor() {
        if(this.constructor == GenericRam) {
            throw "can't instanciate an abstract class";
        }
    }

    //#region index key
    /**
     * Define the field where the index key is location
     * Example : 'id';
     */
    public abstract defineIndexKey(): keyof T;

    /**
     * Get item id
     */
    @BindThis()
    public getIdWithError(item: KeysObject<T> | T): ResultRamWithError<Index> {
        let action: ResultRamWithError<Index> = new ResultRamWithError();
        let idTemp = item[this.defineIndexKey()];
        if(idTemp !== undefined) {
            action.result = idTemp;
        }
        else {
            action.errors.push(new RamError(RamErrorCode.noId, "no key found for item"));
        }
        return action;
    }
    /**
     * Get item id
     */
    @BindThis()
    public getId(item: KeysObject<T> | T): Index {
        let result = this.getIdWithError(item);
        if(result.success) {
            return result.result as Index;
        }
        throw 'no key found for item';
    }
    //#endregion	

    //#region tool
    /**
     * Prevent adding Watch element
     */
    protected removeWatch<X>(element: X): X {
        let byPass = element as any;
        if(byPass.__isProxy) {
            return byPass.getTarget();
        }
        return element;
    }

    /**
     * Add function update, onUpdate, offUpdate, delete, onDelete, offDelete
     */
    protected addRamAction<B extends (new (...args: any[]) => IRamData) & { className?: string; }>(Base: B) {
        let that = this;
        return class ActionClass extends Base implements IRamAction<T> {
            public static override get className(): string {
                return Base.className || Base.name;
            }
            public get className(): string {
                return Base.className || Base.name;
            }
            public async update(newData: KeysObject<T> = {}): Promise<this | undefined> {
                let id = that.getId(this);
                let oldData = that.records.get(id);
                if(oldData) {
                    that.mergeObject(oldData, newData, { replaceUndefinedWithKey: true });
                    let result = await that.update(oldData);
                    return result as any as this;
                }
                return undefined;
            }
            public async updateWithError(newData: KeysObject<T> = {}): Promise<ResultRamWithError<RamItem<this>>> {
                const result: ResultRamWithError<RamItem<this>> = new ResultRamWithError();
                let queryId = that.getIdWithError(this);
                if(!queryId.success || !queryId.result) {
                    result.errors = queryId.errors;
                    return result;
                }
                let oldData = that.records.get(queryId.result);
                if(oldData) {
                    that.mergeObject(oldData, newData, { replaceUndefinedWithKey: true });
                    let result = await that.updateWithError(oldData);
                    return result as any as ResultRamWithError<RamItem<this>>;
                }

                result.errors.push(new RamError(RamErrorCode.noItemInsideRam, "Can't find this item inside the ram"));
                return result;
            }
            public onUpdate(callback) {
                let id = that.getId(this);
                if(!that.recordsSubscribers.has(id)) {
                    that.recordsSubscribers.set(id, {
                        created: [],
                        updated: [],
                        deleted: []
                    });
                }
                let sub = that.recordsSubscribers.get(id);
                if(sub && !sub.updated.includes(callback)) {
                    sub.updated.push(callback);
                }
            }
            public offUpdate(callback) {
                let id = that.getId(this);
                let sub = that.recordsSubscribers.get(id);
                if(sub) {
                    let index = sub.updated.indexOf(callback);
                    if(index != -1) {
                        sub.updated.splice(index, 1);
                    }
                }
            }
            public async delete(): Promise<void> {
                let id = that.getId(this);
                await that.deleteById(id);
            }
            public async deleteWithError(): Promise<VoidRamWithError> {
                const result = new VoidRamWithError();
                let queryId = that.getIdWithError(this);
                if(!queryId.success || !queryId.result) {
                    result.errors = queryId.errors;
                    return result;
                }

                const queryDelete = await that.deleteByIdWithError(queryId.result);
                result.errors = queryDelete.errors;
                return result;
            }
            public onDelete(callback) {
                let id = that.getId(this);
                if(!that.recordsSubscribers.has(id)) {
                    that.recordsSubscribers.set(id, {
                        created: [],
                        updated: [],
                        deleted: []
                    });
                }
                let sub = that.recordsSubscribers.get(id);
                if(sub && !sub.deleted.includes(callback)) {
                    sub.deleted.push(callback);
                }
            }
            public offDelete(callback) {
                let id = that.getId(this);
                let sub = that.recordsSubscribers.get(id);
                if(sub) {
                    let index = sub.deleted.indexOf(callback);
                    if(index != -1) {
                        sub.deleted.splice(index, 1);
                    }
                }
            }
        };
    }

    protected abstract getTypeForData(objJson: KeysObject<T> | T): new () => U;
    /**
     * Transform the object into the object stored inside Ram
     */
    protected getObjectForRam(objJson: KeysObject<T> | T): RamItem<U> {
        let T = this.addRamAction(this.getTypeForData(objJson));
        let item = new T();
        this.mergeObject(item, objJson);
        return item;
    }

    /**
     * Add element inside Ram or update it. The instance inside the ram is unique and ll never be replaced
     */
    protected async addOrUpdateData(item: KeysObject<T>, result: ResultWithError<RamItem<T>>): Promise<'created' | 'updated' | null> {
        let resultTemp: 'created' | 'updated' | null = null;
        try {
            let idWithError = this.getIdWithError(item);
            if(idWithError.success && idWithError.result !== undefined) {
                let id = idWithError.result;
                if(this.records.has(id)) {
                    let uniqueRecord = this.records.get(id)!;
                    await this.beforeRecordSet(uniqueRecord);
                    this.mergeObject(uniqueRecord, item);
                    await this.afterRecordSet(uniqueRecord);
                    resultTemp = 'updated';
                }
                else {
                    let realObject = this.getObjectForRam(item);
                    await this.beforeRecordSet(realObject);
                    this.records.set(id, realObject);
                    await this.afterRecordSet(realObject);
                    resultTemp = 'created';
                }
                result.result = this.records.get(id);
            }
            else {
                result.errors = [...result.errors, ...idWithError.errors];
                resultTemp = null;
            }
        }
        catch(e) {
            result.errors.push(new RamError(RamErrorCode.unknow, e));
            resultTemp = null;
        }
        return resultTemp;
    }

    /**
     * Merge object and create real instance of class
     */
    protected mergeObject(item: T | undefined, objJson: KeysObject<T> | T, options?: JsonFromOptions) {
        if(!item) {
            return;
        }
        if(!options) {
            options = {
                replaceUndefined: true
            };
        }
        Json.classFromJson(item, objJson, options);
    }

    /**
     * Create or update the item
     */
    @BindThis()
    public async save(item: T, ...args: any[]): Promise<RamItem<U> | undefined> {
        let action = await this.saveWithError(item, ...args);
        if(action.success) {
            return action.result;
        }
        return undefined;
    }
    /**
     * Create or update the item
     */
    @BindThis()
    public async saveWithError(item: T, ...args: any[]): Promise<ResultRamWithError<RamItem<U>>> {
        let action: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
        let resultTemp = await this.getIdWithError(item);
        if(resultTemp.success && resultTemp.result !== undefined) {
            if(resultTemp.result) {
                return this.updateWithError(item, ...args);
            }
            else {
                return this.createWithError(item, ...args);
            }
        }
        else {
            action.errors = resultTemp.errors;
        }
        return action;
    }
    //#endregion

    //#region records operation
    protected async beforeRecordSet(item: RamItem<T>): Promise<void> { }
    protected async afterRecordSet(item: RamItem<T>): Promise<void> { }
    protected async beforeRecordDelete(item: RamItem<T>): Promise<void> { }
    protected async afterRecordDelete(item: RamItem<T>): Promise<void> { }
    //#endregion

    //#region listener
    protected publish(type: 'created' | 'updated' | 'deleted', data: RamItem<U>) {
        let callbacks = [...this.subscribers[type]];
        for(let callback of callbacks) {
            callback(data);
        }
        let sub = this.recordsSubscribers.get(this.getId(data));
        if(sub) {
            let localCallbacks = [...sub[type]];
            for(let localCallback of localCallbacks) {
                localCallback(data);
            }
        }
    }
    private subscribe(type: 'created' | 'updated' | 'deleted', cb: (item: RamItem<U>) => void) {
        if(!this.subscribers[type].includes(cb)) {
            this.subscribers[type].push(cb);
        }
    }
    private unsubscribe(type: 'created' | 'updated' | 'deleted', cb: (item: RamItem<U>) => void) {
        let index = this.subscribers[type].indexOf(cb);
        if(index != -1) {
            this.subscribers[type].splice(index, 1);
        }
    }
    /**
    * Add a callback that ll be triggered when a new item is stored
    */
    @BindThis()
    public onCreated(cb: (item: RamItem<U>) => void) {
        this.subscribe('created', cb);
    }
    /**
     * Remove a created callback
     */
    @BindThis()
    public offCreated(cb: (item: RamItem<U>) => void) {
        this.unsubscribe('created', cb);
    }
    /**
     * Add a callback that ll be triggered when an item is updated
     */
    @BindThis()
    public onUpdated(cb: (item: RamItem<U>) => void) {
        this.subscribe('updated', cb);
    }
    /**
     * Remove an updated callback
     */
    @BindThis()
    public offUpdated(cb: (item: RamItem<U>) => void) {
        this.unsubscribe('updated', cb);
    }
    /**
     * Add a callback that ll be triggered when an item is deleted
     */
    @BindThis()
    public onDeleted(cb: (item: RamItem<U>) => void) {
        this.subscribe('deleted', cb);
    }
    /**
     * Remove an deleted callback
     */
    @BindThis()
    public offDeleted(cb: (item: RamItem<U>) => void) {
        this.unsubscribe('deleted', cb);
    }

    //#endregion

    //#region get
    /**
     * Get an item by id if exist (alias for getById)
     */
    @BindThis()
    public async get(id: Index): Promise<RamItem<U> | undefined> {
        return await this.getById(id);
    };
    /**
     * Get an item by id if exist (alias for getById)
     */
    @BindThis()
    public async getWithError(id: Index): Promise<ResultRamWithError<RamItem<U>>> {
        return await this.getByIdWithError(id);
    };
    /**
     * Get an item by id if exist
     */
    @BindThis()
    public async getById(id: Index): Promise<RamItem<U> | undefined> {
        let action = await this.getByIdWithError(id);
        if(action.success) {
            return action.result;
        }
        return undefined;
    }

    /**
     * Get an item by id if exist
     */
    @BindThis()
    public async getByIdWithError(id: Index): Promise<ResultRamWithError<RamItem<U>>> {
        return this.actionGuard.run(['getByIdWithError', id], async () => {
            let action: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
            await this.beforeGetById(id, action);
            if(action.success) {
                if(this.records.has(id)) {
                    action.result = this.records.get(id);
                    await this.afterGetById(action);
                }
                else {
                    action.errors.push(new RamError(RamErrorCode.noItemInsideRam, "can't find the item " + id + " inside ram"));
                }
            }
            return action;
        });
    }
    /**
     * Trigger before getting an item by id
     */
    protected async beforeGetById(id: Index, result: ResultRamWithError<RamItem<U>>): Promise<void> { };
    /**
     * Trigger after getting an item by id
     */
    protected async afterGetById(result: ResultRamWithError<RamItem<U>>): Promise<void> { };

    /**
     * Get multiple items by ids
     */
    @BindThis()
    public async getByIds(ids: Index[]): Promise<RamItem<U>[]> {
        let result = await this.getByIdsWithError(ids);
        if(result.success) {
            return result.result ?? [];
        }
        return [];
    };
    /**
     * Get multiple items by ids
     */
    @BindThis()
    public async getByIdsWithError(ids: Index[]): Promise<ResultRamWithError<RamItem<U>[]>> {
        return this.actionGuard.run(['getByIdsWithError', ids], async () => {
            let action: ResultRamWithError<RamItem<U>[]> = new ResultRamWithError();
            action.result = [];
            await this.beforeGetByIds(ids, action);
            if(action.success) {
                action.result = [];
                for(let id of ids) {
                    let rec = this.records.get(id);
                    if(rec) {
                        action.result.push(rec);
                    }
                    else {
                        action.errors.push(new RamError(RamErrorCode.noItemInsideRam, "can't find the item " + id + " inside ram"));
                    }
                }
                if(action.success) {
                    await this.afterGetByIds(action);
                }
            }
            return action;
        });
    };
    /**
     * Trigger before getting a list of items by id
     */
    protected async beforeGetByIds(ids: Index[], result: ResultRamWithError<RamItem<U>[]>): Promise<void> { };
    /**
     * Trigger after getting a list of items by id
     */
    protected async afterGetByIds(result: ResultRamWithError<RamItem<U>[]>): Promise<void> { };

    /**
     * Get all elements inside the Ram
     */
    @BindThis()
    public async getAll(): Promise<Map<Index, RamItem<U>>> {
        let result = await this.getAllWithError();
        if(result.success) {
            return result.result ?? new Map();
        }
        return new Map();
    }
    /**
     * Get all elements inside the Ram
     */
    @BindThis()
    public async getAllWithError(): Promise<ResultRamWithError<Map<Index, RamItem<U>>>> {
        return this.actionGuard.run(['getAllWithError'], async () => {
            let action: ResultRamWithError<Map<Index, RamItem<U>>> = new ResultRamWithError();
            action.result = new Map();
            await this.beforeGetAll(action);
            if(action.success) {
                action.result = this.records;
                await this.afterGetAll(action);
            }
            return action;
        });
    }


    /**
     * Trigger before getting all items inside Ram
     */
    protected async beforeGetAll(result: ResultRamWithError<Map<Index, RamItem<U>>>): Promise<void> { };
    /**
     * Trigger after getting all items inside Ram
     */
    protected async afterGetAll(result: ResultRamWithError<Map<Index, RamItem<U>>>): Promise<void> { };
    /**
     * Get all elements inside the Ram 
     */
    @BindThis()
    public async getList(): Promise<RamItem<U>[]> {
        let data = await this.getAll();
        return Array.from(data.values());
    };
    /**
     * Get all elements inside the Ram 
     */
    @BindThis()
    public async getListWithError(): Promise<ResultRamWithError<RamItem<U>[]>> {
        let action: ResultRamWithError<RamItem<U>[]> = new ResultRamWithError();
        action.result = [];
        let result = await this.getAllWithError();
        if(result.success) {
            if(result.result) {
                action.result = Array.from(result.result.values());
            }
            else {
                action.result = [];
            }
        }
        else {
            action.errors = result.errors;
        }
        return action;
    }
    //#endregion

    //#region create
    /**
     * Create a list of items inside ram
     */
    @BindThis()
    public async createList(list: T[]): Promise<RamItem<U>[]> {
        let result = await this.createListWithError(list);
        return result.result ?? [];
    }
    /**
     * Create a list of items inside ram
     */
    @BindThis()
    public async createListWithError(list: T[]): Promise<ResultRamWithError<RamItem<U>[]>> {
        list = this.removeWatch(list);
        let action: ResultRamWithError<RamItem<U>[]> = new ResultRamWithError();
        action.result = [];
        await this.beforeCreateList(list, action);
        if(action.success) {
            if(action.result.length > 0) {
                list = action.result;
                action.result = [];
            }
            for(let item of list) {
                let resultItem = await this._create(item, true);
                if(resultItem.success && resultItem.result) {
                    action.result.push(resultItem.result);
                }
                else {
                    action.errors = [...action.errors, ...resultItem.errors];
                }
            }
            if(action.success) {
                await this.afterCreateList(action);
            }
        }

        return action;
    }
    /**
     * Create an item inside ram
     */
    @BindThis()
    public async create(item: T, ...args: any[]): Promise<RamItem<U> | undefined> {
        let action = await this.createWithError(item, args);
        if(action.success) {
            return action.result;
        }
        return undefined;
    }
    /**
     * Create an item inside ram
     */
    @BindThis()
    public async createWithError(item: T, ...args: any[]): Promise<ResultRamWithError<RamItem<U>>> {
        return await this._create(item, false);
    }
    private async _create(item: T, fromList: boolean): Promise<ResultRamWithError<RamItem<U>>> {
        item = this.removeWatch(item);
        return this.actionGuard.run(['_create', item], async () => {
            let action: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
            await this.beforeCreateItem(item, fromList, action);
            if(action.success) {
                if(action.result) { item = action.result; }
                let resultTemp = this.getIdWithError(item);
                if(resultTemp.success) {
                    await this.addOrUpdateData(item, action);
                    if(!action.success) {
                        return action;
                    }
                    await this.afterCreateItem(action, fromList);
                    if(!action.success) {
                        action.result = undefined;
                    }
                    else if(action.result) {
                        this.publish('created', action.result);
                    }
                }
                else {
                    action.errors = resultTemp.errors;
                }
            }
            return action;
        });
    }
    /**
     * Trigger before creating a list of items
     */
    protected async beforeCreateList(list: T[], result: ResultRamWithError<RamItem<U>[]>): Promise<void> {
    };
    /**
     * Trigger before creating an item
     */
    protected async beforeCreateItem(item: T, fromList: boolean, result: ResultRamWithError<RamItem<U>>): Promise<void> {
    };
    /**
     * Trigger after creating an item
     */
    protected async afterCreateItem(result: ResultRamWithError<RamItem<U>>, fromList: boolean): Promise<void> {
    };
    /**
     * Trigger after creating a list of items
     */
    protected async afterCreateList(result: ResultRamWithError<RamItem<U>[]>): Promise<void> {
    };

    //#endregion

    //#region update
    /**
     * Update a list of items inside ram
     */
    @BindThis()
    public async updateList(list: T[]): Promise<RamItem<U>[]> {
        let result = await this.updateListWithError(list);
        return result.result ?? [];
    };
    /**
     * Update a list of items inside ram
     */
    @BindThis()
    public async updateListWithError(list: T[]): Promise<ResultRamWithError<RamItem<U>[]>> {
        list = this.removeWatch(list);
        let action: ResultRamWithError<RamItem<U>[]> = new ResultRamWithError();
        action.result = [];
        await this.beforeUpdateList(list, action);
        if(action.success) {
            if(action.result.length > 0) {
                list = action.result;
                action.result = [];
            }
            for(let item of list) {
                let resultItem = await this._update(item, true);
                if(resultItem.success && resultItem.result) {
                    action.result.push(resultItem.result);
                }
                else {
                    action.errors = [...action.errors, ...resultItem.errors];
                }
            }
            if(action.success) {
                await this.afterUpdateList(action);
            }
        }
        return action;
    };
    /**
     * Update an item inside ram
     */
    @BindThis()
    public async update(item: T, ...args: any[]): Promise<RamItem<U> | undefined> {
        let action = await this.updateWithError(item, args);
        if(action.success) {
            return action.result;
        }
        return undefined;
    }
    /**
     * Update an item inside ram
     */
    @BindThis()
    public async updateWithError(item: T, ...args: any[]): Promise<ResultRamWithError<RamItem<U>>> {
        return await this._update(item, false);
    }
    private async _update(item: T, fromList: boolean): Promise<ResultRamWithError<RamItem<U>>> {
        item = this.removeWatch(item);
        return this.actionGuard.run(['_update', item], async () => {
            let action: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
            let resultTemp = await this.getIdWithError(item);
            if(resultTemp.success && resultTemp.result !== undefined) {
                let key = resultTemp.result;
                if(this.records.has(key)) {
                    if(this.records.get(key) == item) {
                        console.warn("You are updating the same item. You should clone the object first to avoid weird effect");
                    }
                    await this.beforeUpdateItem(item, fromList, action);
                    if(!action.success) {
                        return action;
                    }
                    if(action.result) {
                        item = action.result;
                    }
                    await this.addOrUpdateData(item, action);
                    if(!action.success) {
                        return action;
                    }
                    await this.afterUpdateItem(action, fromList);
                    if(!action.success) {
                        action.result = undefined;
                    }
                    else if(action.result) {
                        this.publish('updated', action.result);
                    }
                }
                else {
                    action.errors.push(new RamError(RamErrorCode.noItemInsideRam, "can't update the item " + key + " because it wasn't found inside ram"));
                }
            }
            else {
                action.errors = resultTemp.errors;
            }

            return action;
        });
    };
    /**
     * Trigger before updating a list of items
     */
    protected async beforeUpdateList(list: T[], result: ResultRamWithError<RamItem<U>[]>): Promise<void> {
    };
    /**
    * Trigger before updating an item
    */
    protected async beforeUpdateItem(item: T, fromList: boolean, result: ResultRamWithError<RamItem<U>>): Promise<void> {
    };
    /**
     * Trigger after updating an item
     */
    protected async afterUpdateItem(result: ResultRamWithError<RamItem<U>>, fromList: boolean): Promise<void> {
    };
    /**
     * Trigger after updating a list of items
     */
    protected async afterUpdateList(result: ResultRamWithError<RamItem<U>[]>): Promise<void> {
    };


    //#endregion

    //#region delete
    /**
     * Delete a list of items inside ram
     */
    @BindThis()
    public async deleteList(list: T[]): Promise<RamItem<U>[]> {
        let result = await this.deleteListWithError(list);
        return result.result ?? [];
    };
    /**
     * Delete a list of items inside ram
     */
    @BindThis()
    public async deleteListWithError(list: T[]): Promise<ResultRamWithError<RamItem<U>[]>> {
        list = this.removeWatch(list);
        let action: ResultRamWithError<RamItem<U>[]> = new ResultRamWithError();
        action.result = [];
        let deleteResult = new VoidWithError();
        await this.beforeDeleteList(list, deleteResult);
        if(!deleteResult.success) {
            action.errors = deleteResult.errors;
        }
        for(let item of list) {
            let resultItem = await this._delete(item, true);
            if(resultItem.success && resultItem.result) {
                action.result.push(resultItem.result);
            }
            else {
                action.errors = [...action.errors, ...resultItem.errors];
            }
        }
        if(action.success) {
            await this.afterDeleteList(action);
        }
        return action;
    };
    /**
     * Delete an item inside ram
     */
    @BindThis()
    public async delete(item: T, ...args: any[]): Promise<RamItem<U> | undefined> {
        let action = await this.deleteWithError(item, args);
        if(action.success) {
            return action.result;
        }
        return undefined;
    };
    /**
    * Delete an item inside ram
    */
    @BindThis()
    public async deleteWithError(item: T, ...args: any[]): Promise<ResultRamWithError<RamItem<U>>> {
        return await this._delete(item, false);
    };
    /**
     * Delete an item by id inside ram
     */
    @BindThis()
    public async deleteById(id: Index): Promise<RamItem<U> | undefined> {
        let action = await this.deleteByIdWithError(id);
        if(action.success) {
            return action.result;
        }
        return undefined;
    }
    /**
    * Delete an item by id inside ram
    */
    @BindThis()
    public async deleteByIdWithError(id: Index): Promise<ResultRamWithError<RamItem<U>>> {
        let item = this.records.get(id);
        if(item) {
            return await this._delete(item, false);
        }
        let result: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
        result.errors.push(new RamError(RamErrorCode.noItemInsideRam, "can't delete the item " + id + " because it wasn't found inside ram"));
        return result;
    }
    private async _delete(item: T, fromList: boolean): Promise<ResultRamWithError<RamItem<U>>> {
        item = this.removeWatch(item);
        return this.actionGuard.run(['_delete', item], async () => {
            let action: ResultRamWithError<RamItem<U>> = new ResultRamWithError();
            let resultTemp = await this.getIdWithError(item);
            if(resultTemp.success && resultTemp.result) {
                let key = resultTemp.result;
                let oldItem = this.records.get(key);
                if(oldItem) {
                    let deleteResult = new VoidWithError();
                    await this.beforeDeleteItem(oldItem, fromList, deleteResult);
                    if(!deleteResult.success) {
                        action.errors = deleteResult.errors;
                        return action;
                    }
                    this.beforeRecordDelete(oldItem);
                    this.records.delete(key);
                    this.afterRecordDelete(oldItem);
                    action.result = oldItem;
                    await this.afterDeleteItem(action, fromList);
                    if(!action.success) {
                        action.result = undefined;
                    }
                    else {
                        this.publish('deleted', action.result);
                    }
                    this.recordsSubscribers.delete(key);
                }
                else {
                    action.errors.push(new RamError(RamErrorCode.noItemInsideRam, "can't delete the item " + key + " because it wasn't found inside ram"));
                }
            }
            else {
                action.errors = resultTemp.errors;
            }
            return action;
        });
    }
    /**
     * Trigger before deleting a list of items
     */
    protected async beforeDeleteList(list: T[], result: VoidWithError): Promise<void> { };
    /**
     * Trigger before deleting an item
     */
    protected async beforeDeleteItem(item: T, fromList: boolean, result: VoidWithError): Promise<void> { };
    /**
     * Trigger after deleting an item
     */
    protected async afterDeleteItem(result: ResultRamWithError<RamItem<U>>, fromList: boolean): Promise<void> { };
    /**
     * Trigger after deleting a list of items
     */
    protected async afterDeleteList(result: ResultRamWithError<RamItem<U>[]>): Promise<void> { }
    //#endregion

}

/**
 * Default Ram with number as Index
 */
@Storybook({
    prefix: "Ram"
})
export abstract class Ram<T extends IRamData, U extends T = T> extends GenericRam<number, T, U> {

}
