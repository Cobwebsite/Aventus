// import { Ram, GenericRam, KeysObject, RamItem } from "./Ram.lib.avt";
// import { IData } from "../data/IData.data.avt";
// import { RamError, RamErrorCode, ResultRamWithError } from "./Error.lib.avt";
// import { Socket } from "../socket/Socket.lib.avt";
// import { SocketRoute } from "../socket/ISocket.lib.avt";
// import { VoidWithError } from "../tools/Error.lib.avt";


// export interface RamWsRoutes {
//     get: RamWsRoute;
//     getAll: RamWsRoute,
//     create: RamWsRoute,
//     created: RamWsRoute,
//     update: RamWsRoute,
//     updated: RamWsRoute,
//     delete: RamWsRoute,
//     deleted: RamWsRoute;
// }
// export interface RamWsRoute {
//     request: string,
//     multiple: string,
//     success: string,
//     error: string;
// }

// export interface RamWsCallback<T> {
//     channel: string,
//     callback: (response: { data?: KeysObject<T>[]; }) => void;
// }
// export abstract class GenericRamWs<Index, T extends IData> extends GenericRam<Index, T> {
//     private wsRoutes: RamWsRoutes;
//     private ws: Socket;
//     private getAllDone: boolean = false;


//     protected constructor() {
//         super();
//         if(this.constructor == GenericRamWs) {
//             throw "can't instanciate an abstract class";
//         }
//         this.ws = this.getWebSocket();
//         this.wsRoutes = this.createRoutes();
//         this.addSocketCallback();
//     }

//     /**
//      * Get the socket within the RAM is binded
//      */
//     protected abstract getWebSocket(): Socket;

//     /**
//      * Get the object name to create all messages
//      * This name **should not** end with a /
//      */
//     protected abstract getWebSocketRoute(): string;


//     protected createRoutes(): RamWsRoutes {
//         const socketActions = {
//             get: "get",
//             getAll: "get/all",
//             create: "create",
//             created: "created",
//             update: "update",
//             updated: "updated",
//             delete: "delete",
//             deleted: "deleted"
//         };
//         let temp: any = {};
//         let wsRouteBase = this.getWebSocketRoute();
//         if(wsRouteBase.endsWith("/")) {
//             wsRouteBase = wsRouteBase.slice(0, -1);
//         }
//         for(const [key, name] of Object.entries(socketActions)) {
//             temp[key] = {
//                 request: `${wsRouteBase}/${name}`,
//                 multiple: `${wsRouteBase}/${name}/multiple`,
//                 success: `${wsRouteBase}/${name}/success`,
//                 error: `${wsRouteBase}/${name}/error`,
//             };
//         }
//         return temp;
//     }

//     protected addSocketCallback() {
//         let createdRoute: RamWsCallback<T> = {
//             channel: this.wsRoutes.created.request,
//             callback: response => {
//                 if(response.data) {
//                     for(let obj of response.data) {
//                         let id = this.getId(obj);
//                         if(id !== undefined) {
//                             let result: ResultRamWithError<RamItem<T>> = new ResultRamWithError();
//                             this.addOrUpdateData(obj, result);
//                             if(result.success) {
//                                 let item = this.records.get(id);
//                                 if(item) {
//                                     this.publish('created', item);
//                                 }
//                             }
//                         }

//                     }
//                 }
//             }
//         };
//         this.addRoute(createdRoute);

//         let updatedRoute: RamWsCallback<T> = {
//             channel: this.wsRoutes.updated.request,
//             callback: response => {
//                 if(response.data) {
//                     for(let newData of response.data) {
//                         let id = this.getId(newData);
//                         if(id !== undefined) {
//                             let result: ResultRamWithError<RamItem<T>> = new ResultRamWithError();
//                             if(this.records.has(id)) {
//                                 this.addOrUpdateData(newData, result);
//                                 if(result.success) {
//                                     let item = this.records.get(id);
//                                     if(item) {
//                                         this.publish('updated', item);
//                                     }
//                                 }
//                             }
//                             else {
//                                 this.addOrUpdateData(newData, result);
//                                 if(result.success) {
//                                     let item = this.records.get(id);
//                                     if(item) {
//                                         this.publish('created', item);
//                                     }
//                                 }
//                             }
//                         }
//                     }
//                 }
//             }
//         };
//         this.addRoute(updatedRoute);

//         let deletedRoute: RamWsCallback<T> = {
//             channel: this.wsRoutes.deleted.request,
//             callback: response => {
//                 if(response.data) {
//                     for(let data of response.data) {
//                         let id = this.getId(data);
//                         if(this.records.has(id)) {
//                             let oldData = this.records.get(id);
//                             this.records.delete(id);
//                             if(oldData) {
//                                 this.publish('deleted', oldData);
//                             }
//                         }
//                     }
//                 }
//             }
//         };
//         this.addRoute(deletedRoute);
//     }


//     //#region send / receive msg
//     /**
//      * Send a msg through the websocket
//      */
//     protected sendMsg(route: string, params: { [key: string]: any; }, callbacks: { [key: string]: (data: any) => void; }): void {
//         this.ws.sendMessageAndWait(route, params, callbacks);
//     }

//     private uniqueMsgWaiting: { [key: string]: { [key: string]: ((data: any) => void)[]; }; } = {};
//     /**
//      * Send a unique msg through the websocket and wait answer
//      */
//     protected sendUniqueMsg(route: string, params: { [key: string]: any; }, callbacks: { [key: string]: (data: any) => void; }): void {
//         let uniqueKey = route + JSON.stringify(params);
//         if(this.uniqueMsgWaiting[uniqueKey]) {
//             for(let name in callbacks) {
//                 if(this.uniqueMsgWaiting[uniqueKey][name]) {
//                     this.uniqueMsgWaiting[uniqueKey][name].push(callbacks[name]);
//                 }
//                 else {
//                     this.uniqueMsgWaiting[uniqueKey][name] = [callbacks[name]];
//                 }
//             }
//         }
//         else {
//             let callbacksToAdd: { [key: string]: (data: any) => void; } = {};
//             const createCallback = (name: string) => {
//                 callbacksToAdd[name] = (data) => {
//                     for(let fct of this.uniqueMsgWaiting[uniqueKey][name]) {
//                         fct(data);
//                     }
//                     delete this.uniqueMsgWaiting[uniqueKey];
//                 };
//             };
//             this.uniqueMsgWaiting[uniqueKey] = {};
//             for(let name in callbacks) {
//                 createCallback(name);
//                 this.uniqueMsgWaiting[uniqueKey][name] = [callbacks[name]];
//             }
//             this.ws.sendMessageAndWait(route, params, callbacksToAdd);
//         }
//     }
//     private addRoute(newRoute: SocketRoute) {
//         this.ws.addRoute(newRoute);
//     }
//     //#endregion

//     //#region get
//     protected override beforeGetById(id: Index, result: ResultRamWithError<T>): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             if(this.records.has(id)) {
//                 resolve();
//             }
//             else {
//                 this.sendUniqueMsg(this.wsRoutes.get.request, {
//                     [this.defineIndexKey()]: id
//                 }, {
//                     [this.wsRoutes.get.success]: (response: { data: KeysObject<T>; }) => {
//                         if(response.data) {
//                             let resultTemp: ResultRamWithError<RamItem<T>> = new ResultRamWithError();
//                             this.addOrUpdateData(response.data, resultTemp);
//                             if(!resultTemp.success) {
//                                 result.errors = [...result.errors, ...resultTemp.errors];
//                             }
//                         }
//                         resolve();
//                     },
//                     [this.wsRoutes.get.error]: response => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             }
//         });
//     }
//     protected override beforeGetByIds(ids: Index[], result: ResultRamWithError<T[]>): Promise<void> {
//         return new Promise((resolve, reject) => {
//             let missingIds: Index[] = [];
//             for(let id of ids) {
//                 if(!this.records.has(id)) {
//                     missingIds.push(id);
//                 }
//             }
//             if(missingIds.length > 0) {
//                 this.sendUniqueMsg(this.wsRoutes.get.multiple, {
//                     [this.defineIndexKey()]: ids
//                 }, {
//                     [this.wsRoutes.get.success]: (response: { data: KeysObject<T>[]; }) => {
//                         if(response.data) {
//                             for(let item of response.data) {
//                                 let resultTemp: ResultRamWithError<RamItem<T>> = new ResultRamWithError();
//                                 this.addOrUpdateData(item, resultTemp);
//                                 if(!resultTemp.success) {
//                                     result.errors = [...result.errors, ...resultTemp.errors];
//                                 }
//                             }
//                         }
//                         resolve();
//                     },
//                     [this.wsRoutes.get.error]: response => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             } else {
//                 resolve();
//             }
//         });
//     }
//     protected override beforeGetAll(result: ResultRamWithError<Map<Index, RamItem<T>>>): Promise<void> {
//         return new Promise((resolve, reject) => {
//             if(this.getAllDone) {
//                 resolve();
//             } else {
//                 this.sendUniqueMsg(this.wsRoutes.getAll.request, {}, {
//                     [this.wsRoutes.getAll.success]: (response: { data: KeysObject<T>[]; }) => {
//                         if(response.data) {
//                             this.getAllDone = true;
//                             for(let item of response.data) {
//                                 let resultTemp: ResultRamWithError<RamItem<T>> = new ResultRamWithError();
//                                 this.addOrUpdateData(item, resultTemp);
//                                 if(!resultTemp.success) {
//                                     result.errors = [...result.errors, ...resultTemp.errors];
//                                 }
//                             }
//                         }
//                         resolve();
//                     },
//                     [this.wsRoutes.getAll.error]: response => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             }
//         });
//     }
//     //#endregion

//     //#region create
//     protected override beforeCreateItem(item: T, fromList: boolean, result: ResultRamWithError<RamItem<T>>): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             if(!fromList) {
//                 this.sendMsg(this.wsRoutes.create.request, item, {
//                     [this.wsRoutes.create.success]: (response: { created: KeysObject<RamItem<T>>[]; }) => {
//                         let element = response.created[0];
//                         result.result = this.getObjectForRam(element);
//                         resolve();
//                     },
//                     [this.wsRoutes.create.error]: (response) => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             }
//             else {
//                 resolve();
//             }
//         });
//     }
//     protected override beforeCreateList(list: T[], result: ResultRamWithError<RamItem<T>[]>): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             this.sendMsg(this.wsRoutes.create.multiple, list, {
//                 [this.wsRoutes.create.success]: (response: { created: KeysObject<T>[]; }) => {
//                     result.result = [];
//                     for(let element of response.created) {
//                         result.result.push(this.getObjectForRam(element));
//                     }
//                     resolve();
//                 },
//                 [this.wsRoutes.create.error]: response => {
//                     result.errors.push(new RamError(RamErrorCode.unknow, response));
//                     resolve();
//                 }
//             });
//         });
//     }
//     //#endregion

//     //#region update
//     protected override beforeUpdateItem(item: T, fromList: boolean, result: ResultRamWithError<RamItem<T>>): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             if(!fromList) {
//                 this.sendMsg(this.wsRoutes.update.request, item, {
//                     [this.wsRoutes.update.success]: (response: { updated: KeysObject<T>[]; }) => {
//                         let element = response.updated[0];
//                         result.result = this.getObjectForRam(element);
//                         resolve();
//                     },
//                     [this.wsRoutes.update.error]: response => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             }
//             else {
//                 resolve();
//             }
//         });
//     }
//     protected override beforeUpdateList(list: T[], result: ResultRamWithError<RamItem<T>[]>): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             this.sendMsg(this.wsRoutes.update.multiple, list, {
//                 [this.wsRoutes.update.success]: (response: { updated: KeysObject<T>[]; }) => {
//                     result.result = [];
//                     for(let element of response.updated) {
//                         result.result.push(this.getObjectForRam(element));
//                     }
//                     resolve();
//                 },
//                 [this.wsRoutes.update.error]: response => {
//                     result.errors.push(new RamError(RamErrorCode.unknow, response));
//                     resolve();
//                 }
//             });
//         });
//     }
//     //#endregion

//     //#region delete
//     protected override beforeDeleteItem(item: T, fromList: boolean, result: VoidWithError): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             if(!fromList) {
//                 this.sendMsg(this.wsRoutes.delete.request, item, {
//                     [this.wsRoutes.delete.success]: (response: { deleted: KeysObject<T>[]; }) => {
//                         resolve();
//                     },
//                     [this.wsRoutes.delete.error]: response => {
//                         result.errors.push(new RamError(RamErrorCode.unknow, response));
//                         resolve();
//                     }
//                 });
//             }
//             else {
//                 resolve();
//             }
//         });
//     }
//     protected override beforeDeleteList(list: T[], result: VoidWithError): Promise<void> {
//         return new Promise<void>((resolve, reject) => {
//             this.sendMsg(this.wsRoutes.delete.multiple, list, {
//                 [this.wsRoutes.delete.success]: (response: { deleted: KeysObject<T>[]; }) => {
//                     resolve();
//                 },
//                 [this.wsRoutes.delete.error]: response => {
//                     result.errors.push(new RamError(RamErrorCode.unknow, response));
//                     resolve();
//                 }
//             });
//         });
//     }
//     //#endregion
// }

// export abstract class RamWs<T extends IData> extends GenericRamWs<number, T> {

// }