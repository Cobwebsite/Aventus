export class Style {
    private static instance: Style;
    public static noAnimation: CSSStyleSheet;
    private static defaultStyleSheets: { [name: string]: string; } = {
        "@default": `:host{display:inline-block;box-sizing:border-box}:host *{box-sizing:border-box}`,
    };

    public static store(name: string, content: string) {
        this.getInstance().store(name, content);
    }
    public static get(name: string): CSSStyleSheet {
        return this.getInstance().get(name);
    }
    public static load(name: string, url: string): Promise<void> {
        return this.getInstance().load(name, url);
    }

    private static getInstance(): Style {
        if(!this.instance) {
            this.instance = new Style();
        }
        return this.instance;
    }

    private constructor() {
        for(let name in Style.defaultStyleSheets) {
            this.store(name, Style.defaultStyleSheets[name]);
        }
        Style.noAnimation = new CSSStyleSheet();
        Style.noAnimation.replaceSync(`:host{-webkit-transition: none !important;-moz-transition: none !important;-ms-transition: none !important;-o-transition: none !important;transition: none !important;}:host *{-webkit-transition: none !important;-moz-transition: none !important;-ms-transition: none !important;-o-transition: none !important;transition: none !important;}`);
    }

    private stylesheets: Map<string, CSSStyleSheet> = new Map();

    public async load(name: string, url: string): Promise<void> {
        try {
            let style = this.stylesheets.get(name);
            if(!style || style.cssRules.length == 0) {
                let txt = await (await fetch(url)).text();
                this.store(name, txt);
            }
        }
        catch(e) {

        }
    }

    public store(name: string, content: string) {
        let style = this.stylesheets.get(name);
        if(!style) {
            const sheet = new CSSStyleSheet();
            sheet.replaceSync(content);
            this.stylesheets.set(name, sheet);
            return sheet;
        }
        else {
            style.replaceSync(content);
            return style;
        }
    }
    public get(name: string): CSSStyleSheet {
        let style = this.stylesheets.get(name);
        if(!style) {
            style = this.store(name, "");
        }
        return style;
    }
}