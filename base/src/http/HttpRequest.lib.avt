import { type HttpRouter } from "./HttpRouter.lib.avt";
import { ResultWithError, VoidWithError } from "../tools/Error.lib.avt";
import { HttpMethod } from "./HttpMethod.lib.avt";
import { HttpError, HttpErrorCode } from "./HttpError.lib.avt";
import { Converter } from "../tools/Converter.lib.avt";

@Storybook({
    prefix: "Http"
})
export class HttpRequest {
    private request: RequestInit;
    private url: string;
    public constructor(url: string, method: HttpMethod = HttpMethod.GET, body?: { [key: string | number]: any; } | FormData) {
        this.url = url;
        this.request = {};
        this.setMethod(method);
        this.prepareBody(body);
    }


    public setUrl(url: string) {
        this.url = url;
    }

    public toString(): string {
        return this.url + " : " + JSON.stringify(this.request);
    }

    public setBody(body: { [key: string | number]: any; } | FormData) {
        this.prepareBody(body);
    }
    public setMethod(method: HttpMethod) {
        this.request.method = method;
    }

    private objectToFormData(obj: { [key: string | number]: any; }, formData?: FormData, parentKey?: string): FormData {
        formData = formData || new FormData();
        let byPass = obj as any;
        if(byPass.__isProxy) {
            obj = byPass.getTarget();
        }
        const keys: string[] = obj.toJSON ? Object.keys(obj.toJSON()) : Object.keys(obj);
        for(let i = 0; i < keys.length; i++) {
            const key = keys[i];
            let value = obj[key];

            const newKey = parentKey ? `${parentKey}[${key}]` : key;

            if(value instanceof Date) {
                const offset = this[key].getTimezoneOffset() * 60000
                formData.append(newKey, new Date(this[key].getTime() - offset).toISOString());
            }
            else if(
                typeof value === 'object' && 
                value !== null && 
                !(value instanceof File)
            ) {
                if(Array.isArray(value)) {
                    // Handle array
                    for(let j = 0; j < value.length; j++) {
                        const arrayKey = `${newKey}[${j}]`;
                        this.objectToFormData({ [arrayKey]: value[j] }, formData);
                    }
                } else {
                    // Recursively handle nested object
                    this.objectToFormData(value, formData, newKey);
                }
            } else {
                // Add simple key-value pair to FormData
                if(value === undefined || value === null) {
                    value = "";
                }
                formData.append(newKey, value);
            }
        }

        return formData;
    }
    public jsonReplacer(key: string, value: any) {
        if(this[key] instanceof Date) {
            const offset = this[key].getTimezoneOffset() * 60000
            return new Date(this[key].getTime() - offset).toISOString();
        }
        return value;
    }
    private prepareBody(data?: { [key: string | number]: any; } | FormData) {
        if(!data) {
            return;
        }
        else if(data instanceof FormData) {
            this.request.body = data;
        }
        else {
            let useFormData = false;
            const analyseFormData = (obj: any) => {
                for(let key in obj) {
                    if(obj[key] instanceof File) {
                        useFormData = true;
                        break;
                    }
                    else if(Array.isArray(obj[key]) && obj[key].length > 0 && obj[key][0] instanceof File) {
                        useFormData = true;
                        break;
                    }
                    else if(typeof obj[key] == 'object' && !Array.isArray(obj[key]) && !(obj[key] instanceof Date)) {
                        analyseFormData(obj[key]);
                        if(useFormData) {
                            break;
                        }
                    }
                }
            };
            analyseFormData(data);

            if(useFormData) {
                this.request.body = this.objectToFormData(data);
            }
            else {
                this.request.body = JSON.stringify(data, this.jsonReplacer);
                this.setHeader("Content-Type", "Application/json");
            }
        }
    }

    public setHeader(name: string, value: string) {
        if(!this.request.headers) {
            this.request.headers = [];
        }
        (this.request.headers as [string, string][]).push([name, value]);
    }


    public async query(router?: HttpRouter): Promise<ResultWithError<Response>> {
        let result = new ResultWithError<Response>();
        try {
            const fullUrl = router ? router.options.url + this.url : this.url;
            result.result = await fetch(fullUrl, this.request);
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async queryVoid<T>(router?: HttpRouter): Promise<VoidWithError> {
        let resultTemp = await this.query(router);
        let result = new VoidWithError();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            if(!resultTemp.result) {
                return result;
            }
            // try to parse json if has result
            if(resultTemp.result.status != 204) {
                let tempResult = Converter.transform(await resultTemp.result.json());
                if(tempResult instanceof VoidWithError) {
                    for(let error of tempResult.errors) {
                        result.errors.push(error);
                    }
                }
            }
        } catch(e) {

        }
        return result;
    }

    public async queryJSON<T>(router?: HttpRouter): Promise<ResultWithError<T>> {
        let resultTemp = await this.query(router);
        let result = new ResultWithError<T>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            if(!resultTemp.result) {
                return result;
            }
            let tempResult = Converter.transform(await resultTemp.result.json());
            if(tempResult instanceof VoidWithError) {
                for(let error of tempResult.errors) {
                    result.errors.push(error);
                }
                if(tempResult instanceof ResultWithError) {
                    result.result = tempResult.result;
                }
            }
            else {
                result.result = tempResult;
            }
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async queryTxt(router?: HttpRouter): Promise<ResultWithError<string>> {
        let resultTemp = await this.query(router);
        let result = new ResultWithError<string>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            if(!resultTemp.result) {
                return result;
            }
            result.result = await resultTemp.result.text();
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async queryBlob(router?: HttpRouter): Promise<ResultWithError<Blob>> {
        let resultTemp = await this.query(router);
        let result = new ResultWithError<Blob>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            if(!resultTemp.result) {
                return result;
            }
            result.result = await resultTemp.result.blob();
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }
}