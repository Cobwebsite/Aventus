import { HttpRouter, JsonFormat } from "./HttpRouter.lib.avt";
import { GenericResultWithError } from "../tools/Error.lib.avt";
import { HttpMethod } from "./HttpMethod.lib.avt";
import { HttpError, HttpErrorCode } from "./HttpError.lib.avt";

export class HttpRequest {
    private request: RequestInit;
    private url: string;
    public constructor(url: string, method: HttpMethod = HttpMethod.GET, body: { [key: string | number]: any; } | FormData = null) {
        this.url = url;
        this.request = {};
        this.setMethod(method);
        this.prepareBody(body);
    }


    public setUrl(url: string) {
        this.url = url;
    }

    public toString(): string {
        return this.url + " : " + JSON.stringify(this.request);
    }

    public setBody(body: { [key: string | number]: any; } | FormData) {
        this.prepareBody(body);
    }
    public setMethod(method: HttpMethod) {
        this.request.method = method;
    }

    private prepareBody(data: { [key: string | number]: any; } | FormData = null) {
        if(!data) {
            return;
        }
        else if(data instanceof FormData) {
            this.request.body = data;
        }
        else {
            this.request.body = JSON.stringify(data);
            this.setHeader("Content-Type", "Application/json");
        }
    }

    public setHeader(name: string, value: string) {
        if(!this.request.headers) {
            this.request.headers = [];
        }
        (this.request.headers as [string, string][]).push([name, value]);
    }


    public async query(router: HttpRouter) {
        let result = new GenericResultWithError<Response>();
        try {
            result.result = await fetch(router.options.url + this.url, this.request);
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async queryJSON<T>(router: HttpRouter): Promise<GenericResultWithError<JsonFormat<T>>> {
        let resultTemp = await this.query(router);
        let result = new GenericResultWithError<JsonFormat<T>>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            let tempResult = await resultTemp.result.json();
            if(tempResult.$type == "AventusSharp.Data.ResultWithError") {
                for(let error of tempResult.Errors) {
                    result.errors.push(error);
                }
                result.result = tempResult.Result;
            }
            else {
                result.result = tempResult;
            }
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async queryTxt(router: HttpRouter): Promise<GenericResultWithError<string>> {
        let resultTemp = await this.query(router);
        let result = new GenericResultWithError<string>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            result.result = await resultTemp.result.text();
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }
}