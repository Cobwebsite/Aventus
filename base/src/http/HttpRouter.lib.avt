import { HttpRoute } from "./HttpRoute.lib.avt";
import type { MixProto } from "../tools/MergePrototype.lib.avt";
import type { RouteType, MergeRoutesType } from "./type.lib.avt";
import type { HttpRouterOptions } from "./HttpRouterOptions.lib.avt";
import { HttpMethod } from "./HttpMethod.lib.avt";
import { HttpRequest } from "./HttpRequest.lib.avt";
import { createCommProxy } from "../lib/Communication.lib.avt";


export abstract class HttpRouter {
    private _routes: any;
    @InternalProtected()
    public options: HttpRouterOptions;

    public static WithRoute<const T extends readonly ({ type: RouteType, path: string; } | RouteType)[]>(options: T) {
        abstract class Router extends HttpRouter {
            constructor() {
                super();
                for(let route of options) {
                    if(typeof route == "function") {
                        this._routes.add(route);
                    }
                    else {
                        this._routes.add(route.type, route.path);
                    }
                }
            }

        }
        return Router as MixProto<typeof HttpRouter, MergeRoutesType<T>, "routes">;
    }

    public constructor() {
        Object.defineProperty(this, "routes", {
            get: () => { return this._routes; }
        });
        this.createRoutesProxy();

        this.options = this.defineOptions(this.defaultOptionsValue());
    }
    private createRoutesProxy() {
        if(!this._routes) {
            this._routes = new Proxy({}, createCommProxy<HttpRoute>(this));
        }
    }

    private defaultOptionsValue(): HttpRouterOptions {
        return {
            url: location.protocol + "//" + location.host
        };
    }
    protected defineOptions(options: HttpRouterOptions): HttpRouterOptions {
        return options;
    }


    public async get<T>(url: string) {
        return await new HttpRequest(url).queryJSON<T>(this);
    }

    public async post<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.POST, data).queryJSON<T>(this);
    }

    public async put<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.PUT, data).queryJSON<T>(this);
    }

    public async delete<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.DELETE, data).queryJSON<T>(this);
    }

    public async option<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.OPTION, data).queryJSON<T>(this);
    }
}
