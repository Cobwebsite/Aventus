import type { HttpRouterOptions } from "./HttpRouterOptions.lib.avt";
import { HttpMethod } from "./HttpMethod.lib.avt";
import { HttpRequest } from "./HttpRequest.lib.avt";


@Storybook({
    prefix: "Http"
})
export class HttpRouter {
    @InternalProtected()
    public options: HttpRouterOptions;

    public constructor() {
        this.options = this.defineOptions(this.defaultOptionsValue());
    }

    private defaultOptionsValue(): HttpRouterOptions {
        return {
            url: location.protocol + "//" + location.host
        };
    }
    protected defineOptions(options: HttpRouterOptions): HttpRouterOptions {
        return options;
    }


    public async get<T>(url: string) {
        return await new HttpRequest(url).queryJSON<T>(this);
    }

    public async post<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.POST, data).queryJSON<T>(this);
    }

    public async put<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.PUT, data).queryJSON<T>(this);
    }

    public async delete<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.DELETE, data).queryJSON<T>(this);
    }

    public async option<T>(url: string, data?: { [key: string | number]: any; } | FormData) {
        return await new HttpRequest(url, HttpMethod.OPTION, data).queryJSON<T>(this);
    }
}
