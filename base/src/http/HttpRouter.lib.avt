import { HttpRoute } from "./HttpRoute.lib.avt";
import { MixProto } from "../tools/MergePrototype.lib.avt";
import { RouteType, MergeRoutesType } from "./type.lib.avt";
import { KeysObject } from "../ram/Ram.lib.avt";
import { GenericResultWithError } from "../tools/Error.lib.avt";
import { HttpError, HttpErrorCode } from "./HttpError.lib.avt";
import { HttpRouterOptions } from "./HttpRouterOptions.lib.avt";
import { HttpMethod } from "./HttpMethod.lib.avt";

export type JsonFormat<T> = T extends Array<infer U> ? KeysObject<U>[] : KeysObject<T>;

export abstract class HttpRouter {
    private _routes: any;
    public options: HttpRouterOptions;

    public static WithRoute<const T extends readonly ({ type: RouteType, path: string; } | RouteType)[]>(options: T) {
        abstract class Router extends HttpRouter {
            constructor() {
                super();
                for(let route of options) {
                    if(typeof route == "function") {
                        this._routes.addRoute(route);
                    }
                    else {
                        this._routes.addRoute(route.type, route.path);
                    }
                }
            }

        }
        return Router as MixProto<typeof HttpRouter, MergeRoutesType<T>, "routes">;
    }

    public constructor() {
        Object.defineProperty(this, "routes", {
            get: () => { return this._routes; }
        });
        this.createRoutesProxy();

        this.options = this.defineOptions(this.defaultOptionsValue());
    }
    private createRoutesProxy() {
        if(!this._routes) {
            var that = this;
            var proxyData = {
                routePath: {},
                get(target, prop, receiver) {
                    if(prop == "addRoute") {
                        return (routeClass: typeof HttpRoute, path) => {
                            try {
                                if(!path) {
                                    path = "";
                                }
                                let splitted = path.split(".");
                                let current = this.routePath;
                                for(let part of splitted) {
                                    if(part != "") {
                                        if(!current[part]) {
                                            current[part] = {};
                                        }
                                        current = current[part];
                                    }
                                }
                                let routeInstance = new routeClass(that);
                                let keyFromChild = [];
                                while(routeClass.prototype) {
                                    let keys = Object.getOwnPropertyNames(routeClass.prototype);
                                    for(let key of keys) {
                                        if(key != "constructor" && !keyFromChild.includes(key)) {
                                            keyFromChild.push(key);
                                            current[key] = routeInstance[key].bind(routeInstance);
                                        }
                                    }
                                    routeClass = Object.getPrototypeOf(routeClass);
                                }
                            } catch(e) {
                                console.error(e);
                            }
                        };
                    }
                    else if(prop == "allRoutes") {
                        return (flat) => {
                            if(!flat) {
                                return this.routePath;
                            }
                            else {
                                let result = {};
                                let load = (current, pathes: string[]) => {
                                    for(let key in current) {
                                        pathes.push(key);
                                        if(typeof current[key] == "function") {
                                            result[pathes.join(".")] = current[key];
                                        }
                                        else {
                                            load(current[key], pathes);
                                        }
                                        pathes.pop();
                                    }
                                };
                                load(this.routePath, []);
                                return result;
                            }
                        };
                    }
                    else if(this.routePath[prop]) {
                        return this.routePath[prop];
                    }
                    return null;
                }
            };
            this._routes = new Proxy({}, proxyData);
        }
    }

    private defaultOptionsValue(): HttpRouterOptions {
        return {
            url: ""
        };
    }
    protected defineOptions(options: HttpRouterOptions): HttpRouterOptions {
        options.url = "http://aventus.com/api/";
        return options;
    }

    public async request(url: string, options: RequestInit): Promise<GenericResultWithError<Response>> {
        let result = new GenericResultWithError<Response>();
        try {
            result.result = await fetch(this.options.url + url, options);
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async requestJSON<T>(url: string, options: RequestInit): Promise<GenericResultWithError<JsonFormat<T>>> {

        let resultTemp = await this.request(url, options);
        let result = new GenericResultWithError<JsonFormat<T>>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            let tempResult = await resultTemp.result.json();
            if(tempResult.$type == "AventusSharp.Data.ResultWithError") {
                for(let error of tempResult.Errors) {
                    result.errors.push(error);
                }
                result.result = tempResult.Result;
            }
            else {
                result.result = tempResult;
            }
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    public async requestTxt(url: string, options: RequestInit): Promise<GenericResultWithError<string>> {
        let resultTemp = await this.request(url, options);
        let result = new GenericResultWithError<string>();
        if(!resultTemp.success) {
            result.errors = resultTemp.errors;
            return result;
        }
        try {
            result.result = await resultTemp.result.text();
        } catch(e) {
            result.errors.push(new HttpError(HttpErrorCode.unknow, e));
        }
        return result;
    }

    protected prepareBody(data: { [key: string | number]: any; } | FormData = null): BodyInit {
        if(!data) {
            return null;
        }
        else if(data instanceof FormData) {
            return data;
        }
        return JSON.stringify(data);
    }

    public async get<T>(url: string) {
        let options: RequestInit = {
            method: HttpMethod.GET
        };
        return await this.requestJSON<T>(url, options);
    }

    public async post<T>(url: string, data: { [key: string | number]: any; } | FormData = null) {
        let body: BodyInit = this.prepareBody(data);
        const options: RequestInit = {
            method: HttpMethod.POST,
            body: body
        };
        return await this.requestJSON<T>(url, options);
    }

    public async put<T>(url: string, data: { [key: string | number]: any; } | FormData = null) {
        let body: BodyInit = this.prepareBody(data);
        const options: RequestInit = {
            method: HttpMethod.PUT,
            body: body
        };
        return await this.requestJSON<T>(url, options);
    }

    public async delete<T>(url: string, data: { [key: string | number]: any; } | FormData = null) {
        let body: BodyInit = this.prepareBody(data);
        const options: RequestInit = {
            method: HttpMethod.DELETE,
            body: body
        };
        return await this.requestJSON<T>(url, options);
    }

    public async option<T>(url: string, data: { [key: string | number]: any; } | FormData = null) {
        let body: BodyInit = this.prepareBody(data);
        const options: RequestInit = {
            method: HttpMethod.OPTION,
            body: body
        };
        return await this.requestJSON<T>(url, options);
    }
}
