import type { ExtractFromError, GenericError } from "Aventus@Main:Aventus.package.avt";

export type ProcessConfig = {
    handleErrors: (msg: string, errors: GenericError[]) => void;
};
export class Process {
    private static handleErrors?: (msg: string, errors: GenericError[]) => void;
    public static configure(config: ProcessConfig) {
        this.handleErrors = config.handleErrors;
    }
    public static async execute<X extends Aventus.ResultWithError<Y> | Aventus.VoidWithError, Y>(prom: Promise<X>): Promise<ExtractFromError<X, Y> | undefined> {
        const queryResult = await prom;
        return await this.parseErrors(queryResult);
    }
    public static async parseErrors<X extends Aventus.ResultWithError<Y> | Aventus.VoidWithError, Y>(result: X): Promise<ExtractFromError<X> | undefined> {
        if(result.errors.length > 0) {
            if(this.handleErrors) {
                let msg = result.errors.map(p => p.message.replace(/\n/g, '<br/>')).join("<br/>");
                this.handleErrors(msg, result.errors);
            }
            return undefined;
        }
        if(result instanceof Aventus.ResultWithError) return result.result;
        return undefined;
    }
}