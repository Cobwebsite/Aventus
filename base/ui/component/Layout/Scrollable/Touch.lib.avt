export class Tracker {
    private readonly velocityMultiplier: number = window.devicePixelRatio;

    public updateTime: number = Date.now();
    public delta: { x: number, y: number; } = { x: 0, y: 0 };
    public velocity: { x: number, y: number; } = { x: 0, y: 0 };
    public lastPosition: { x: number, y: number; } = { x: 0, y: 0 };

    constructor(touch: Touch) {
        this.lastPosition = this.getPosition(touch);
    }

    public update(touch: Touch) {
        const {
            velocity,
            updateTime,
            lastPosition,
        } = this;

        const now = Date.now();
        const position = this.getPosition(touch);

        const delta = {
            x: -(position.x - lastPosition.x),
            y: -(position.y - lastPosition.y),
        };

        const duration = (now - updateTime) || 16.7;
        const vx = delta.x / duration * 16.7;
        const vy = delta.y / duration * 16.7;
        velocity.x = vx * this.velocityMultiplier;
        velocity.y = vy * this.velocityMultiplier;

        this.delta = delta;
        this.updateTime = now;
        this.lastPosition = position;
    }

    private getPointerData(evt: any) {
        // if is touch event, return last item in touchList
        // else return original event
        return evt.touches ? evt.touches[evt.touches.length - 1] : evt;
    }
    private getPosition(evt: any) {
        const data = this.getPointerData(evt);

        return {
            x: data.clientX,
            y: data.clientY,
        };
    }
}

export class TouchRecord {
    private _activeTouchID?: number;
    private _touchList: { [id: number]: Tracker; } = {};

    private get _primitiveValue(): { x: number, y: number; } {
        return { x: 0, y: 0 };
    }

    public isActive(): boolean {
        return this._activeTouchID !== undefined;
    }

    public getDelta() {
        const tracker = this._getActiveTracker();

        if(!tracker) {
            return this._primitiveValue;
        }

        return { ...tracker.delta };
    }

    public getVelocity() {
        const tracker = this._getActiveTracker();

        if(!tracker) {
            return this._primitiveValue;
        }

        return { ...tracker.velocity };
    }

    public getEasingDistance(damping: number) {
        const deAcceleration = 1 - damping;

        let distance = {
            x: 0,
            y: 0,
        };

        const vel = this.getVelocity();
        const dirs = Object.keys(vel);
        for(let dir of dirs) {
            // ignore small velocity
            let v = Math.abs(vel[dir]) <= 10 ? 0 : vel[dir];

            while(v !== 0) {
                distance[dir] += v;
                v = (v * deAcceleration) | 0;
            }
        }

        return distance;
    }

    public track(evt: TouchEvent) {
        const {
            targetTouches,
        } = evt;

        const touches = Array.from(targetTouches);
        for(let touch of touches) {
            this._add(touch);
        }
        return this._touchList;
    }

    public update(evt: TouchEvent) {
        const {
            touches,
            changedTouches,
        } = evt;
        const touchesArray = Array.from(touches);
        for(let touch of touchesArray) {
            this._renew(touch);
        }

        this._setActiveID(changedTouches);

        return this._touchList;
    }

    public release(evt: TouchEvent) {
        delete this._activeTouchID;

        const touchesArray = Array.from(evt.changedTouches);
        for(let touch of touchesArray) {
            this._delete(touch);
        }
    }

    private _add(touch: Touch) {
        if(this._has(touch)) {
            // reset tracker
            this._delete(touch);
        }

        const tracker = new Tracker(touch);

        this._touchList[touch.identifier] = tracker;
    }

    private _renew(touch: Touch) {
        if(!this._has(touch)) {
            return;
        }

        const tracker = this._touchList[touch.identifier];

        tracker.update(touch);
    }

    private _delete(touch: Touch) {
        delete this._touchList[touch.identifier];
    }

    private _has(touch: Touch): boolean {
        return this._touchList.hasOwnProperty(touch.identifier);
    }

    private _setActiveID(touches: TouchList) {
        this._activeTouchID = touches[touches.length - 1].identifier;
    }

    private _getActiveTracker(): Tracker | undefined {
        const {
            _touchList,
            _activeTouchID,
        } = this;
        if(_activeTouchID !== undefined) {
            return _touchList[_activeTouchID];
        }
        return undefined;
    }
}