
export class Img extends Aventus.WebComponent implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props
    @Attribute()
    public cache: boolean;

    @Property((target: Img) => {
        target.onSrcChanged();
    })
    public src: string;

    @Property((target: Img) => {
        if(target.src != "") {
            target.calculateSize();
        }
    })
    public mode: 'stretch' | 'contains' | 'cover' = "contains";
    //#endregion


    //#region variables

    @ViewElement()
    protected imgEl: HTMLImageElement;
    @ViewElement()
    protected svgEl: HTMLDivElement;

    private isCalculing: boolean;
    private maxCalculateSize: number = 10;
    private ratio: number = 1;
    private resizeObserver: Aventus.ResizeObserver;
    //#endregion


    //#region states

    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    private calculateSize(attempt = 0) {
        if(this.isCalculing) {
            return;
        }
        if(this.src == "") {
            return;
        }
        this.isCalculing = true;
        if(getComputedStyle(this).display == 'none') {
            return;
        }
        if(attempt == this.maxCalculateSize) {
            this.isCalculing = false;
            return;
        }

        let element: HTMLImageElement | HTMLDivElement = this.imgEl;
        if(this.src.endsWith(".svg")) {
            element = this.svgEl;
        }
        this.style.width = '';
        this.style.height = '';
        element.style.width = '';
        element.style.height = '';

        if(element.offsetWidth == 0 && element.offsetHeight == 0) {
            setTimeout(() => {
                this.isCalculing = false;
                this.calculateSize(attempt + 1);
            }, 100);
            return;
        }

        let style = getComputedStyle(this);
        let addedY = Number(style.paddingTop.replace("px", "")) + Number(style.paddingBottom.replace("px", "")) + Number(style.borderTopWidth.replace("px", "")) + Number(style.borderBottomWidth.replace("px", ""));
        let addedX = Number(style.paddingLeft.replace("px", "")) + Number(style.paddingRight.replace("px", "")) + Number(style.borderLeftWidth.replace("px", "")) + Number(style.borderRightWidth.replace("px", ""));
        let availableHeight = this.offsetHeight - addedY;
        let availableWidth = this.offsetWidth - addedX;

        let sameWidth = (element.offsetWidth == availableWidth);
        let sameHeight = (element.offsetHeight == availableHeight);
        this.ratio = element.offsetWidth / element.offsetHeight;
        if(sameWidth && !sameHeight) {
            // height is set
            element.style.width = (availableHeight * this.ratio) + 'px';
            element.style.height = availableHeight + 'px';
        }
        else if(!sameWidth && sameHeight) {
            // width is set
            element.style.width = availableWidth + 'px';
            element.style.height = (availableWidth / this.ratio) + 'px';
        }
        else if(!sameWidth && !sameHeight) {
            if(this.mode == "stretch") {
                element.style.width = '100%';
                element.style.height = '100%';
            }
            else if(this.mode == "contains") {
                // suppose this height is max
                let newWidth = (availableHeight * this.ratio);
                if(newWidth <= availableWidth) {
                    //we can apply this value
                    element.style.width = newWidth + 'px';
                    element.style.height = availableHeight + 'px';
                }
                else {
                    element.style.width = availableWidth + 'px';
                    element.style.height = (availableWidth / this.ratio) + 'px';
                }

            }
            else if(this.mode == "cover") {
                // suppose this height is min
                let newWidth = (availableHeight * this.ratio);
                if(newWidth >= availableWidth) {
                    //we can apply this value
                    element.style.width = newWidth + 'px';
                    element.style.height = availableHeight + 'px';
                }
                else {
                    element.style.width = availableWidth + 'px';
                    element.style.height = (availableWidth / this.ratio) + 'px';
                }
            }
        }

        //center img
        let diffTop = (this.offsetHeight - element.offsetHeight - addedY) / 2;
        let diffLeft = (this.offsetWidth - element.offsetWidth - addedX) / 2;
        element.style.transform = "translate(" + diffLeft + "px, " + diffTop + "px)";
        element.style.opacity = '1';
        this.isCalculing = false;
    }
    private async onSrcChanged() {
        if(!this.src) {
            return;
        }
        if(this.src.endsWith(".svg")) {
            let svgContent = await Aventus.ResourceLoader.load(this.src);
            this.svgEl.innerHTML = svgContent;
            this.calculateSize();
        }
        else if(this.cache) {
            let base64 = await Aventus.ResourceLoader.load({
                url: this.src,
                type: 'img'
            });
            this.imgEl.setAttribute("src", base64);
            this.calculateSize();
        }
        else {
            this.imgEl.setAttribute("src", this.src);
            this.calculateSize();
        }
    }

    protected override postDestruction(): void {
        this.resizeObserver.disconnect();
        this.resizeObserver = null;
    }

    protected override postCreation(): void {
        this.resizeObserver = new Aventus.ResizeObserver({
            fps: 10,
            callback: () => {
                this.calculateSize();
            }
        });
        this.resizeObserver.observe(this);
    }
    //#endregion

}