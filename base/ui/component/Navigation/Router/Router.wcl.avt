import type { UriParamsValue } from "Aventus@Main:Aventus.package.avt";
import { RouterStateManager } from "../../../lib/RouterStateManager.lib.avt";
import type { Constructor } from "../../Form/Form/FormType.lib.avt";
import { Default404 } from "../Default404/Default404.wcl.avt";
import { Page } from "../Page/Page.wcl.avt";

namespace Navigation {
    export type RouterOptions = {
        page404?: Constructor<Page>;
        destroyPage?: boolean;
    };
    export type RouteAsyncOption = {
        route: string,
        scriptUrl: string,
        render: () => new () => Page;
    };
    export abstract class Router extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static
        protected static page404: Constructor<Page> = Default404;
        protected static destroyPage: boolean = false;

        public static configure(options: RouterOptions): void {
            if(options.page404 !== undefined) this.page404 = options.page404;
            if(options.destroyPage !== undefined) this.destroyPage = options.destroyPage;
        }
        //#endregion


        //#region props

        //#endregion


        //#region variables
        protected oldPage?: Page;
        @ViewElement()
        public contentEl!: HTMLDivElement;

        protected allRoutes: { [key: string]: RouteAsyncOption; } = {};
        protected activePath: string = "";
        protected activeState?: Aventus.State;
        protected oneStateActive: boolean = false;
        protected showPageMutex: Aventus.Mutex = new Aventus.Mutex();
        protected isReplace: boolean = false;
        //#endregion


        //#region constructor
        constructor() {
            super();
            this.validError404 = this.validError404.bind(this);
            this.canChangeState = this.canChangeState.bind(this);
            this.stateManager.canChangeState(this.canChangeState);
        }
        //#endregion


        //#region methods
        /**
         * Add all your routes inside this function (addRoute or addRouteAsync)
         */
        protected abstract defineRoutes(): void;
        protected get stateManager(): Aventus.StateManager {
            return Aventus.Instance.get(RouterStateManager);
        }

        protected addRouteAsync<T extends Page>(options: RouteAsyncOption) {
            this.allRoutes[options.route] = options;
        }
        protected addRoute(route: string, elementCtr: new () => Page) {
            this.allRoutes[route] = {
                route: route,
                scriptUrl: '',
                render: () => elementCtr
            };
        }

        protected register(): void {
            try {
                this.defineRoutes();
                this.stateManager.onAfterStateChanged(this.validError404);
                for(let key in this.allRoutes) {
                    this.initRoute(key);
                }
            } catch(e) {
                console.error(e);
            }
        }
        protected initRoute(path: string) {
            let element: Page | undefined = undefined;
            let allRoutes = this.allRoutes;
            this.stateManager.subscribe(path, {
                active: (currentState) => {
                    this.oneStateActive = true;
                    this.showPageMutex.safeRunLastAsync(async () => {
                        let isNew = false;
                        if(!element || !element.parentElement) {
                            let options = allRoutes[path];
                            if(options.scriptUrl != "") {
                                await Aventus.ResourceLoader.loadInHead(options.scriptUrl);
                            }

                            let cst = options.render();
                            element = new cst;
                            element.router = this;
                            isNew = true;
                        }

                        const canResult = await element.isAllowed(currentState, path, this);
                        if(canResult !== true) {
                            if(canResult === false) {
                                return;
                            }
                            this.navigate(canResult, { replace: true });
                            return;
                        }

                        if(isNew)
                            this.contentEl.appendChild(element);

                        if(this.oldPage && this.oldPage != element) {
                            await this.oldPage.hide();
                            const { destroy } = await this.oldPage.configure();
                            if(destroy === undefined && this.shouldDestroyFrame(this.oldPage)) {
                                this.oldPage.remove();
                            }
                            else if(destroy === true) {
                                this.oldPage.remove();
                            }
                        }

                        let oldPage = this.oldPage;
                        let oldUrl = this.activePath;
                        this.oldPage = element;
                        this.activePath = path;
                        this.activeState = currentState;
                        await element.show(currentState);

                        const { title, description, keywords } = await element.configure();
                        if(title !== undefined)
                            document.title = title;
                        if(keywords !== undefined) {
                            let meta = document.querySelector('meta[name="keywords"]');
                            if(!meta) {
                                meta = document.createElement('meta');
                            }
                            meta.setAttribute("content", keywords.join(", "));
                        }
                        if(description !== undefined) {
                            let meta = document.querySelector('meta[name="description"]');
                            if(!meta) {
                                meta = document.createElement('meta');
                            }
                            meta.setAttribute("content", description);
                        }


                        if(this.bindToUrl() && window.location.pathname != currentState.name) {
                            let newUrl = window.location.origin + currentState.name;
                            if(this.isReplace) {
                                window.history.replaceState({}, title ?? "", newUrl);
                            } else {
                                window.history.pushState({}, title ?? "", newUrl);
                            }
                        }
                        this.onNewPage(oldUrl, oldPage, path, element);
                    });
                },
                inactive: () => {
                    this.oneStateActive = false;
                }
            });
        }

        protected page404?: Page;
        protected async validError404() {
            if(!this.oneStateActive) {
                let Page404 = this.error404(this.stateManager.getState()) ?? Router.page404;
                if(Page404) {
                    if(!this.page404 || !this.page404.parentElement) {
                        this.page404 = new Page404();
                        this.page404.router = this;
                        this.contentEl.appendChild(this.page404);
                    }
                    if(this.oldPage && this.oldPage != this.page404) {
                        await this.oldPage.hide();
                    }
                    if(this.bindToUrl()) {
                        const currentState = this.stateManager.getState();
                        if(currentState && window.location.pathname != currentState.name) {
                            let newUrl = window.location.origin + currentState.name;
                            if(this.isReplace) {
                                window.history.replaceState({}, "Not found", newUrl);
                            } else {
                                window.history.pushState({}, "Not found", newUrl);
                            }
                        }
                    }
                    this.activeState = undefined;
                    this.oldPage = this.page404;
                    this.activePath = '';
                    await this.page404.show(this.activeState);
                }
            }
        }
        protected error404(state?: Aventus.State): null | (new () => Page) {
            return null;
        }
        protected onNewPage(oldUrl: string, oldPage: Page | undefined, newUrl: string, newPage: Page) {

        }
        public getSlugs(): UriParamsValue | null {
            return this.stateManager.getStateSlugs(this.activePath);
        }

        protected async canChangeState(newState: Aventus.State): Promise<boolean> {
            return true;
        }

        public async navigate(state: Aventus.State | string, options?: { replace: boolean; }): Promise<boolean> {
            if(options?.replace) {
                this.isReplace = true;
            }
            const result = await this.stateManager.setState(state);
            if(options?.replace) {
                this.isReplace = false;
            }
            return result;
        }


        protected bindToUrl(): boolean {
            return true;
        }

        protected defaultUrl(): string | undefined {
            return "/";
        }

        /**
         * Determine if the pash should be destroyed when hiding
         */
        protected shouldDestroyFrame(page: Page): boolean {
            return Router.destroyPage;
        }

        protected override postCreation(): void {
            this.register();
            let oldUrl = window.localStorage.getItem("navigation_url");
            if(oldUrl !== null) {
                Aventus.State.activate(oldUrl, this.stateManager);
                window.localStorage.removeItem("navigation_url");
            }
            else if(this.bindToUrl()) {
                Aventus.State.activate(window.location.pathname, this.stateManager);
            }
            else {
                let defaultUrl = this.defaultUrl();
                if(defaultUrl) {
                    Aventus.State.activate(defaultUrl, this.stateManager);
                }
            }

            if(this.bindToUrl()) {
                window.onpopstate = (e) => {
                    if(window.location.pathname != this.stateManager.getState()?.name) {
                        Aventus.State.activate(window.location.pathname, this.stateManager);
                    }
                };
            }
        }
        //#endregion

    }
}