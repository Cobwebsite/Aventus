import type { ButtonElement } from "../../Form/ButtonElement/ButtonElement.wcl.avt";
import { FormHandler } from "../../Form/Form/FormHandler.lib.avt";
import type { FormHandlerConfig, FormSchema, IForm, WithError } from "../../Form/Form/FormType.lib.avt";
import type { FormElement } from "../../Form/FormElement/FormElement.wcl.avt";
import { Page } from "../Page/Page.wcl.avt";

namespace Navigation {
    export type PageFormConfig = {
        submitWithEnter?: boolean;
    };
    export abstract class PageForm<T> extends Page implements Aventus.DefaultComponent, IForm {

        //#region static

        //#endregion


        //#region props

        //#endregion


        //#region variables
        private _form: FormHandler<T>;
        public get form(): FormHandler<T> { return this._form; }

        protected elements: FormElement<any>[] = [];
        protected btns: ButtonElement[] = [];
        //#endregion


        //#region constructor
        public constructor() {
            super();
            this._form = new FormHandler(this.formSchema(), this.formConfig());
        }
        //#endregion


        //#region methods
        public abstract submitAction(): Aventus.Asyncable<WithError<any>> | ((body: T) => Aventus.Asyncable<WithError<any>>);
        protected abstract formSchema(): FormSchema<T>;
        protected formConfig(): FormHandlerConfig<T> {
            return {};
        }
        protected pageConfig(): PageFormConfig {
            return {
                submitWithEnter: true
            };
        }

        public async submit() {
            return await this.form.submit(this.submitAction());
        }
        @BindThis()
        protected checkEnter(e: KeyboardEvent) {
            if(e.key == "Enter") {
                this.submit();
            }
        }
        public registerElement(element: FormElement<any>): PageForm<T> {
            const submitWithEnter = this.pageConfig().submitWithEnter;
            if(this.elements.length > 0) {
                if(submitWithEnter)
                    this.elements[this.elements.length - 1].removeEventListener("keyup", this.checkEnter);
            }
            this.elements.push(element);
            if(submitWithEnter)
                element.addEventListener("keyup", this.checkEnter);
            return this;
        }
        public registerSubmit(element: ButtonElement): PageForm<T> {
            this.btns.push(element);
            return this;
        }
        public async requestSubmit(): Promise<void> {
            await this.submit();
        }
        //#endregion

    }
}