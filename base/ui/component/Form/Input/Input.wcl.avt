import type { FormElement } from "../Form/FormElement.lib.avt";

namespace Form {
    export class Input extends Aventus.WebComponent implements Aventus.DefaultComponent, FormElement<string> {

        //#region static

        //#endregion


        //#region props
        /**
         * @inheritdoc
         */
        @Property((target: Input) => {
            target.onAttrChange();
        })
        public value: string = "";
        /**
         * 
         */
        @Property()
        public label: string = "";
        /**
         * Determine if the field is required
         */
        @Attribute()
        public required!: boolean;

        /**
         * Determine if the fields is disabled
         */
        @Attribute()
        public disabled!: boolean;


        @Attribute()
        public min_length!: number;

        @Attribute()
        public max_length!: number;

        @Attribute()
        public pattern?: string;
        //#endregion


        //#region variables
        @ViewElement()
        protected errorEl!: HTMLDivElement;
        @ViewElement()
        protected inputEl!: HTMLInputElement;

        private customValidationRules: ((value: string) => boolean | { success: boolean, error: string; })[] = [];
        //#endregion


        //#region states

        //#endregion


        //#region constructor

        //#endregion


        //#region methods
        /**
         * @inheritdoc
         */
        public onChange: Aventus.Callback<(value: string) => void> = new Aventus.Callback();

        protected onAttrChange() {
            if(this.inputEl && this.inputEl.value != this.value) {
                this.inputEl.value = this.value;
            }
            this.validate();
        }
        protected inputChange() {
            this.validate();
            if(this.inputEl && this.inputEl.value != this.value) {
                this.value = this.inputEl.value;
                this.onChange.trigger([this.value]);
            }
        }

        public addValidationRule(cb: (value: string) => boolean | { success: boolean, error: string; }) {
            if(this.customValidationRules.includes(cb)) {
                this.customValidationRules.push(cb);
            }
        }
        public removeValidationRule(cb: (value: string) => boolean | { success: boolean, error: string; }) {
            let index = this.customValidationRules.indexOf(cb);
            if(index > -1) {
                this.customValidationRules.slice(index, 1);
            }
        }

        private errors: string[] = [];
        public addError(msg: string) {
            this.errors.push(msg);
        }
        public clearErrors() {
            this.errors = [];
            this.printErrors();
        }
        public printErrors() {
            if(this.errorEl) {
                this.errorEl.innerHTML = this.errors.join("<br />");
            }
        }
        /**
         * @inheritdoc
         */
        public validate(): boolean {
            this.errors = [];
            if(!this.isReady) {
                return false;
            }
            if(this.disabled) {
                return true;
            }
            if(this.required) {
                if(!this.value) {
                    this.addError("The field is required");
                    this.printErrors();
                    return false;
                }
            }

            if(this.min_length) {
                if(this.value.length < this.min_length) {
                    this.addError("The length must be at least " + this.min_length + " characters");
                }
            }
            if(this.max_length) {
                if(this.value.length > this.max_length) {
                    this.addError("The length must be less thant " + this.max_length + " characters");
                }
            }
            if(this.pattern) {
                let reg = new RegExp(this.pattern);
                if(!this.value.match(reg)) {
                    this.addError("The field isn't valide");
                }
            }

            for(let fct of this.customValidationRules) {
                let result = fct(this.value);
                if(result instanceof Object) {
                    if(!result.success) {
                        this.addError(result.error);
                    }
                }
                else if(!result) {
                    this.addError("The field isn't valide");
                }
            }
            this.printErrors();
            return this.errors.length == 0;
        }

        //#endregion

    }
}