import { Callback } from "Aventus@Main:Aventus.package.avt";
import type { FormElement } from "../FormElement/FormElement.wcl.avt";
import { FormHandler } from "./FormHandler.lib.avt";
import type { Constructor, FormHandlerConfig, FormSchema, IForm, WithError } from "./FormType.lib.avt";
import type { ButtonElement } from "../ButtonElement/ButtonElement.wcl.avt";

namespace Form {
    export class Form<T extends any = any> extends Aventus.WebComponent implements Aventus.DefaultComponent, IForm {

        //#region static
        public static create<T>(schema: FormSchema<T>, config?: FormHandlerConfig<T>): FormHandler<T> {
            let form = new FormHandler<T>(schema, config);
            return form;
        }
        public static set defaultConfig(value: FormHandlerConfig<any>) {
            FormHandler._globalConfig = value;
        };
        public static get defaultConfig(): FormHandlerConfig<any> | undefined {
            return FormHandler._globalConfig;
        };

        public static set formElements(value: Constructor<IForm, true>[]) {
            FormHandler._IFormElements = value;
        };
        public static get formElements(): Constructor<IForm, true>[] {
            return FormHandler._IFormElements;
        };
        //#endregion


        //#region props

        //#endregion


        //#region variables
        @Injectable()
        public form?: FormHandler<any>;
        @Injectable()
        public request?: ((body: T) => Aventus.Asyncable<WithError<any>>);

        protected elements: FormElement<any>[] = [];
        protected btns: ButtonElement[] = [];
        //#endregion


        //#region states

        //#endregion


        //#region constructor

        //#endregion

        //#region events
        public onSubmit: Callback<() => void> = new Callback();
        //#endregion

        //#region methods
        @BindThis()
        protected checkEnter(e: KeyboardEvent) {
            if(e.key == "Enter") {
                this.requestSubmit();
            }
        }
        public registerElement(element: FormElement<any>): Form {
            if(this.elements.length > 0) {
                this.elements[this.elements.length - 1].removeEventListener("keyup", this.checkEnter);
            }
            this.elements.push(element);
            element.addEventListener("keyup", this.checkEnter);
            return this;
        }
        public registerSubmit(element: ButtonElement): Form {
            this.btns.push(element);
            return this;
        }


        public async requestSubmit(): Promise<void> {
            if(!this.form) {
                for(let element of this.elements) {
                    this.form = element.form?.handler;
                    if(this.form) break;
                }
            }
            if(this.form) {
                if(this.request) {
                    this.form.submit(this.request);
                }
                else if(await this.form.validate()) {
                    this.onSubmit.trigger();
                }
            }
        }
        //#endregion

    }
}