import { Form } from "../Form/Form.wcl.avt";
import type { FormHandler } from "../Form/FormHandler.lib.avt";
import type { IFormElement, InternalFormPart } from "../Form/FormType.lib.avt";

namespace Form {
    @Storybook()
    export abstract class FormElement<T> extends Aventus.WebComponent implements Aventus.DefaultComponent, IFormElement<T> {

        //#region static
        public static get formAssociated(): boolean { return true; }
        //#endregion


        //#region props
        @Attribute()
        protected has_errors!: boolean;
        @Property()
        public disabled!: boolean;
        //#endregion


        //#region variables
        /**
         * Value for the current form element
         */
        @Watch((target: FormElement<T>) => {
            target.onValueChange(target.value);
        })
        public value: T | undefined;

        /**
         * List of errors. You must display errors in child component
         */
        @Watch((target: FormElement<T>) => {
            target.onErrorsChange();
        })
        public errors: string[] = [];

        private _form?: InternalFormPart<T>;

        @Injectable()
        public get form(): InternalFormPart<T> | undefined {
            return this._form;
        }
        public set form(value: InternalFormPart<T> | undefined) {
            this.unlinkFormPart();
            this._form = value;
            this.linkFormPart();
        }

        protected internals: ElementInternals;
        protected canLinkValueToForm: boolean = false;
        protected handler?: Form<any> = undefined;
        //#endregion


        //#region constructor
        public constructor() {
            super();
            this.internals = this.attachInternals();
        }
        //#endregion

        //#region events
        public onChange: Aventus.Callback<(value: T | undefined) => void> = new Aventus.Callback();
        //#endregion


        //#region methods
        @BindThis()
        protected refreshValueFromForm() {
            if(this._form) {
                this.errors = [];
                this.value = this._form.value.get();
            }
        }

        protected unlinkFormPart() {
            if(this._form) {
                this._form.unregister(this);
                this._form.onValueChange.remove(this.refreshValueFromForm);
                this._form.onValidation.remove(this.onFormValidation);
            }
        }
        protected linkFormPart() {
            if(this._form) {
                this._form.register(this);
                this._form.onValueChange.add(this.refreshValueFromForm);
                this._form.onValidation.add(this.onFormValidation);
                this.refreshValueFromForm();
            }
            else {
                this.value = undefined;
            }
        }

        @BindThis()
        public async onFormValidation(errors: string[]): Promise<string[]> {
            let _errors = await this.validation();
            if(_errors.length == 0) {
                _errors = errors;
            }
            else if(errors.length > 0) {
                for(let error of errors) {
                    if(!_errors.includes(error)) {
                        _errors.push(error);
                    }
                }
            }
            this.errors = _errors;
            return this.errors;
        }


        public async validate(): Promise<boolean> {
            if(!this.form) {
                this.errors = await this.validation();
                return this.errors.length == 0;
            }
            return await this.form.test();
        }

        /**
         * Define your customs validations rules
         */
        protected abstract validation(): Promise<string[]>;

        /**
         * 
         */
        protected clearErrors() {
            this.errors = [];
        }

        protected triggerChange(value: T | undefined) {
            this.value = value;
            this.onChange.trigger(this.value);
            if(this.form) {
                this.form.value.set(this.value);
            }
        }

        protected onValueChange(value: T | undefined) {
            this.linkValueToForm();
        }
        protected onErrorsChange() {
            this.has_errors = this.errors.length > 0;
            this.linkErrorToForm();
        }
        protected linkErrorToForm() {
            if(!this.canLinkValueToForm) return;
            if(this.has_errors) {
                this.internals.setValidity({
                    customError: true
                }, this.errors.join(' & '));
            }
            else {
                this.internals.setValidity({});
            }
        }
        protected linkValueToForm() {
            if(!this.canLinkValueToForm) return;
            if(this.value === undefined) {
                this.internals.setFormValue(null);
            }
            else {
                this.internals.setFormValue(this.value + '');
            }
        }

        protected formAssociatedCallback(form: HTMLFormElement) {
            this.canLinkValueToForm = true;
            this.linkValueToForm();
            this.linkErrorToForm();
            this.validate();
        }

        protected formDisabledCallback(disabled: boolean) {
            this.disabled = disabled;
        }

        protected override postCreation(): void {
            super.postCreation();
            this.handler = this.findParentByType(Form)?.registerElement(this);
        }
        protected override postDestruction(): void {
            super.postDestruction();
            this.unlinkFormPart();
        }
        //#endregion

    }
}