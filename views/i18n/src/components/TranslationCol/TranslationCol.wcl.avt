import { Callback } from "Aventus@Main:Aventus.package.avt";
import { Translator } from "../../libs/I18n.lib.avt";
import { TranslationPage } from "../TranslationPage/TranslationPage.wcl.avt";
import { TranslationRow } from "../TranslationRow/TranslationRow.wcl.avt";

@Debugger({
    writeCompiled: true
})
export class TranslationCol extends Aventus.WebComponent implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props
    @Attribute()
    public icon_btn!: boolean;
    @Property()
    public error!: boolean;
    //#endregion


    //#region variables
    @Watch((target: TranslationCol) => {
        target.style.setProperty("--translation-col-width", "var(--col-width-" + target.locale + ")");
    })
    public locale!: string;

    @Watch((target: TranslationCol) => {
        target.showIcon();
    })
    public value!: string;

    @Injectable()
    public initialValue!: string;

    //#endregion


    //#region constructor

    //#endregion

    //#region events
    public change: Callback<(value: string) => void> = new Callback();
    //#endregion


    //#region methods
    protected getValue() {
        if(this.value == TranslationPage.KeyUndefined || !this.value) {
            this.error = true;
            return "";
        }
        this.error = false;
        return this.value;
    }
    protected async getTranslatation() {
        let row = this.findParentByType(TranslationRow)!;
        let page = this.findParentByType(TranslationPage)!;

        if(this.locale == page.fallback) {
            this.value = row.key;
            return;
        }

        const result = await Translator.translate(row.key, page.fallback, this.locale);
        if(result) {
            this.onChange(result);
        }
    }

    protected showIcon() {
        this.icon_btn = !this.value || this.value == TranslationPage.KeyUndefined;
    }

    /**
     * 
     */
    protected onChange(value: string) {
        this.value = value;
        this.change.trigger(value);
    }
    protected override postCreation(): void {
        this.showIcon()
    }
    //#endregion

}